
VL53L0X_Ranging_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b69c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001328  0800b83c  0800b83c  0001b83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cb64  0800cb64  0001cb64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cb68  0800cb68  0001cb68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000834  20000000  0800cb6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002d8  20000834  0800d3a0  00020834  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000b0c  0800d3a0  00020b0c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020834  2**0
                  CONTENTS, READONLY
  9 .debug_line   00012cc9  00000000  00000000  00020864  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00021b12  00000000  00000000  0003352d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000364b  00000000  00000000  0005503f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001388  00000000  00000000  00058690  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000655c1  00000000  00000000  00059a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001230  00000000  00000000  000befe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001346a  00000000  00000000  000c0210  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  000d367a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000057b4  00000000  00000000  000d36f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000834 	.word	0x20000834
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b824 	.word	0x0800b824

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000838 	.word	0x20000838
 80001dc:	0800b824 	.word	0x0800b824

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000284:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000286:	e003      	b.n	8000290 <LoopCopyDataInit>

08000288 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800028a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800028c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800028e:	3104      	adds	r1, #4

08000290 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000290:	480b      	ldr	r0, [pc, #44]	; (80002c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000292:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000294:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000296:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000298:	d3f6      	bcc.n	8000288 <CopyDataInit>
  ldr  r2, =_sbss
 800029a:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800029c:	e002      	b.n	80002a4 <LoopFillZerobss>

0800029e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800029e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002a0:	f842 3b04 	str.w	r3, [r2], #4

080002a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002a4:	4b09      	ldr	r3, [pc, #36]	; (80002cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002a8:	d3f9      	bcc.n	800029e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002aa:	f007 fb4b 	bl	8007944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ae:	f00a fe35 	bl	800af1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002b2:	f000 fd0b 	bl	8000ccc <main>
  bx  lr    
 80002b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80002b8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80002bc:	0800cb6c 	.word	0x0800cb6c
  ldr  r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002c4:	20000834 	.word	0x20000834
  ldr  r2, =_sbss
 80002c8:	20000834 	.word	0x20000834
  ldr  r3, = _ebss
 80002cc:	20000b0c 	.word	0x20000b0c

080002d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <ADC_IRQHandler>
	...

080002d4 <MX_TIM5_Init>:
 */
TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b08a      	sub	sp, #40	; 0x28
 80002d8:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim5.Instance = TIM5;
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <MX_TIM5_Init+0x64>)
 80002dc:	4a17      	ldr	r2, [pc, #92]	; (800033c <MX_TIM5_Init+0x68>)
 80002de:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80002e0:	4b15      	ldr	r3, [pc, #84]	; (8000338 <MX_TIM5_Init+0x64>)
 80002e2:	2253      	movs	r2, #83	; 0x53
 80002e4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <MX_TIM5_Init+0x64>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <MX_TIM5_Init+0x64>)
 80002ee:	f04f 32ff 	mov.w	r2, #4294967295
 80002f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f4:	4b10      	ldr	r3, [pc, #64]	; (8000338 <MX_TIM5_Init+0x64>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  HAL_TIM_OC_Init(&htim5);
 80002fa:	480f      	ldr	r0, [pc, #60]	; (8000338 <MX_TIM5_Init+0x64>)
 80002fc:	f009 fd83 	bl	8009e06 <HAL_TIM_OC_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000300:	2300      	movs	r3, #0
 8000302:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000304:	2300      	movs	r3, #0
 8000306:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);
 8000308:	f107 0320 	add.w	r3, r7, #32
 800030c:	4619      	mov	r1, r3
 800030e:	480a      	ldr	r0, [pc, #40]	; (8000338 <MX_TIM5_Init+0x64>)
 8000310:	f00a f820 	bl	800a354 <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000314:	2300      	movs	r3, #0
 8000316:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000320:	2300      	movs	r3, #0
 8000322:	617b      	str	r3, [r7, #20]
  HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1);
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	4619      	mov	r1, r3
 800032a:	4803      	ldr	r0, [pc, #12]	; (8000338 <MX_TIM5_Init+0x64>)
 800032c:	f009 fd96 	bl	8009e5c <HAL_TIM_OC_ConfigChannel>

}
 8000330:	bf00      	nop
 8000332:	3728      	adds	r7, #40	; 0x28
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	20000978 	.word	0x20000978
 800033c:	40000c00 	.word	0x40000c00

08000340 <TimeStamp_Init>:

void TimeStamp_Init(){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
    MX_TIM5_Init();
 8000344:	f7ff ffc6 	bl	80002d4 <MX_TIM5_Init>
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}

0800034c <TimeStamp_Reset>:

void TimeStamp_Reset(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim5);
 8000350:	4804      	ldr	r0, [pc, #16]	; (8000364 <TimeStamp_Reset+0x18>)
 8000352:	f009 fd3d 	bl	8009dd0 <HAL_TIM_Base_Start>
    htim5.Instance->CNT=0;
 8000356:	4b03      	ldr	r3, [pc, #12]	; (8000364 <TimeStamp_Reset+0x18>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2200      	movs	r2, #0
 800035c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000978 	.word	0x20000978

08000368 <TimeStamp_Get>:

uint32_t TimeStamp_Get(){
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
    return htim5.Instance->CNT;
 800036c:	4b03      	ldr	r3, [pc, #12]	; (800037c <TimeStamp_Get+0x14>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000372:	4618      	mov	r0, r3
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	20000978 	.word	0x20000978

08000380 <BSP_GetPushButton>:
#endif

#define BSP_BP_PORT GPIOC
#define BSP_BP_PIN  GPIO_PIN_13

int BSP_GetPushButton(void){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
    GPIO_PinState state ;
    state = HAL_GPIO_ReadPin(BSP_BP_PORT, BSP_BP_PIN);
 8000386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <BSP_GetPushButton+0x20>)
 800038c:	f008 f9c4 	bl	8008718 <HAL_GPIO_ReadPin>
 8000390:	4603      	mov	r3, r0
 8000392:	71fb      	strb	r3, [r7, #7]
    return state;
 8000394:	79fb      	ldrb	r3, [r7, #7]
}
 8000396:	4618      	mov	r0, r3
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40020800 	.word	0x40020800

080003a4 <PusbButton_WaitUnPress>:
 * As soon as time is elapsed -rb- is displayed to let user know the mode
 * switch is taken into account
 *
 * @return True if button remains pressed more than specified time
 */
int PusbButton_WaitUnPress(void){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
    uint32_t TimeStarted;
    TimeStarted = HAL_GetTick();
 80003aa:	f007 fb4d 	bl	8007a48 <HAL_GetTick>
 80003ae:	6078      	str	r0, [r7, #4]
    while( !BSP_GetPushButton() ){ ; /* debounce */
 80003b0:	e00a      	b.n	80003c8 <PusbButton_WaitUnPress+0x24>
        if(HAL_GetTick()- TimeStarted> PressBPSwicthTime){
 80003b2:	f007 fb49 	bl	8007a48 <HAL_GetTick>
 80003b6:	4602      	mov	r2, r0
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	1ad3      	subs	r3, r2, r3
 80003bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003c0:	d902      	bls.n	80003c8 <PusbButton_WaitUnPress+0x24>
            XNUCLEO53L0A1_SetDisplayString (" rb ");
 80003c2:	480b      	ldr	r0, [pc, #44]	; (80003f0 <PusbButton_WaitUnPress+0x4c>)
 80003c4:	f001 f888 	bl	80014d8 <XNUCLEO53L0A1_SetDisplayString>
    while( !BSP_GetPushButton() ){ ; /* debounce */
 80003c8:	f7ff ffda 	bl	8000380 <BSP_GetPushButton>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d0ef      	beq.n	80003b2 <PusbButton_WaitUnPress+0xe>
        }
    }
    return  HAL_GetTick() - TimeStarted>PressBPSwicthTime;
 80003d2:	f007 fb39 	bl	8007a48 <HAL_GetTick>
 80003d6:	4602      	mov	r2, r0
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	1ad3      	subs	r3, r2, r3
 80003dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003e0:	bf8c      	ite	hi
 80003e2:	2301      	movhi	r3, #1
 80003e4:	2300      	movls	r3, #0
 80003e6:	b2db      	uxtb	r3, r3

}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	0800b858 	.word	0x0800b858

080003f4 <HandleError>:
 * Handle Error
 *
 * Set err on display and loop forever
 * @param err Error case code
 */
void HandleError(int err){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
    char msg[16];
    sprintf(msg,"Er%d", err);
 80003fc:	f107 0308 	add.w	r3, r7, #8
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	4905      	ldr	r1, [pc, #20]	; (8000418 <HandleError+0x24>)
 8000404:	4618      	mov	r0, r3
 8000406:	f00a fdc1 	bl	800af8c <siprintf>
    XNUCLEO53L0A1_SetDisplayString(msg);
 800040a:	f107 0308 	add.w	r3, r7, #8
 800040e:	4618      	mov	r0, r3
 8000410:	f001 f862 	bl	80014d8 <XNUCLEO53L0A1_SetDisplayString>
    while(1){};
 8000414:	e7fe      	b.n	8000414 <HandleError+0x20>
 8000416:	bf00      	nop
 8000418:	0800b860 	.word	0x0800b860

0800041c <DetectSensors>:
 * Reset all sensor then do presence detection
 *
 * All present devices are data initiated and assigned to their final I2C address
 * @return
 */
int DetectSensors(int SetDisplay) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
    int i;
    uint16_t Id;
    int status;
    int FinalAddress;

    char PresentMsg[5]="    ";
 8000424:	4a7e      	ldr	r2, [pc, #504]	; (8000620 <DetectSensors+0x204>)
 8000426:	f107 0308 	add.w	r3, r7, #8
 800042a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800042e:	6018      	str	r0, [r3, #0]
 8000430:	3304      	adds	r3, #4
 8000432:	7019      	strb	r1, [r3, #0]
    /* Reset all */
    nDevPresent = 0;
 8000434:	4b7b      	ldr	r3, [pc, #492]	; (8000624 <DetectSensors+0x208>)
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i++)
 800043a:	2300      	movs	r3, #0
 800043c:	61fb      	str	r3, [r7, #28]
 800043e:	e007      	b.n	8000450 <DetectSensors+0x34>
        status = XNUCLEO53L0A1_ResetId(i, 0);
 8000440:	2100      	movs	r1, #0
 8000442:	69f8      	ldr	r0, [r7, #28]
 8000444:	f000 ff42 	bl	80012cc <XNUCLEO53L0A1_ResetId>
 8000448:	61b8      	str	r0, [r7, #24]
    for (i = 0; i < 3; i++)
 800044a:	69fb      	ldr	r3, [r7, #28]
 800044c:	3301      	adds	r3, #1
 800044e:	61fb      	str	r3, [r7, #28]
 8000450:	69fb      	ldr	r3, [r7, #28]
 8000452:	2b02      	cmp	r3, #2
 8000454:	ddf4      	ble.n	8000440 <DetectSensors+0x24>

    /* detect all sensors (even on-board)*/
    for (i = 0; i < 3; i++) {
 8000456:	2300      	movs	r3, #0
 8000458:	61fb      	str	r3, [r7, #28]
 800045a:	e0a3      	b.n	80005a4 <DetectSensors+0x188>
        VL53L0X_Dev_t *pDev;
        pDev = &VL53L0XDevs[i];
 800045c:	69fb      	ldr	r3, [r7, #28]
 800045e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000462:	fb02 f303 	mul.w	r3, r2, r3
 8000466:	4a70      	ldr	r2, [pc, #448]	; (8000628 <DetectSensors+0x20c>)
 8000468:	4413      	add	r3, r2
 800046a:	617b      	str	r3, [r7, #20]
        pDev->I2cDevAddr = 0x52;
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	2252      	movs	r2, #82	; 0x52
 8000470:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        pDev->Present = 0;
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	2200      	movs	r2, #0
 8000478:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        status = XNUCLEO53L0A1_ResetId( pDev->Id, 1);
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8000482:	2101      	movs	r1, #1
 8000484:	4618      	mov	r0, r3
 8000486:	f000 ff21 	bl	80012cc <XNUCLEO53L0A1_ResetId>
 800048a:	61b8      	str	r0, [r7, #24]
        HAL_Delay(2);
 800048c:	2002      	movs	r0, #2
 800048e:	f007 fae7 	bl	8007a60 <HAL_Delay>
        FinalAddress=0x52+(i+1)*2;
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	332a      	adds	r3, #42	; 0x2a
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	613b      	str	r3, [r7, #16]

        do {
        	/* Set I2C standard mode (400 KHz) before doing the first register access */
        	if (status == VL53L0X_ERROR_NONE)
 800049a:	69bb      	ldr	r3, [r7, #24]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d106      	bne.n	80004ae <DetectSensors+0x92>
        		status = VL53L0X_WrByte(pDev, 0x88, 0x00);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2188      	movs	r1, #136	; 0x88
 80004a4:	6978      	ldr	r0, [r7, #20]
 80004a6:	f001 fa89 	bl	80019bc <VL53L0X_WrByte>
 80004aa:	4603      	mov	r3, r0
 80004ac:	61bb      	str	r3, [r7, #24]

        	/* Try to read one register using default 0x52 address */
            status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 80004ae:	f107 030e 	add.w	r3, r7, #14
 80004b2:	461a      	mov	r2, r3
 80004b4:	21c0      	movs	r1, #192	; 0xc0
 80004b6:	6978      	ldr	r0, [r7, #20]
 80004b8:	f001 fb2c 	bl	8001b14 <VL53L0X_RdWord>
 80004bc:	4603      	mov	r3, r0
 80004be:	61bb      	str	r3, [r7, #24]
            if (status) {
 80004c0:	69bb      	ldr	r3, [r7, #24]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d004      	beq.n	80004d0 <DetectSensors+0xb4>
                debug_printf("#%d Read id fail\n", i);
 80004c6:	69f9      	ldr	r1, [r7, #28]
 80004c8:	4858      	ldr	r0, [pc, #352]	; (800062c <DetectSensors+0x210>)
 80004ca:	f001 f8b7 	bl	800163c <uart_printf>
                break;
 80004ce:	e05f      	b.n	8000590 <DetectSensors+0x174>
            }
            if (Id == 0xEEAA) {
 80004d0:	89fb      	ldrh	r3, [r7, #14]
 80004d2:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d152      	bne.n	8000580 <DetectSensors+0x164>
				/* Sensor is found => Change its I2C address to final one */
                status = VL53L0X_SetDeviceAddress(pDev,FinalAddress);
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	4619      	mov	r1, r3
 80004e0:	6978      	ldr	r0, [r7, #20]
 80004e2:	f001 fbd9 	bl	8001c98 <VL53L0X_SetDeviceAddress>
 80004e6:	4603      	mov	r3, r0
 80004e8:	61bb      	str	r3, [r7, #24]
                if (status != 0) {
 80004ea:	69bb      	ldr	r3, [r7, #24]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d004      	beq.n	80004fa <DetectSensors+0xde>
                    debug_printf("#i VL53L0X_SetDeviceAddress fail\n", i);
 80004f0:	69f9      	ldr	r1, [r7, #28]
 80004f2:	484f      	ldr	r0, [pc, #316]	; (8000630 <DetectSensors+0x214>)
 80004f4:	f001 f8a2 	bl	800163c <uart_printf>
                    break;
 80004f8:	e04a      	b.n	8000590 <DetectSensors+0x174>
                }
                pDev->I2cDevAddr = FinalAddress;
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
                /* Check all is OK with the new I2C address and initialize the sensor */
                status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 8000504:	f107 030e 	add.w	r3, r7, #14
 8000508:	461a      	mov	r2, r3
 800050a:	21c0      	movs	r1, #192	; 0xc0
 800050c:	6978      	ldr	r0, [r7, #20]
 800050e:	f001 fb01 	bl	8001b14 <VL53L0X_RdWord>
 8000512:	4603      	mov	r3, r0
 8000514:	61bb      	str	r3, [r7, #24]
                if (status != 0) {
 8000516:	69bb      	ldr	r3, [r7, #24]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d004      	beq.n	8000526 <DetectSensors+0x10a>
					debug_printf("#i VL53L0X_RdWord fail\n", i);
 800051c:	69f9      	ldr	r1, [r7, #28]
 800051e:	4845      	ldr	r0, [pc, #276]	; (8000634 <DetectSensors+0x218>)
 8000520:	f001 f88c 	bl	800163c <uart_printf>
					break;
 8000524:	e034      	b.n	8000590 <DetectSensors+0x174>
				}

                status = VL53L0X_DataInit(pDev);
 8000526:	6978      	ldr	r0, [r7, #20]
 8000528:	f001 fbfa 	bl	8001d20 <VL53L0X_DataInit>
 800052c:	4603      	mov	r3, r0
 800052e:	61bb      	str	r3, [r7, #24]
                if( status == 0 ){
 8000530:	69bb      	ldr	r3, [r7, #24]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d11f      	bne.n	8000576 <DetectSensors+0x15a>
                    pDev->Present = 1;
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	2201      	movs	r2, #1
 800053a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                }
                else{
                    debug_printf("VL53L0X_DataInit %d fail\n", i);
                    break;
                }
                trace_printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800054a:	461a      	mov	r2, r3
 800054c:	483a      	ldr	r0, [pc, #232]	; (8000638 <DetectSensors+0x21c>)
 800054e:	f001 f875 	bl	800163c <uart_printf>
                nDevPresent++;
 8000552:	4b34      	ldr	r3, [pc, #208]	; (8000624 <DetectSensors+0x208>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	4a32      	ldr	r2, [pc, #200]	; (8000624 <DetectSensors+0x208>)
 800055a:	6013      	str	r3, [r2, #0]
                nDevMask |= 1 << i;
 800055c:	2201      	movs	r2, #1
 800055e:	69fb      	ldr	r3, [r7, #28]
 8000560:	409a      	lsls	r2, r3
 8000562:	4b36      	ldr	r3, [pc, #216]	; (800063c <DetectSensors+0x220>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4313      	orrs	r3, r2
 8000568:	4a34      	ldr	r2, [pc, #208]	; (800063c <DetectSensors+0x220>)
 800056a:	6013      	str	r3, [r2, #0]
                pDev->Present = 1;
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	2201      	movs	r2, #1
 8000570:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8000574:	e00c      	b.n	8000590 <DetectSensors+0x174>
                    debug_printf("VL53L0X_DataInit %d fail\n", i);
 8000576:	69f9      	ldr	r1, [r7, #28]
 8000578:	4831      	ldr	r0, [pc, #196]	; (8000640 <DetectSensors+0x224>)
 800057a:	f001 f85f 	bl	800163c <uart_printf>
                    break;
 800057e:	e007      	b.n	8000590 <DetectSensors+0x174>
            }
            else {
                debug_printf("#%d unknown ID %x\n", i, Id);
 8000580:	89fb      	ldrh	r3, [r7, #14]
 8000582:	461a      	mov	r2, r3
 8000584:	69f9      	ldr	r1, [r7, #28]
 8000586:	482f      	ldr	r0, [pc, #188]	; (8000644 <DetectSensors+0x228>)
 8000588:	f001 f858 	bl	800163c <uart_printf>
                status = 1;
 800058c:	2301      	movs	r3, #1
 800058e:	61bb      	str	r3, [r7, #24]
            }
        } while (0);
        /* if fail r can't use for any reason then put the  device back to reset */
        if (status) {
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d003      	beq.n	800059e <DetectSensors+0x182>
            XNUCLEO53L0A1_ResetId(i, 0);
 8000596:	2100      	movs	r1, #0
 8000598:	69f8      	ldr	r0, [r7, #28]
 800059a:	f000 fe97 	bl	80012cc <XNUCLEO53L0A1_ResetId>
    for (i = 0; i < 3; i++) {
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	3301      	adds	r3, #1
 80005a2:	61fb      	str	r3, [r7, #28]
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	f77f af58 	ble.w	800045c <DetectSensors+0x40>
        }
    }
    /* Display detected sensor(s) */
    if( SetDisplay ){
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d030      	beq.n	8000614 <DetectSensors+0x1f8>
        for(i=0; i<3; i++){
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
 80005b6:	e01f      	b.n	80005f8 <DetectSensors+0x1dc>
            if( VL53L0XDevs[i].Present ){
 80005b8:	4a1b      	ldr	r2, [pc, #108]	; (8000628 <DetectSensors+0x20c>)
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80005c0:	fb01 f303 	mul.w	r3, r1, r3
 80005c4:	4413      	add	r3, r2
 80005c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d010      	beq.n	80005f2 <DetectSensors+0x1d6>
                PresentMsg[i+1]=VL53L0XDevs[i].DevLetter;
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	3301      	adds	r3, #1
 80005d4:	4914      	ldr	r1, [pc, #80]	; (8000628 <DetectSensors+0x20c>)
 80005d6:	69fa      	ldr	r2, [r7, #28]
 80005d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80005dc:	fb00 f202 	mul.w	r2, r0, r2
 80005e0:	440a      	add	r2, r1
 80005e2:	f202 1261 	addw	r2, r2, #353	; 0x161
 80005e6:	7812      	ldrb	r2, [r2, #0]
 80005e8:	f107 0120 	add.w	r1, r7, #32
 80005ec:	440b      	add	r3, r1
 80005ee:	f803 2c18 	strb.w	r2, [r3, #-24]
        for(i=0; i<3; i++){
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	3301      	adds	r3, #1
 80005f6:	61fb      	str	r3, [r7, #28]
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	dddc      	ble.n	80005b8 <DetectSensors+0x19c>
            }
        }
        PresentMsg[0]=' ';
 80005fe:	2320      	movs	r3, #32
 8000600:	723b      	strb	r3, [r7, #8]
        XNUCLEO53L0A1_SetDisplayString(PresentMsg);
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	4618      	mov	r0, r3
 8000608:	f000 ff66 	bl	80014d8 <XNUCLEO53L0A1_SetDisplayString>
        HAL_Delay(1000);
 800060c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000610:	f007 fa26 	bl	8007a60 <HAL_Delay>
    }

    return nDevPresent;
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <DetectSensors+0x208>)
 8000616:	681b      	ldr	r3, [r3, #0]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	0800b918 	.word	0x0800b918
 8000624:	20000850 	.word	0x20000850
 8000628:	20000018 	.word	0x20000018
 800062c:	0800b868 	.word	0x0800b868
 8000630:	0800b87c 	.word	0x0800b87c
 8000634:	0800b8a0 	.word	0x0800b8a0
 8000638:	0800b8d4 	.word	0x0800b8d4
 800063c:	20000974 	.word	0x20000974
 8000640:	0800b8b8 	.word	0x0800b8b8
 8000644:	0800b904 	.word	0x0800b904

08000648 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(RangingConfig_e rangingConfig){
 8000648:	b580      	push	{r7, lr}
 800064a:	b08c      	sub	sp, #48	; 0x30
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
    int status;
    uint8_t VhvSettings;
    uint8_t PhaseCal;
    uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 8000652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 8000658:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t timingBudget = 33000;
 800065e:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8000662:	623b      	str	r3, [r7, #32]
	uint8_t preRangeVcselPeriod = 14;
 8000664:	230e      	movs	r3, #14
 8000666:	77fb      	strb	r3, [r7, #31]
	uint8_t finalRangeVcselPeriod = 10;
 8000668:	230a      	movs	r3, #10
 800066a:	77bb      	strb	r3, [r7, #30]

    for( i=0; i<3; i++){
 800066c:	2300      	movs	r3, #0
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000670:	e140      	b.n	80008f4 <SetupSingleShot+0x2ac>
        if( VL53L0XDevs[i].Present){
 8000672:	4aa4      	ldr	r2, [pc, #656]	; (8000904 <SetupSingleShot+0x2bc>)
 8000674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000676:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800067a:	fb01 f303 	mul.w	r3, r1, r3
 800067e:	4413      	add	r3, r2
 8000680:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	f000 8131 	beq.w	80008ee <SetupSingleShot+0x2a6>
            status=VL53L0X_StaticInit(&VL53L0XDevs[i]);
 800068c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800068e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000692:	fb02 f303 	mul.w	r3, r2, r3
 8000696:	4a9b      	ldr	r2, [pc, #620]	; (8000904 <SetupSingleShot+0x2bc>)
 8000698:	4413      	add	r3, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fcce 	bl	800203c <VL53L0X_StaticInit>
 80006a0:	4603      	mov	r3, r0
 80006a2:	61bb      	str	r3, [r7, #24]
            if( status ){
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d003      	beq.n	80006b2 <SetupSingleShot+0x6a>
                debug_printf("VL53L0X_StaticInit %d failed\n",i);
 80006aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80006ac:	4896      	ldr	r0, [pc, #600]	; (8000908 <SetupSingleShot+0x2c0>)
 80006ae:	f000 ffc5 	bl	800163c <uart_printf>
            }

            status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 80006b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006b8:	fb02 f303 	mul.w	r3, r2, r3
 80006bc:	4a91      	ldr	r2, [pc, #580]	; (8000904 <SetupSingleShot+0x2bc>)
 80006be:	4413      	add	r3, r2
 80006c0:	f107 0216 	add.w	r2, r7, #22
 80006c4:	f107 0117 	add.w	r1, r7, #23
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 feeb 	bl	80034a4 <VL53L0X_PerformRefCalibration>
 80006ce:	4603      	mov	r3, r0
 80006d0:	61bb      	str	r3, [r7, #24]
			if( status ){
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d002      	beq.n	80006de <SetupSingleShot+0x96>
			   debug_printf("VL53L0X_PerformRefCalibration failed\n");
 80006d8:	488c      	ldr	r0, [pc, #560]	; (800090c <SetupSingleShot+0x2c4>)
 80006da:	f000 ffaf 	bl	800163c <uart_printf>
			}

			status = VL53L0X_PerformRefSpadManagement(&VL53L0XDevs[i], &refSpadCount, &isApertureSpads);
 80006de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006e4:	fb02 f303 	mul.w	r3, r2, r3
 80006e8:	4a86      	ldr	r2, [pc, #536]	; (8000904 <SetupSingleShot+0x2bc>)
 80006ea:	4413      	add	r3, r2
 80006ec:	f107 020f 	add.w	r2, r7, #15
 80006f0:	f107 0110 	add.w	r1, r7, #16
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fced 	bl	80040d4 <VL53L0X_PerformRefSpadManagement>
 80006fa:	4603      	mov	r3, r0
 80006fc:	61bb      	str	r3, [r7, #24]
			if( status ){
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d002      	beq.n	800070a <SetupSingleShot+0xc2>
			   debug_printf("VL53L0X_PerformRefSpadManagement failed\n");
 8000704:	4882      	ldr	r0, [pc, #520]	; (8000910 <SetupSingleShot+0x2c8>)
 8000706:	f000 ff99 	bl	800163c <uart_printf>
			}

            status = VL53L0X_SetDeviceMode(&VL53L0XDevs[i], VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 800070a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800070c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000710:	fb02 f303 	mul.w	r3, r2, r3
 8000714:	4a7b      	ldr	r2, [pc, #492]	; (8000904 <SetupSingleShot+0x2bc>)
 8000716:	4413      	add	r3, r2
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fef6 	bl	800250c <VL53L0X_SetDeviceMode>
 8000720:	4603      	mov	r3, r0
 8000722:	61bb      	str	r3, [r7, #24]
            if( status ){
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d002      	beq.n	8000730 <SetupSingleShot+0xe8>
               debug_printf("VL53L0X_SetDeviceMode failed\n");
 800072a:	487a      	ldr	r0, [pc, #488]	; (8000914 <SetupSingleShot+0x2cc>)
 800072c:	f000 ff86 	bl	800163c <uart_printf>
            }

            status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 8000730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000732:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000736:	fb02 f303 	mul.w	r3, r2, r3
 800073a:	4a72      	ldr	r2, [pc, #456]	; (8000904 <SetupSingleShot+0x2bc>)
 800073c:	4413      	add	r3, r2
 800073e:	2201      	movs	r2, #1
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f002 fba8 	bl	8002e98 <VL53L0X_SetLimitCheckEnable>
 8000748:	4603      	mov	r3, r0
 800074a:	61bb      	str	r3, [r7, #24]
			if( status ){
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <SetupSingleShot+0x110>
			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
 8000752:	4871      	ldr	r0, [pc, #452]	; (8000918 <SetupSingleShot+0x2d0>)
 8000754:	f000 ff72 	bl	800163c <uart_printf>
			}

			status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 8000758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800075a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800075e:	fb02 f303 	mul.w	r3, r2, r3
 8000762:	4a68      	ldr	r2, [pc, #416]	; (8000904 <SetupSingleShot+0x2bc>)
 8000764:	4413      	add	r3, r2
 8000766:	2201      	movs	r2, #1
 8000768:	2101      	movs	r1, #1
 800076a:	4618      	mov	r0, r3
 800076c:	f002 fb94 	bl	8002e98 <VL53L0X_SetLimitCheckEnable>
 8000770:	4603      	mov	r3, r0
 8000772:	61bb      	str	r3, [r7, #24]
			if( status ){
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <SetupSingleShot+0x138>
			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
 800077a:	4867      	ldr	r0, [pc, #412]	; (8000918 <SetupSingleShot+0x2d0>)
 800077c:	f000 ff5e 	bl	800163c <uart_printf>
			}
			/* Ranging configuration */
            switch(rangingConfig) {
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d01e      	beq.n	80007c4 <SetupSingleShot+0x17c>
 8000786:	2b02      	cmp	r3, #2
 8000788:	d00f      	beq.n	80007aa <SetupSingleShot+0x162>
 800078a:	2b00      	cmp	r3, #0
 800078c:	d128      	bne.n	80007e0 <SetupSingleShot+0x198>
            case LONG_RANGE:
            	signalLimit = (FixPoint1616_t)(0.1*65536);
 800078e:	f641 1399 	movw	r3, #6553	; 0x1999
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
            	sigmaLimit = (FixPoint1616_t)(60*65536);
 8000794:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
            	timingBudget = 33000;
 800079a:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800079e:	623b      	str	r3, [r7, #32]
            	preRangeVcselPeriod = 18;
 80007a0:	2312      	movs	r3, #18
 80007a2:	77fb      	strb	r3, [r7, #31]
            	finalRangeVcselPeriod = 14;
 80007a4:	230e      	movs	r3, #14
 80007a6:	77bb      	strb	r3, [r7, #30]
            	break;
 80007a8:	e01d      	b.n	80007e6 <SetupSingleShot+0x19e>
            case HIGH_ACCURACY:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 80007aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
				sigmaLimit = (FixPoint1616_t)(18*65536);
 80007b0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
				timingBudget = 200000;
 80007b6:	4b59      	ldr	r3, [pc, #356]	; (800091c <SetupSingleShot+0x2d4>)
 80007b8:	623b      	str	r3, [r7, #32]
				preRangeVcselPeriod = 14;
 80007ba:	230e      	movs	r3, #14
 80007bc:	77fb      	strb	r3, [r7, #31]
				finalRangeVcselPeriod = 10;
 80007be:	230a      	movs	r3, #10
 80007c0:	77bb      	strb	r3, [r7, #30]
				break;
 80007c2:	e010      	b.n	80007e6 <SetupSingleShot+0x19e>
            case HIGH_SPEED:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 80007c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
				sigmaLimit = (FixPoint1616_t)(32*65536);
 80007ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
				timingBudget = 20000;
 80007d0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80007d4:	623b      	str	r3, [r7, #32]
				preRangeVcselPeriod = 14;
 80007d6:	230e      	movs	r3, #14
 80007d8:	77fb      	strb	r3, [r7, #31]
				finalRangeVcselPeriod = 10;
 80007da:	230a      	movs	r3, #10
 80007dc:	77bb      	strb	r3, [r7, #30]
				break;
 80007de:	e002      	b.n	80007e6 <SetupSingleShot+0x19e>
            default:
            	debug_printf("Not Supported");
 80007e0:	484f      	ldr	r0, [pc, #316]	; (8000920 <SetupSingleShot+0x2d8>)
 80007e2:	f000 ff2b 	bl	800163c <uart_printf>
            }

            status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 80007e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80007ec:	fb02 f303 	mul.w	r3, r2, r3
 80007f0:	4a44      	ldr	r2, [pc, #272]	; (8000904 <SetupSingleShot+0x2bc>)
 80007f2:	4413      	add	r3, r2
 80007f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007f6:	2101      	movs	r1, #1
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 fc51 	bl	80030a0 <VL53L0X_SetLimitCheckValue>
 80007fe:	4603      	mov	r3, r0
 8000800:	61bb      	str	r3, [r7, #24]
			if( status ){
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <SetupSingleShot+0x1c6>
			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
 8000808:	4846      	ldr	r0, [pc, #280]	; (8000924 <SetupSingleShot+0x2dc>)
 800080a:	f000 ff17 	bl	800163c <uart_printf>
			}

			status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 800080e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000810:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000814:	fb02 f303 	mul.w	r3, r2, r3
 8000818:	4a3a      	ldr	r2, [pc, #232]	; (8000904 <SetupSingleShot+0x2bc>)
 800081a:	4413      	add	r3, r2
 800081c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f002 fc3d 	bl	80030a0 <VL53L0X_SetLimitCheckValue>
 8000826:	4603      	mov	r3, r0
 8000828:	61bb      	str	r3, [r7, #24]
			if( status ){
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d002      	beq.n	8000836 <SetupSingleShot+0x1ee>
			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
 8000830:	483c      	ldr	r0, [pc, #240]	; (8000924 <SetupSingleShot+0x2dc>)
 8000832:	f000 ff03 	bl	800163c <uart_printf>
			}

            status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&VL53L0XDevs[i],  timingBudget);
 8000836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000838:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800083c:	fb02 f303 	mul.w	r3, r2, r3
 8000840:	4a30      	ldr	r2, [pc, #192]	; (8000904 <SetupSingleShot+0x2bc>)
 8000842:	4413      	add	r3, r2
 8000844:	6a39      	ldr	r1, [r7, #32]
 8000846:	4618      	mov	r0, r3
 8000848:	f001 ff5a 	bl	8002700 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800084c:	4603      	mov	r3, r0
 800084e:	61bb      	str	r3, [r7, #24]
            if( status ){
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <SetupSingleShot+0x214>
               debug_printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 8000856:	4834      	ldr	r0, [pc, #208]	; (8000928 <SetupSingleShot+0x2e0>)
 8000858:	f000 fef0 	bl	800163c <uart_printf>
            }

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 800085c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800085e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000862:	fb02 f303 	mul.w	r3, r2, r3
 8000866:	4a27      	ldr	r2, [pc, #156]	; (8000904 <SetupSingleShot+0x2bc>)
 8000868:	4413      	add	r3, r2
 800086a:	7ffa      	ldrb	r2, [r7, #31]
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f001 ffc2 	bl	80027f8 <VL53L0X_SetVcselPulsePeriod>
 8000874:	4603      	mov	r3, r0
 8000876:	61bb      	str	r3, [r7, #24]
			if( status ){
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <SetupSingleShot+0x23c>
			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800087e:	482b      	ldr	r0, [pc, #172]	; (800092c <SetupSingleShot+0x2e4>)
 8000880:	f000 fedc 	bl	800163c <uart_printf>
			}

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8000884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000886:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800088a:	fb02 f303 	mul.w	r3, r2, r3
 800088e:	4a1d      	ldr	r2, [pc, #116]	; (8000904 <SetupSingleShot+0x2bc>)
 8000890:	4413      	add	r3, r2
 8000892:	7fba      	ldrb	r2, [r7, #30]
 8000894:	2101      	movs	r1, #1
 8000896:	4618      	mov	r0, r3
 8000898:	f001 ffae 	bl	80027f8 <VL53L0X_SetVcselPulsePeriod>
 800089c:	4603      	mov	r3, r0
 800089e:	61bb      	str	r3, [r7, #24]
			if( status ){
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <SetupSingleShot+0x264>
			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
 80008a6:	4821      	ldr	r0, [pc, #132]	; (800092c <SetupSingleShot+0x2e4>)
 80008a8:	f000 fec8 	bl	800163c <uart_printf>
			}

			status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 80008ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80008b2:	fb02 f303 	mul.w	r3, r2, r3
 80008b6:	4a13      	ldr	r2, [pc, #76]	; (8000904 <SetupSingleShot+0x2bc>)
 80008b8:	4413      	add	r3, r2
 80008ba:	f107 0216 	add.w	r2, r7, #22
 80008be:	f107 0117 	add.w	r1, r7, #23
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 fdee 	bl	80034a4 <VL53L0X_PerformRefCalibration>
 80008c8:	4603      	mov	r3, r0
 80008ca:	61bb      	str	r3, [r7, #24]
			if( status ){
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d002      	beq.n	80008d8 <SetupSingleShot+0x290>
			   debug_printf("VL53L0X_PerformRefCalibration failed\n");
 80008d2:	480e      	ldr	r0, [pc, #56]	; (800090c <SetupSingleShot+0x2c4>)
 80008d4:	f000 feb2 	bl	800163c <uart_printf>
			}

            VL53L0XDevs[i].LeakyFirst=1;
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <SetupSingleShot+0x2bc>)
 80008da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008dc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80008e0:	fb01 f303 	mul.w	r3, r1, r3
 80008e4:	4413      	add	r3, r2
 80008e6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
    for( i=0; i<3; i++){
 80008ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f0:	3301      	adds	r3, #1
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	f77f aebb 	ble.w	8000672 <SetupSingleShot+0x2a>
        }
    }
}
 80008fc:	bf00      	nop
 80008fe:	3730      	adds	r7, #48	; 0x30
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000018 	.word	0x20000018
 8000908:	0800b920 	.word	0x0800b920
 800090c:	0800b940 	.word	0x0800b940
 8000910:	0800b968 	.word	0x0800b968
 8000914:	0800b994 	.word	0x0800b994
 8000918:	0800b9b4 	.word	0x0800b9b4
 800091c:	00030d40 	.word	0x00030d40
 8000920:	0800b9d8 	.word	0x0800b9d8
 8000924:	0800b9e8 	.word	0x0800b9e8
 8000928:	0800ba0c 	.word	0x0800ba0c
 800092c:	0800ba44 	.word	0x0800ba44

08000930 <RangeToLetter>:

char RangeToLetter(VL53L0X_Dev_t *pDev, VL53L0X_RangingMeasurementData_t *pRange){
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
    char c;
    if( pRange->RangeStatus == 0 ){
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	7e1b      	ldrb	r3, [r3, #24]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d116      	bne.n	8000970 <RangeToLetter+0x40>
        if( pDev->LeakyRange < RangeLow ){
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <RangeToLetter+0x54>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	429a      	cmp	r2, r3
 800094e:	da02      	bge.n	8000956 <RangeToLetter+0x26>
            c='_';
 8000950:	235f      	movs	r3, #95	; 0x5f
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	e00e      	b.n	8000974 <RangeToLetter+0x44>
        }
        else if( pDev->LeakyRange < RangeMedium ){
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <RangeToLetter+0x58>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	429a      	cmp	r2, r3
 8000962:	da02      	bge.n	800096a <RangeToLetter+0x3a>
                c='=';
 8000964:	233d      	movs	r3, #61	; 0x3d
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	e004      	b.n	8000974 <RangeToLetter+0x44>
        }
        else {
            c = '~';
 800096a:	237e      	movs	r3, #126	; 0x7e
 800096c:	73fb      	strb	r3, [r7, #15]
 800096e:	e001      	b.n	8000974 <RangeToLetter+0x44>
        }

    }
    else{
        c='-';
 8000970:	232d      	movs	r3, #45	; 0x2d
 8000972:	73fb      	strb	r3, [r7, #15]
    }
    return c;
 8000974:	7bfb      	ldrb	r3, [r7, #15]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	200004c8 	.word	0x200004c8
 8000988:	200004cc 	.word	0x200004cc

0800098c <Sensor_SetNewRange>:

/* Store new ranging data into the device structure, apply leaky integrator if needed */
void Sensor_SetNewRange(VL53L0X_Dev_t *pDev, VL53L0X_RangingMeasurementData_t *pRange){
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
    if( pRange->RangeStatus == 0 ){
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	7e1b      	ldrb	r3, [r3, #24]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d124      	bne.n	80009e8 <Sensor_SetNewRange+0x5c>
        if( pDev->LeakyFirst ){
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d00a      	beq.n	80009be <Sensor_SetNewRange+0x32>
            pDev->LeakyFirst = 0;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
            pDev->LeakyRange = pRange->RangeMilliMeter;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	891b      	ldrh	r3, [r3, #8]
 80009b4:	461a      	mov	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        }
    }
    else{
        pDev->LeakyFirst = 1;
    }
}
 80009bc:	e018      	b.n	80009f0 <Sensor_SetNewRange+0x64>
            pDev->LeakyRange = (pDev->LeakyRange*LeakyFactorFix8 + (256-LeakyFactorFix8)*pRange->RangeMilliMeter)>>8;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <Sensor_SetNewRange+0x70>)
 80009c6:	6812      	ldr	r2, [r2, #0]
 80009c8:	fb02 f203 	mul.w	r2, r2, r3
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <Sensor_SetNewRange+0x70>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80009d4:	6839      	ldr	r1, [r7, #0]
 80009d6:	8909      	ldrh	r1, [r1, #8]
 80009d8:	fb01 f303 	mul.w	r3, r1, r3
 80009dc:	4413      	add	r3, r2
 80009de:	121a      	asrs	r2, r3, #8
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
}
 80009e6:	e003      	b.n	80009f0 <Sensor_SetNewRange+0x64>
        pDev->LeakyFirst = 1;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2201      	movs	r2, #1
 80009ec:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	20000014 	.word	0x20000014

08000a00 <RangeDemo>:
 * Implement the ranging demo with all modes managed through the blue button (short and long press)
 * This function implements a while loop until the blue button is pressed
 * @param UseSensorsMask Mask of any sensors to use if not only one present
 * @param rangingConfig Ranging configuration to be used (same for all sensors)
 */
int RangeDemo(int UseSensorsMask, RangingConfig_e rangingConfig){
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b08d      	sub	sp, #52	; 0x34
 8000a04:	af02      	add	r7, sp, #8
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	70fb      	strb	r3, [r7, #3]
    int over=0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
    int status;
    char StrDisplay[5];
    char c;
    int i;
    int nSensorToUse;
    int SingleSensorNo=0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]

    /* Setup all sensors in Single Shot mode */
    SetupSingleShot(rangingConfig);
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fe16 	bl	8000648 <SetupSingleShot>

    /* Which sensor to use ? */
    for(i=0, nSensorToUse=0; i<3; i++){
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
 8000a24:	e01e      	b.n	8000a64 <RangeDemo+0x64>
        if(( UseSensorsMask& (1<<i) ) && VL53L0XDevs[i].Present ){
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2a:	fa42 f303 	asr.w	r3, r2, r3
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d013      	beq.n	8000a5e <RangeDemo+0x5e>
 8000a36:	4a8f      	ldr	r2, [pc, #572]	; (8000c74 <RangeDemo+0x274>)
 8000a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a3e:	fb01 f303 	mul.w	r3, r1, r3
 8000a42:	4413      	add	r3, r2
 8000a44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d007      	beq.n	8000a5e <RangeDemo+0x5e>
            nSensorToUse++;
 8000a4e:	6a3b      	ldr	r3, [r7, #32]
 8000a50:	3301      	adds	r3, #1
 8000a52:	623b      	str	r3, [r7, #32]
            if( nSensorToUse==1 )
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d101      	bne.n	8000a5e <RangeDemo+0x5e>
                SingleSensorNo=i;
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5c:	61fb      	str	r3, [r7, #28]
    for(i=0, nSensorToUse=0; i<3; i++){
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a60:	3301      	adds	r3, #1
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
 8000a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	dddd      	ble.n	8000a26 <RangeDemo+0x26>
        }
    }
    if( nSensorToUse == 0 ){
 8000a6a:	6a3b      	ldr	r3, [r7, #32]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <RangeDemo+0x76>
        return -1;
 8000a70:	f04f 33ff 	mov.w	r3, #4294967295
 8000a74:	e0f9      	b.n	8000c6a <RangeDemo+0x26a>
    }

    /* Start ranging until blue button is pressed */
    do{
        if( nSensorToUse >1 ){
 8000a76:	6a3b      	ldr	r3, [r7, #32]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	dd77      	ble.n	8000b6c <RangeDemo+0x16c>
        	/* Multiple devices */
            strcpy(StrDisplay, "    ");
 8000a7c:	4a7e      	ldr	r2, [pc, #504]	; (8000c78 <RangeDemo+0x278>)
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a86:	6018      	str	r0, [r3, #0]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	7019      	strb	r1, [r3, #0]
            for( i=0; i<3; i++){
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a90:	e068      	b.n	8000b64 <RangeDemo+0x164>
                if( ! VL53L0XDevs[i].Present  || (UseSensorsMask & (1<<i))==0 )
 8000a92:	4a78      	ldr	r2, [pc, #480]	; (8000c74 <RangeDemo+0x274>)
 8000a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a96:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a9a:	fb01 f303 	mul.w	r3, r1, r3
 8000a9e:	4413      	add	r3, r2
 8000aa0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d058      	beq.n	8000b5c <RangeDemo+0x15c>
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	fa42 f303 	asr.w	r3, r2, r3
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d050      	beq.n	8000b5c <RangeDemo+0x15c>
                    continue;
                /* Call All-In-One blocking API function */
                status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[i],&RangingMeasurementData);
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000ac0:	fb02 f303 	mul.w	r3, r2, r3
 8000ac4:	4a6b      	ldr	r2, [pc, #428]	; (8000c74 <RangeDemo+0x274>)
 8000ac6:	4413      	add	r3, r2
 8000ac8:	496c      	ldr	r1, [pc, #432]	; (8000c7c <RangeDemo+0x27c>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	f003 f838 	bl	8003b40 <VL53L0X_PerformSingleRangingMeasurement>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	617b      	str	r3, [r7, #20]
                if( status ){
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <RangeDemo+0xe0>
                    HandleError(ERR_DEMO_RANGE_MULTI);
 8000ada:	2002      	movs	r0, #2
 8000adc:	f7ff fc8a 	bl	80003f4 <HandleError>
                }
                /* Push data logging to UART */
                trace_printf("%d,%u,%d,%d,%d\n", VL53L0XDevs[i].Id, TimeStamp_Get(), RangingMeasurementData.RangeStatus, RangingMeasurementData.RangeMilliMeter, RangingMeasurementData.SignalRateRtnMegaCps);
 8000ae0:	4a64      	ldr	r2, [pc, #400]	; (8000c74 <RangeDemo+0x274>)
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000ae8:	fb01 f303 	mul.w	r3, r1, r3
 8000aec:	4413      	add	r3, r2
 8000aee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8000af2:	681c      	ldr	r4, [r3, #0]
 8000af4:	f7ff fc38 	bl	8000368 <TimeStamp_Get>
 8000af8:	4601      	mov	r1, r0
 8000afa:	4b60      	ldr	r3, [pc, #384]	; (8000c7c <RangeDemo+0x27c>)
 8000afc:	7e1b      	ldrb	r3, [r3, #24]
 8000afe:	4618      	mov	r0, r3
 8000b00:	4b5e      	ldr	r3, [pc, #376]	; (8000c7c <RangeDemo+0x27c>)
 8000b02:	891b      	ldrh	r3, [r3, #8]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b5d      	ldr	r3, [pc, #372]	; (8000c7c <RangeDemo+0x27c>)
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	9200      	str	r2, [sp, #0]
 8000b0e:	4603      	mov	r3, r0
 8000b10:	460a      	mov	r2, r1
 8000b12:	4621      	mov	r1, r4
 8000b14:	485a      	ldr	r0, [pc, #360]	; (8000c80 <RangeDemo+0x280>)
 8000b16:	f000 fd91 	bl	800163c <uart_printf>
                /* Store new ranging distance */
                Sensor_SetNewRange(&VL53L0XDevs[i],&RangingMeasurementData);
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b20:	fb02 f303 	mul.w	r3, r2, r3
 8000b24:	4a53      	ldr	r2, [pc, #332]	; (8000c74 <RangeDemo+0x274>)
 8000b26:	4413      	add	r3, r2
 8000b28:	4954      	ldr	r1, [pc, #336]	; (8000c7c <RangeDemo+0x27c>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff ff2e 	bl	800098c <Sensor_SetNewRange>
                /* Translate distance in bar graph (multiple device) */
                c = RangeToLetter(&VL53L0XDevs[i],&RangingMeasurementData);
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b36:	fb02 f303 	mul.w	r3, r2, r3
 8000b3a:	4a4e      	ldr	r2, [pc, #312]	; (8000c74 <RangeDemo+0x274>)
 8000b3c:	4413      	add	r3, r2
 8000b3e:	494f      	ldr	r1, [pc, #316]	; (8000c7c <RangeDemo+0x27c>)
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fef5 	bl	8000930 <RangeToLetter>
 8000b46:	4603      	mov	r3, r0
 8000b48:	74fb      	strb	r3, [r7, #19]
                StrDisplay[i+1]=c;
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b52:	4413      	add	r3, r2
 8000b54:	7cfa      	ldrb	r2, [r7, #19]
 8000b56:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8000b5a:	e000      	b.n	8000b5e <RangeDemo+0x15e>
                    continue;
 8000b5c:	bf00      	nop
            for( i=0; i<3; i++){
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	3301      	adds	r3, #1
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	dd93      	ble.n	8000a92 <RangeDemo+0x92>
 8000b6a:	e069      	b.n	8000c40 <RangeDemo+0x240>
            }
        }
        else{
            /* only one sensor */
        	/* Call All-In-One blocking API function */
            status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[SingleSensorNo],&RangingMeasurementData);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b72:	fb02 f303 	mul.w	r3, r2, r3
 8000b76:	4a3f      	ldr	r2, [pc, #252]	; (8000c74 <RangeDemo+0x274>)
 8000b78:	4413      	add	r3, r2
 8000b7a:	4940      	ldr	r1, [pc, #256]	; (8000c7c <RangeDemo+0x27c>)
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 ffdf 	bl	8003b40 <VL53L0X_PerformSingleRangingMeasurement>
 8000b82:	4603      	mov	r3, r0
 8000b84:	617b      	str	r3, [r7, #20]
            if( status ==0 ){
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d156      	bne.n	8000c3a <RangeDemo+0x23a>
            	/* Push data logging to UART */
            	trace_printf("%d,%u,%d,%d,%d\n", VL53L0XDevs[SingleSensorNo].Id, TimeStamp_Get(), RangingMeasurementData.RangeStatus, RangingMeasurementData.RangeMilliMeter, RangingMeasurementData.SignalRateRtnMegaCps);
 8000b8c:	4a39      	ldr	r2, [pc, #228]	; (8000c74 <RangeDemo+0x274>)
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000b94:	fb01 f303 	mul.w	r3, r1, r3
 8000b98:	4413      	add	r3, r2
 8000b9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8000b9e:	681c      	ldr	r4, [r3, #0]
 8000ba0:	f7ff fbe2 	bl	8000368 <TimeStamp_Get>
 8000ba4:	4601      	mov	r1, r0
 8000ba6:	4b35      	ldr	r3, [pc, #212]	; (8000c7c <RangeDemo+0x27c>)
 8000ba8:	7e1b      	ldrb	r3, [r3, #24]
 8000baa:	4618      	mov	r0, r3
 8000bac:	4b33      	ldr	r3, [pc, #204]	; (8000c7c <RangeDemo+0x27c>)
 8000bae:	891b      	ldrh	r3, [r3, #8]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b32      	ldr	r3, [pc, #200]	; (8000c7c <RangeDemo+0x27c>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	9200      	str	r2, [sp, #0]
 8000bba:	4603      	mov	r3, r0
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	4621      	mov	r1, r4
 8000bc0:	482f      	ldr	r0, [pc, #188]	; (8000c80 <RangeDemo+0x280>)
 8000bc2:	f000 fd3b 	bl	800163c <uart_printf>
            	Sensor_SetNewRange(&VL53L0XDevs[SingleSensorNo],&RangingMeasurementData);
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000bcc:	fb02 f303 	mul.w	r3, r2, r3
 8000bd0:	4a28      	ldr	r2, [pc, #160]	; (8000c74 <RangeDemo+0x274>)
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4929      	ldr	r1, [pc, #164]	; (8000c7c <RangeDemo+0x27c>)
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fed8 	bl	800098c <Sensor_SetNewRange>
                /* Display distance in cm */
            	if( RangingMeasurementData.RangeStatus == 0 ){
 8000bdc:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <RangeDemo+0x27c>)
 8000bde:	7e1b      	ldrb	r3, [r3, #24]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d116      	bne.n	8000c12 <RangeDemo+0x212>
                    sprintf(StrDisplay, "%3dc",(int)VL53L0XDevs[SingleSensorNo].LeakyRange/10);
 8000be4:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <RangeDemo+0x274>)
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000bec:	fb01 f303 	mul.w	r3, r1, r3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a22      	ldr	r2, [pc, #136]	; (8000c84 <RangeDemo+0x284>)
 8000bfa:	fb82 1203 	smull	r1, r2, r2, r3
 8000bfe:	1092      	asrs	r2, r2, #2
 8000c00:	17db      	asrs	r3, r3, #31
 8000c02:	1ad2      	subs	r2, r2, r3
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	491f      	ldr	r1, [pc, #124]	; (8000c88 <RangeDemo+0x288>)
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f00a f9be 	bl	800af8c <siprintf>
 8000c10:	e016      	b.n	8000c40 <RangeDemo+0x240>
                }
                else{
                    sprintf(StrDisplay, "----");
 8000c12:	4a1e      	ldr	r2, [pc, #120]	; (8000c8c <RangeDemo+0x28c>)
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c1c:	6018      	str	r0, [r3, #0]
 8000c1e:	3304      	adds	r3, #4
 8000c20:	7019      	strb	r1, [r3, #0]
                    StrDisplay[0]=VL53L0XDevs[SingleSensorNo].DevLetter;
 8000c22:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <RangeDemo+0x274>)
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000c2a:	fb01 f303 	mul.w	r3, r1, r3
 8000c2e:	4413      	add	r3, r2
 8000c30:	f203 1361 	addw	r3, r3, #353	; 0x161
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	733b      	strb	r3, [r7, #12]
 8000c38:	e002      	b.n	8000c40 <RangeDemo+0x240>
                }
            }
            else{
                HandleError(ERR_DEMO_RANGE_ONE);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff fbda 	bl	80003f4 <HandleError>
            }
        }
        XNUCLEO53L0A1_SetDisplayString(StrDisplay);
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 fc47 	bl	80014d8 <XNUCLEO53L0A1_SetDisplayString>
        /* Check blue button */
        if( !BSP_GetPushButton() ){
 8000c4a:	f7ff fb99 	bl	8000380 <BSP_GetPushButton>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <RangeDemo+0x25a>
            over=1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61bb      	str	r3, [r7, #24]
            break;
 8000c58:	e003      	b.n	8000c62 <RangeDemo+0x262>
        }
    }while( !over);
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f43f af0a 	beq.w	8000a76 <RangeDemo+0x76>
    /* Wait button to be un-pressed to decide if it is a short or long press */
    status=PusbButton_WaitUnPress();
 8000c62:	f7ff fb9f 	bl	80003a4 <PusbButton_WaitUnPress>
 8000c66:	6178      	str	r0, [r7, #20]
    return status;
 8000c68:	697b      	ldr	r3, [r7, #20]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	372c      	adds	r7, #44	; 0x2c
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd90      	pop	{r4, r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000018 	.word	0x20000018
 8000c78:	0800b918 	.word	0x0800b918
 8000c7c:	200009b4 	.word	0x200009b4
 8000c80:	0800ba68 	.word	0x0800ba68
 8000c84:	66666667 	.word	0x66666667
 8000c88:	0800ba78 	.word	0x0800ba78
 8000c8c:	0800ba80 	.word	0x0800ba80

08000c90 <ResetAndDetectSensor>:
    XNUCLEO53L0A1_SetIntrStateId(0, XNUCLEO53L0A1_DEV_CENTER);
    VL53L0A1_EXTI_IOUnconfigure(XNUCLEO53L0A1_DEV_CENTER);
}
#endif

void ResetAndDetectSensor(int SetDisplay){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
    int nSensor;
    nSensor = DetectSensors(SetDisplay);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff fbbf 	bl	800041c <DetectSensors>
 8000c9e:	60f8      	str	r0, [r7, #12]
    /* at least one sensor and if one it must be the built-in one  */
    if( (nSensor <=0) ||  (nSensor ==1 && VL53L0XDevs[1].Present==0) ){
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	dd07      	ble.n	8000cb6 <ResetAndDetectSensor+0x26>
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d108      	bne.n	8000cbe <ResetAndDetectSensor+0x2e>
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <ResetAndDetectSensor+0x38>)
 8000cae:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d103      	bne.n	8000cbe <ResetAndDetectSensor+0x2e>
        HandleError(ERR_DETECT);
 8000cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cba:	f7ff fb9b 	bl	80003f4 <HandleError>
    }
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000018 	.word	0x20000018

08000ccc <main>:

/* USER CODE END 0 */

int main(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  int ExitWithLongPress;
  RangingConfig_e RangingConfig = LONG_RANGE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]
  DemoMode_e DemoMode = RANGE_VALUE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73bb      	strb	r3, [r7, #14]
  int UseSensorsMask = 1<<XNUCLEO53L0A1_DEV_CENTER;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cde:	f006 fe67 	bl	80079b0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000ce2:	f000 f867 	bl	8000db4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce6:	f000 f8b7 	bl	8000e58 <MX_GPIO_Init>

  /* Initialize timestamping for UART logging */
  TimeStamp_Init();
 8000cea:	f7ff fb29 	bl	8000340 <TimeStamp_Init>

  /* USER CODE BEGIN 2 */
  XNUCLEO53L0A1_Init();
 8000cee:	f000 fa65 	bl	80011bc <XNUCLEO53L0A1_Init>
  uart_printf(WelcomeMsg);
 8000cf2:	482b      	ldr	r0, [pc, #172]	; (8000da0 <main+0xd4>)
 8000cf4:	f000 fca2 	bl	800163c <uart_printf>
  XNUCLEO53L0A1_SetDisplayString("53L0");
 8000cf8:	482a      	ldr	r0, [pc, #168]	; (8000da4 <main+0xd8>)
 8000cfa:	f000 fbed 	bl	80014d8 <XNUCLEO53L0A1_SetDisplayString>
  HAL_Delay(WelcomeTime);
 8000cfe:	f44f 7025 	mov.w	r0, #660	; 0x294
 8000d02:	f006 fead 	bl	8007a60 <HAL_Delay>
  ResetAndDetectSensor(1);
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff ffc2 	bl	8000c90 <ResetAndDetectSensor>

  /* Set VL53L0X API trace level */
  VL53L0X_trace_config(NULL, TRACE_MODULE_NONE, TRACE_LEVEL_NONE, TRACE_FUNCTION_NONE); // No Trace
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2000      	movs	r0, #0
 8000d14:	f006 fdca 	bl	80078ac <VL53L0X_trace_config>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */
      /* Display demo mode */
      XNUCLEO53L0A1_SetDisplayString(DemoModeTxt[DemoMode]);
 8000d18:	7bbb      	ldrb	r3, [r7, #14]
 8000d1a:	4a23      	ldr	r2, [pc, #140]	; (8000da8 <main+0xdc>)
 8000d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 fbd9 	bl	80014d8 <XNUCLEO53L0A1_SetDisplayString>
      HAL_Delay(ModeChangeDispTime);
 8000d26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d2a:	f006 fe99 	bl	8007a60 <HAL_Delay>

      /* Display Ranging config */
	  XNUCLEO53L0A1_SetDisplayString(RangingConfigTxt[RangingConfig]);
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	4a1e      	ldr	r2, [pc, #120]	; (8000dac <main+0xe0>)
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fbce 	bl	80014d8 <XNUCLEO53L0A1_SetDisplayString>
	  HAL_Delay(ModeChangeDispTime);
 8000d3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d40:	f006 fe8e 	bl	8007a60 <HAL_Delay>

	  /* Reset and Detect all sensors */
      ResetAndDetectSensor(0);
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff ffa3 	bl	8000c90 <ResetAndDetectSensor>

      /* Reset Timestamping */
      TimeStamp_Reset();
 8000d4a:	f7ff faff 	bl	800034c <TimeStamp_Reset>
      ResetAndDetectSensor(0);
      AlarmDemo();
#else

      /* Start Ranging demo */
      ExitWithLongPress = RangeDemo(UseSensorsMask, RangingConfig);
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	4619      	mov	r1, r3
 8000d52:	68b8      	ldr	r0, [r7, #8]
 8000d54:	f7ff fe54 	bl	8000a00 <RangeDemo>
 8000d58:	6078      	str	r0, [r7, #4]

      /* Blue button has been pressed (long or short press) */
      if(ExitWithLongPress){
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d012      	beq.n	8000d86 <main+0xba>
    	  /* Long press : change demo mode if multiple sensors present*/
    	  if( nDevPresent >1 ){
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <main+0xe4>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	ddd7      	ble.n	8000d18 <main+0x4c>
    		  /* If more than one sensor is present then toggle demo mode */
    		  DemoMode = (DemoMode == RANGE_VALUE) ? BAR_GRAPH : RANGE_VALUE;
 8000d68:	7bbb      	ldrb	r3, [r7, #14]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	bf0c      	ite	eq
 8000d6e:	2301      	moveq	r3, #1
 8000d70:	2300      	movne	r3, #0
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	73bb      	strb	r3, [r7, #14]
    		  UseSensorsMask = (DemoMode == BAR_GRAPH) ? 0x7 : 1<<XNUCLEO53L0A1_DEV_CENTER;
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d101      	bne.n	8000d80 <main+0xb4>
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	e000      	b.n	8000d82 <main+0xb6>
 8000d80:	2302      	movs	r3, #2
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	e7c8      	b.n	8000d18 <main+0x4c>
    	  }
      } else {
    	  /* Short press : change ranging config */
    	  RangingConfig = (RangingConfig == LONG_RANGE) ? HIGH_SPEED : ((RangingConfig == HIGH_SPEED) ? HIGH_ACCURACY : LONG_RANGE);
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d006      	beq.n	8000d9a <main+0xce>
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d101      	bne.n	8000d96 <main+0xca>
 8000d92:	2302      	movs	r3, #2
 8000d94:	e002      	b.n	8000d9c <main+0xd0>
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <main+0xd0>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
      XNUCLEO53L0A1_SetDisplayString(DemoModeTxt[DemoMode]);
 8000d9e:	e7bb      	b.n	8000d18 <main+0x4c>
 8000da0:	200004d0 	.word	0x200004d0
 8000da4:	0800ba88 	.word	0x0800ba88
 8000da8:	2000000c 	.word	0x2000000c
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000850 	.word	0x20000850

08000db4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
#ifdef STM32F401xE
void SystemClock_Config(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b094      	sub	sp, #80	; 0x50
 8000db8:	af00      	add	r7, sp, #0

    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    RCC_OscInitTypeDef RCC_OscInitStruct;

    __PWR_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <SystemClock_Config+0x9c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a23      	ldr	r2, [pc, #140]	; (8000e50 <SystemClock_Config+0x9c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <SystemClock_Config+0x9c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <SystemClock_Config+0xa0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000de2:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <SystemClock_Config+0xa0>)
 8000de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <SystemClock_Config+0xa0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df6:	2302      	movs	r3, #2
 8000df8:	60fb      	str	r3, [r7, #12]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSICalibrationValue = 6;
 8000dfe:	2306      	movs	r3, #6
 8000e00:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e02:	2302      	movs	r3, #2
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLM = 16;
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000e0e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e14:	2304      	movs	r3, #4
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e18:	2307      	movs	r3, #7
 8000e1a:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4618      	mov	r0, r3
 8000e22:	f008 fbe1 	bl	80095e8 <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000e26:	2305      	movs	r3, #5
 8000e28:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e36:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8000e3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e40:	2102      	movs	r1, #2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f008 fde4 	bl	8009a10 <HAL_RCC_ClockConfig>

}
 8000e48:	bf00      	nop
 8000e4a:	3750      	adds	r7, #80	; 0x50
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40007000 	.word	0x40007000

08000e58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a29      	ldr	r2, [pc, #164]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
  __GPIOH_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a22      	ldr	r2, [pc, #136]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  __GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __GPIOB_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_GPIO_Init+0xb4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_GPIO_Init+0xb8>)
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480c      	ldr	r0, [pc, #48]	; (8000f14 <MX_GPIO_Init+0xbc>)
 8000ee4:	f007 fa96 	bl	8008414 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ee8:	2320      	movs	r3, #32
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	; (8000f18 <MX_GPIO_Init+0xc0>)
 8000f00:	f007 fa88 	bl	8008414 <HAL_GPIO_Init>

}
 8000f04:	bf00      	nop
 8000f06:	3728      	adds	r7, #40	; 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	10120000 	.word	0x10120000
 8000f14:	40020800 	.word	0x40020800
 8000f18:	40020000 	.word	0x40020000

08000f1c <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f20:	2007      	movs	r0, #7
 8000f22:	f006 fe7f 	bl	8007c24 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2e:	f006 fe84 	bl	8007c3a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  if(htim_oc->Instance==TIM2)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f48:	d10e      	bne.n	8000f68 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __TIM2_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <HAL_TIM_OC_MspInit+0x64>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_TIM_OC_MspInit+0x64>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_TIM_OC_MspInit+0x64>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f66:	e012      	b.n	8000f8e <HAL_TIM_OC_MspInit+0x56>
  else if(htim_oc->Instance==TIM5)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <HAL_TIM_OC_MspInit+0x68>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d10d      	bne.n	8000f8e <HAL_TIM_OC_MspInit+0x56>
    __TIM5_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_TIM_OC_MspInit+0x64>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <HAL_TIM_OC_MspInit+0x64>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_TIM_OC_MspInit+0x64>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40000c00 	.word	0x40000c00

08000fa4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f006 fd40 	bl	8007a2c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000fac:	f006 fe7b 	bl	8007ca6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_I2cFailRecover>:
 *
 * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
 * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
 * this routine does use gpio to manipulate and recover i2c bus line in all cases.
 */
static void _I2cFailRecover(){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    int i, nRetry=0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
    // We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
    // by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
    // all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state

    // Enable I/O
    __GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b4a      	ldr	r3, [pc, #296]	; (80010ec <_I2cFailRecover+0x138>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a49      	ldr	r2, [pc, #292]	; (80010ec <_I2cFailRecover+0x138>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b47      	ldr	r3, [pc, #284]	; (80010ec <_I2cFailRecover+0x138>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe0:	4843      	ldr	r0, [pc, #268]	; (80010f0 <_I2cFailRecover+0x13c>)
 8000fe2:	f007 fbb1 	bl	8008748 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fec:	4840      	ldr	r0, [pc, #256]	; (80010f0 <_I2cFailRecover+0x13c>)
 8000fee:	f007 fbab 	bl	8008748 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9 ;
 8000ff2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ff6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ff8:	2311      	movs	r3, #17
 8000ffa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4619      	mov	r1, r3
 8001006:	483a      	ldr	r0, [pc, #232]	; (80010f0 <_I2cFailRecover+0x13c>)
 8001008:	f007 fa04 	bl	8008414 <HAL_GPIO_Init>
    //TODO we could do this faster by not using HAL delay 1ms for clk timing
    do{
        for( i=0; i<10; i++){
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
 8001010:	e014      	b.n	800103c <_I2cFailRecover+0x88>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001018:	4835      	ldr	r0, [pc, #212]	; (80010f0 <_I2cFailRecover+0x13c>)
 800101a:	f007 fb95 	bl	8008748 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f006 fd1e 	bl	8007a60 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102a:	4831      	ldr	r0, [pc, #196]	; (80010f0 <_I2cFailRecover+0x13c>)
 800102c:	f007 fb8c 	bl	8008748 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001030:	2001      	movs	r0, #1
 8001032:	f006 fd15 	bl	8007a60 <HAL_Delay>
        for( i=0; i<10; i++){
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	3301      	adds	r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	2b09      	cmp	r3, #9
 8001040:	dde7      	ble.n	8001012 <_I2cFailRecover+0x5e>
        }
//        if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
//            static int RetryRecover;
//            RetryRecover++;
//        }
    }while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++<7);
 8001042:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001046:	482a      	ldr	r0, [pc, #168]	; (80010f0 <_I2cFailRecover+0x13c>)
 8001048:	f007 fb66 	bl	8008718 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d104      	bne.n	800105c <_I2cFailRecover+0xa8>
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	623a      	str	r2, [r7, #32]
 8001058:	2b06      	cmp	r3, #6
 800105a:	ddd7      	ble.n	800100c <_I2cFailRecover+0x58>

    if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
 800105c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001060:	4823      	ldr	r0, [pc, #140]	; (80010f0 <_I2cFailRecover+0x13c>)
 8001062:	f007 fb59 	bl	8008718 <HAL_GPIO_ReadPin>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d13b      	bne.n	80010e4 <_I2cFailRecover+0x130>
        __GPIOA_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <_I2cFailRecover+0x138>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <_I2cFailRecover+0x138>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6313      	str	r3, [r2, #48]	; 0x30
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <_I2cFailRecover+0x138>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
        //We are still in bad i2c state warm user by blinking led but stay here
        GPIO_InitStruct.Pin = GPIO_PIN_5 ;
 8001088:	2320      	movs	r3, #32
 800108a:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4619      	mov	r1, r3
 800109a:	4816      	ldr	r0, [pc, #88]	; (80010f4 <_I2cFailRecover+0x140>)
 800109c:	f007 f9ba 	bl	8008414 <HAL_GPIO_Init>
        do{
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2120      	movs	r1, #32
 80010a4:	4813      	ldr	r0, [pc, #76]	; (80010f4 <_I2cFailRecover+0x140>)
 80010a6:	f007 fb4f 	bl	8008748 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 80010aa:	2021      	movs	r0, #33	; 0x21
 80010ac:	f006 fcd8 	bl	8007a60 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2120      	movs	r1, #32
 80010b4:	480f      	ldr	r0, [pc, #60]	; (80010f4 <_I2cFailRecover+0x140>)
 80010b6:	f007 fb47 	bl	8008748 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 80010ba:	2021      	movs	r0, #33	; 0x21
 80010bc:	f006 fcd0 	bl	8007a60 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2120      	movs	r1, #32
 80010c4:	480b      	ldr	r0, [pc, #44]	; (80010f4 <_I2cFailRecover+0x140>)
 80010c6:	f007 fb3f 	bl	8008748 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 80010ca:	2021      	movs	r0, #33	; 0x21
 80010cc:	f006 fcc8 	bl	8007a60 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2120      	movs	r1, #32
 80010d4:	4807      	ldr	r0, [pc, #28]	; (80010f4 <_I2cFailRecover+0x140>)
 80010d6:	f007 fb37 	bl	8008748 <HAL_GPIO_WritePin>
            HAL_Delay(33*20);
 80010da:	f44f 7025 	mov.w	r0, #660	; 0x294
 80010de:	f006 fcbf 	bl	8007a60 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010e2:	e7dd      	b.n	80010a0 <_I2cFailRecover+0xec>
        }while(1);
    }
}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020400 	.word	0x40020400
 80010f4:	40020000 	.word	0x40020000

080010f8 <XNUCLEO53L0A1_I2C1Configure>:



int XNUCLEO53L0A1_I2C1Configure() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
    int status;
    GPIO_InitTypeDef GPIO_InitStruct;

    _I2cFailRecover();
 80010fe:	f7ff ff59 	bl	8000fb4 <_I2cFailRecover>

    /* Peripheral clock enable */
    __GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a27      	ldr	r2, [pc, #156]	; (80011a8 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
    __I2C1_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8001128:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]

    /**I2C1 GPIO Configuration\n
     PB8     ------> I2C1_SCL\n
     PB9     ------> I2C1_SDA
     */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800113a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001140:	2312      	movs	r3, #18
 8001142:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800114c:	2304      	movs	r3, #4
 800114e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	4619      	mov	r1, r3
 8001156:	4815      	ldr	r0, [pc, #84]	; (80011ac <XNUCLEO53L0A1_I2C1Configure+0xb4>)
 8001158:	f007 f95c 	bl	8008414 <HAL_GPIO_Init>

    XNUCLEO53L0A1_hi2c.Instance = I2C1;
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 800115e:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <XNUCLEO53L0A1_I2C1Configure+0xbc>)
 8001160:	601a      	str	r2, [r3, #0]
#ifdef __STM32F4xx_HAL_H
    XNUCLEO53L0A1_hi2c.Init.ClockSpeed = 400000;
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <XNUCLEO53L0A1_I2C1Configure+0xc0>)
 8001166:	605a      	str	r2, [r3, #4]
    XNUCLEO53L0A1_hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
#else
    /* STM32L4xx and L053 */
    XNUCLEO53L0A1_hi2c.Init.Timing = 0x00300F38; /* set 400KHz fast mode i2c*/
#endif
    XNUCLEO53L0A1_hi2c.Init.OwnAddress1 = 0;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
    XNUCLEO53L0A1_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8001176:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117a:	611a      	str	r2, [r3, #16]
    XNUCLEO53L0A1_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
    XNUCLEO53L0A1_hi2c.Init.OwnAddress2 = 0;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
    XNUCLEO53L0A1_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
    XNUCLEO53L0A1_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
    status = HAL_I2C_Init(&XNUCLEO53L0A1_hi2c);
 8001194:	4806      	ldr	r0, [pc, #24]	; (80011b0 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8001196:	f007 fb09 	bl	80087ac <HAL_I2C_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	61fb      	str	r3, [r7, #28]
    return status;
 800119e:	69fb      	ldr	r3, [r7, #28]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020400 	.word	0x40020400
 80011b0:	200009d0 	.word	0x200009d0
 80011b4:	40005400 	.word	0x40005400
 80011b8:	00061a80 	.word	0x00061a80

080011bc <XNUCLEO53L0A1_Init>:
done:
    return status;
}


int XNUCLEO53L0A1_Init(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
    int status;
    uint8_t ExpanderData[2];
    XNUCLEO53L0A1_USART2_UART_Init();
 80011c2:	f000 fa8d 	bl	80016e0 <XNUCLEO53L0A1_USART2_UART_Init>
    XNUCLEO53L0A1_I2C1Configure();
 80011c6:	f7ff ff97 	bl	80010f8 <XNUCLEO53L0A1_I2C1Configure>

    status = _ExpanderRd( I2cExpAddr0, 0, ExpanderData, 2);
 80011ca:	463a      	mov	r2, r7
 80011cc:	2302      	movs	r3, #2
 80011ce:	2100      	movs	r1, #0
 80011d0:	2086      	movs	r0, #134	; 0x86
 80011d2:	f000 f925 	bl	8001420 <_ExpanderRd>
 80011d6:	6078      	str	r0, [r7, #4]
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d105      	bne.n	80011ea <XNUCLEO53L0A1_Init+0x2e>
 80011de:	783b      	ldrb	r3, [r7, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <XNUCLEO53L0A1_Init+0x2e>
 80011e4:	787b      	ldrb	r3, [r7, #1]
 80011e6:	2b16      	cmp	r3, #22
 80011e8:	d007      	beq.n	80011fa <XNUCLEO53L0A1_Init+0x3e>
        XNUCLEO53L0A1_ErrLog("I2C Expander @0x%02X not detected",(int)I2cExpAddr0 );
 80011ea:	2386      	movs	r3, #134	; 0x86
 80011ec:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80011f0:	4931      	ldr	r1, [pc, #196]	; (80012b8 <XNUCLEO53L0A1_Init+0xfc>)
 80011f2:	4832      	ldr	r0, [pc, #200]	; (80012bc <XNUCLEO53L0A1_Init+0x100>)
 80011f4:	f000 fa22 	bl	800163c <uart_printf>
        goto done_err;
 80011f8:	e058      	b.n	80012ac <XNUCLEO53L0A1_Init+0xf0>

    }
    status = _ExpanderRd( I2cExpAddr1, 0, ExpanderData, 2);
 80011fa:	463a      	mov	r2, r7
 80011fc:	2302      	movs	r3, #2
 80011fe:	2100      	movs	r1, #0
 8001200:	2084      	movs	r0, #132	; 0x84
 8001202:	f000 f90d 	bl	8001420 <_ExpanderRd>
 8001206:	6078      	str	r0, [r7, #4]
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d105      	bne.n	800121a <XNUCLEO53L0A1_Init+0x5e>
 800120e:	783b      	ldrb	r3, [r7, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <XNUCLEO53L0A1_Init+0x5e>
 8001214:	787b      	ldrb	r3, [r7, #1]
 8001216:	2b16      	cmp	r3, #22
 8001218:	d007      	beq.n	800122a <XNUCLEO53L0A1_Init+0x6e>
        XNUCLEO53L0A1_ErrLog("I2C Expander @0x%02X not detected",(int)I2cExpAddr1);
 800121a:	2384      	movs	r3, #132	; 0x84
 800121c:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8001220:	4925      	ldr	r1, [pc, #148]	; (80012b8 <XNUCLEO53L0A1_Init+0xfc>)
 8001222:	4826      	ldr	r0, [pc, #152]	; (80012bc <XNUCLEO53L0A1_Init+0x100>)
 8001224:	f000 fa0a 	bl	800163c <uart_printf>
        goto done_err;
 8001228:	e040      	b.n	80012ac <XNUCLEO53L0A1_Init+0xf0>
    }

    CurIOVal.u32=0x0;
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <XNUCLEO53L0A1_Init+0x104>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
    /* setup expender   i/o direction  all output but exp1 bit 14*/
    ExpanderData[0] = 0xFF;
 8001230:	23ff      	movs	r3, #255	; 0xff
 8001232:	703b      	strb	r3, [r7, #0]
    ExpanderData[1] = 0xFF;
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	707b      	strb	r3, [r7, #1]
    status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 8001238:	463a      	mov	r2, r7
 800123a:	2302      	movs	r3, #2
 800123c:	2114      	movs	r1, #20
 800123e:	2086      	movs	r0, #134	; 0x86
 8001240:	f000 f920 	bl	8001484 <_ExpanderWR>
 8001244:	6078      	str	r0, [r7, #4]
    if (status) {
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d007      	beq.n	800125c <XNUCLEO53L0A1_Init+0xa0>
        XNUCLEO53L0A1_ErrLog("Set Expander @0x%02X DR", I2cExpAddr0);
 800124c:	2386      	movs	r3, #134	; 0x86
 800124e:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8001252:	4919      	ldr	r1, [pc, #100]	; (80012b8 <XNUCLEO53L0A1_Init+0xfc>)
 8001254:	481b      	ldr	r0, [pc, #108]	; (80012c4 <XNUCLEO53L0A1_Init+0x108>)
 8001256:	f000 f9f1 	bl	800163c <uart_printf>
        goto done_err;
 800125a:	e027      	b.n	80012ac <XNUCLEO53L0A1_Init+0xf0>
    }
    ExpanderData[0] = 0xFF;
 800125c:	23ff      	movs	r3, #255	; 0xff
 800125e:	703b      	strb	r3, [r7, #0]
    ExpanderData[1] = 0xBF; // all but bit 14-15 that is pb1 and xhurt
 8001260:	23bf      	movs	r3, #191	; 0xbf
 8001262:	707b      	strb	r3, [r7, #1]
    status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 8001264:	463a      	mov	r2, r7
 8001266:	2302      	movs	r3, #2
 8001268:	2114      	movs	r1, #20
 800126a:	2084      	movs	r0, #132	; 0x84
 800126c:	f000 f90a 	bl	8001484 <_ExpanderWR>
 8001270:	6078      	str	r0, [r7, #4]
    if (status) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d007      	beq.n	8001288 <XNUCLEO53L0A1_Init+0xcc>
        XNUCLEO53L0A1_ErrLog("Set Expander @0x%02X DR", I2cExpAddr1);
 8001278:	2384      	movs	r3, #132	; 0x84
 800127a:	f240 129f 	movw	r2, #415	; 0x19f
 800127e:	490e      	ldr	r1, [pc, #56]	; (80012b8 <XNUCLEO53L0A1_Init+0xfc>)
 8001280:	4810      	ldr	r0, [pc, #64]	; (80012c4 <XNUCLEO53L0A1_Init+0x108>)
 8001282:	f000 f9db 	bl	800163c <uart_printf>
        goto done_err;
 8001286:	e011      	b.n	80012ac <XNUCLEO53L0A1_Init+0xf0>
    }
    /* shut down all segment and all device */
    CurIOVal.u32=0x7F + (0x7F<<7) + (0x7F<<16)+(0x7F<<(16+7));
 8001288:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <XNUCLEO53L0A1_Init+0x104>)
 800128a:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 800128e:	601a      	str	r2, [r3, #0]
    status= _ExpandersSetAllIO();
 8001290:	f000 f8a6 	bl	80013e0 <_ExpandersSetAllIO>
 8001294:	6078      	str	r0, [r7, #4]
    if( status ){
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <XNUCLEO53L0A1_Init+0xee>
        XNUCLEO53L0A1_ErrLog("Set initial i/o ");
 800129c:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 80012a0:	4905      	ldr	r1, [pc, #20]	; (80012b8 <XNUCLEO53L0A1_Init+0xfc>)
 80012a2:	4809      	ldr	r0, [pc, #36]	; (80012c8 <XNUCLEO53L0A1_Init+0x10c>)
 80012a4:	f000 f9ca 	bl	800163c <uart_printf>
 80012a8:	e000      	b.n	80012ac <XNUCLEO53L0A1_Init+0xf0>
    }

done_err:
 80012aa:	bf00      	nop
    return status;
 80012ac:	687b      	ldr	r3, [r7, #4]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	0800bcc4 	.word	0x0800bcc4
 80012bc:	0800bab4 	.word	0x0800bab4
 80012c0:	20000854 	.word	0x20000854
 80012c4:	0800bae8 	.word	0x0800bae8
 80012c8:	0800bb10 	.word	0x0800bb10

080012cc <XNUCLEO53L0A1_ResetId>:
    }
    *state = PortValue;
    return status;
}

int XNUCLEO53L0A1_ResetId(int DevNo, int state) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
    int status;
    switch( DevNo ){
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d03e      	beq.n	800135a <XNUCLEO53L0A1_ResetId+0x8e>
 80012dc:	2b02      	cmp	r3, #2
 80012de:	dc04      	bgt.n	80012ea <XNUCLEO53L0A1_ResetId+0x1e>
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d021      	beq.n	8001328 <XNUCLEO53L0A1_ResetId+0x5c>
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d006      	beq.n	80012f6 <XNUCLEO53L0A1_ResetId+0x2a>
 80012e8:	e050      	b.n	800138c <XNUCLEO53L0A1_ResetId+0xc0>
 80012ea:	2b6c      	cmp	r3, #108	; 0x6c
 80012ec:	d01c      	beq.n	8001328 <XNUCLEO53L0A1_ResetId+0x5c>
 80012ee:	2b72      	cmp	r3, #114	; 0x72
 80012f0:	d033      	beq.n	800135a <XNUCLEO53L0A1_ResetId+0x8e>
 80012f2:	2b63      	cmp	r3, #99	; 0x63
 80012f4:	d14a      	bne.n	800138c <XNUCLEO53L0A1_ResetId+0xc0>
    case XNUCLEO53L0A1_DEV_CENTER :
    case 'c' :
        CurIOVal.bytes[3]&=~0x80; /* bit 15 expender 1  => byte #3 */
 80012f6:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <XNUCLEO53L0A1_ResetId+0xfc>)
 80012f8:	78db      	ldrb	r3, [r3, #3]
 80012fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <XNUCLEO53L0A1_ResetId+0xfc>)
 8001302:	70da      	strb	r2, [r3, #3]
        if( state )
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <XNUCLEO53L0A1_ResetId+0x4c>
            CurIOVal.bytes[3]|=0x80; /* bit 15 expender 1  => byte #3 */
 800130a:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <XNUCLEO53L0A1_ResetId+0xfc>)
 800130c:	78db      	ldrb	r3, [r3, #3]
 800130e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <XNUCLEO53L0A1_ResetId+0xfc>)
 8001316:	70da      	strb	r2, [r3, #3]
        status= _ExpanderWR(I2cExpAddr1, GPSR+1, &CurIOVal.bytes[3], 1);
 8001318:	2301      	movs	r3, #1
 800131a:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <XNUCLEO53L0A1_ResetId+0x100>)
 800131c:	2113      	movs	r1, #19
 800131e:	2084      	movs	r0, #132	; 0x84
 8001320:	f000 f8b0 	bl	8001484 <_ExpanderWR>
 8001324:	60f8      	str	r0, [r7, #12]
        break;
 8001326:	e03c      	b.n	80013a2 <XNUCLEO53L0A1_ResetId+0xd6>
    case XNUCLEO53L0A1_DEV_LEFT :
    case 'l' :
        CurIOVal.bytes[1]&=~0x40; /* bit 14 expender 0 => byte #1*/
 8001328:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <XNUCLEO53L0A1_ResetId+0xfc>)
 800132a:	785b      	ldrb	r3, [r3, #1]
 800132c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <XNUCLEO53L0A1_ResetId+0xfc>)
 8001334:	705a      	strb	r2, [r3, #1]
        if( state )
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <XNUCLEO53L0A1_ResetId+0x7e>
            CurIOVal.bytes[1]|=0x40; /* bit 14 expender 0 => byte #1*/
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <XNUCLEO53L0A1_ResetId+0xfc>)
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <XNUCLEO53L0A1_ResetId+0xfc>)
 8001348:	705a      	strb	r2, [r3, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 800134a:	2301      	movs	r3, #1
 800134c:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <XNUCLEO53L0A1_ResetId+0x104>)
 800134e:	2113      	movs	r1, #19
 8001350:	2086      	movs	r0, #134	; 0x86
 8001352:	f000 f897 	bl	8001484 <_ExpanderWR>
 8001356:	60f8      	str	r0, [r7, #12]
        break;
 8001358:	e023      	b.n	80013a2 <XNUCLEO53L0A1_ResetId+0xd6>
    case 'r' :
    case XNUCLEO53L0A1_DEV_RIGHT :
        CurIOVal.bytes[1]&=~0x80; /* bit 15 expender 0  => byte #1 */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <XNUCLEO53L0A1_ResetId+0xfc>)
 800135c:	785b      	ldrb	r3, [r3, #1]
 800135e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <XNUCLEO53L0A1_ResetId+0xfc>)
 8001366:	705a      	strb	r2, [r3, #1]
        if( state )
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d006      	beq.n	800137c <XNUCLEO53L0A1_ResetId+0xb0>
            CurIOVal.bytes[1]|=0x80; /* bit 15 expender 0 => byte #1*/
 800136e:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <XNUCLEO53L0A1_ResetId+0xfc>)
 8001370:	785b      	ldrb	r3, [r3, #1]
 8001372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <XNUCLEO53L0A1_ResetId+0xfc>)
 800137a:	705a      	strb	r2, [r3, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 800137c:	2301      	movs	r3, #1
 800137e:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <XNUCLEO53L0A1_ResetId+0x104>)
 8001380:	2113      	movs	r1, #19
 8001382:	2086      	movs	r0, #134	; 0x86
 8001384:	f000 f87e 	bl	8001484 <_ExpanderWR>
 8001388:	60f8      	str	r0, [r7, #12]
        break;
 800138a:	e00a      	b.n	80013a2 <XNUCLEO53L0A1_ResetId+0xd6>
    default:
        XNUCLEO53L0A1_ErrLog("Invalid DevNo %d",DevNo);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001392:	4910      	ldr	r1, [pc, #64]	; (80013d4 <XNUCLEO53L0A1_ResetId+0x108>)
 8001394:	4810      	ldr	r0, [pc, #64]	; (80013d8 <XNUCLEO53L0A1_ResetId+0x10c>)
 8001396:	f000 f951 	bl	800163c <uart_printf>
        status = -1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	60fb      	str	r3, [r7, #12]
        goto done;
 80013a0:	e00d      	b.n	80013be <XNUCLEO53L0A1_ResetId+0xf2>
    }
//error with valid id
    if( status ){
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d009      	beq.n	80013bc <XNUCLEO53L0A1_ResetId+0xf0>
        XNUCLEO53L0A1_ErrLog("expander i/o error for DevNo %d state %d ",DevNo, state);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <XNUCLEO53L0A1_ResetId+0x108>)
 80013b4:	4809      	ldr	r0, [pc, #36]	; (80013dc <XNUCLEO53L0A1_ResetId+0x110>)
 80013b6:	f000 f941 	bl	800163c <uart_printf>
 80013ba:	e000      	b.n	80013be <XNUCLEO53L0A1_ResetId+0xf2>
    }
done:
 80013bc:	bf00      	nop
    return status;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000854 	.word	0x20000854
 80013cc:	20000857 	.word	0x20000857
 80013d0:	20000855 	.word	0x20000855
 80013d4:	0800bcf0 	.word	0x0800bcf0
 80013d8:	0800ba90 	.word	0x0800ba90
 80013dc:	0800bb50 	.word	0x0800bb50

080013e0 <_ExpandersSetAllIO>:
}
/**
 * Set all i2c expended gpio in one go
 * @return i/o operation status
 */
static int _ExpandersSetAllIO(void){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
    int status;
    status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 80013e6:	2302      	movs	r3, #2
 80013e8:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <_ExpandersSetAllIO+0x38>)
 80013ea:	2112      	movs	r1, #18
 80013ec:	2086      	movs	r0, #134	; 0x86
 80013ee:	f000 f849 	bl	8001484 <_ExpanderWR>
 80013f2:	6078      	str	r0, [r7, #4]
    if( status ){
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d107      	bne.n	800140a <_ExpandersSetAllIO+0x2a>
        goto done_err;
    }
    status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 80013fa:	2302      	movs	r3, #2
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <_ExpandersSetAllIO+0x3c>)
 80013fe:	2112      	movs	r1, #18
 8001400:	2084      	movs	r0, #132	; 0x84
 8001402:	f000 f83f 	bl	8001484 <_ExpanderWR>
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	e000      	b.n	800140c <_ExpandersSetAllIO+0x2c>
        goto done_err;
 800140a:	bf00      	nop
done_err:
    return status;
 800140c:	687b      	ldr	r3, [r7, #4]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000854 	.word	0x20000854
 800141c:	20000856 	.word	0x20000856

08001420 <_ExpanderRd>:
 * @param index      register index
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af02      	add	r7, sp, #8
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr;
    RegAddr = index;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	74fb      	strb	r3, [r7, #19]
    XNUCLEO53L0A1_GetI2cBus();
    do {
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L0A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	b299      	uxth	r1, r3
 8001438:	f107 0213 	add.w	r2, r7, #19
 800143c:	2364      	movs	r3, #100	; 0x64
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2301      	movs	r3, #1
 8001442:	480f      	ldr	r0, [pc, #60]	; (8001480 <_ExpanderRd+0x60>)
 8001444:	f007 fa9c 	bl	8008980 <HAL_I2C_Master_Transmit>
 8001448:	4603      	mov	r3, r0
 800144a:	617b      	str	r3, [r7, #20]
        if (status)
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d110      	bne.n	8001474 <_ExpanderRd+0x54>
            break;
        status = HAL_I2C_Master_Receive(&XNUCLEO53L0A1_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	b299      	uxth	r1, r3
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b298      	uxth	r0, r3
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	2264      	movs	r2, #100	; 0x64
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	4603      	mov	r3, r0
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <_ExpanderRd+0x60>)
 800146a:	f007 fb95 	bl	8008b98 <HAL_I2C_Master_Receive>
 800146e:	4603      	mov	r3, r0
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	e000      	b.n	8001476 <_ExpanderRd+0x56>
            break;
 8001474:	bf00      	nop
    } while (0);
    XNUCLEO53L0A1_PutI2cBus();
    return status;
 8001476:	697b      	ldr	r3, [r7, #20]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200009d0 	.word	0x200009d0

08001484 <_ExpanderWR>:
 * @param index      register index
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af02      	add	r7, sp, #8
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0] = index;
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr + 1, data, n_data);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	3301      	adds	r3, #1
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f009 fd5e 	bl	800af64 <memcpy>
    XNUCLEO53L0A1_GetI2cBus();
    status = HAL_I2C_Master_Transmit(&XNUCLEO53L0A1_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	b299      	uxth	r1, r3
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	3301      	adds	r3, #1
 80014b2:	b298      	uxth	r0, r3
 80014b4:	f107 0214 	add.w	r2, r7, #20
 80014b8:	2364      	movs	r3, #100	; 0x64
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4603      	mov	r3, r0
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <_ExpanderWR+0x50>)
 80014c0:	f007 fa5e 	bl	8008980 <HAL_I2C_Master_Transmit>
 80014c4:	4603      	mov	r3, r0
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    XNUCLEO53L0A1_PutI2cBus();
    return status;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3728      	adds	r7, #40	; 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200009d0 	.word	0x200009d0

080014d8 <XNUCLEO53L0A1_SetDisplayString>:
#undef S6
#undef DP

/** @} */

int XNUCLEO53L0A1_SetDisplayString(const char *str) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    int status;
    uint32_t Segments;
    int BitPos;
    int i;

    for( i=0; i<4 && str[i]!=0; i++){
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	e027      	b.n	8001536 <XNUCLEO53L0A1_SetDisplayString+0x5e>
        Segments = (uint32_t)ascii_to_display_lut[(uint8_t)str[i]];
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <XNUCLEO53L0A1_SetDisplayString+0xbc>)
 80014f2:	5c9b      	ldrb	r3, [r3, r2]
 80014f4:	613b      	str	r3, [r7, #16]
        Segments =(~Segments)&0x7F;
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014fe:	613b      	str	r3, [r7, #16]
        BitPos=DisplayBitPos[i];
 8001500:	4a25      	ldr	r2, [pc, #148]	; (8001598 <XNUCLEO53L0A1_SetDisplayString+0xc0>)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001508:	60fb      	str	r3, [r7, #12]
        CurIOVal.u32 &=~(0x7F<<BitPos);
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	217f      	movs	r1, #127	; 0x7f
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	fa01 f202 	lsl.w	r2, r1, r2
 8001516:	43d2      	mvns	r2, r2
 8001518:	4013      	ands	r3, r2
 800151a:	4a20      	ldr	r2, [pc, #128]	; (800159c <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 800151c:	6013      	str	r3, [r2, #0]
        CurIOVal.u32 |= Segments<<BitPos;
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	6939      	ldr	r1, [r7, #16]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	4a1b      	ldr	r2, [pc, #108]	; (800159c <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 800152e:	6013      	str	r3, [r2, #0]
    for( i=0; i<4 && str[i]!=0; i++){
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2b03      	cmp	r3, #3
 800153a:	dc17      	bgt.n	800156c <XNUCLEO53L0A1_SetDisplayString+0x94>
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1ce      	bne.n	80014e6 <XNUCLEO53L0A1_SetDisplayString+0xe>
    }
    /* clear unused digit */
    for( ; i<4;i++){
 8001548:	e010      	b.n	800156c <XNUCLEO53L0A1_SetDisplayString+0x94>
        BitPos=DisplayBitPos[i];
 800154a:	4a13      	ldr	r2, [pc, #76]	; (8001598 <XNUCLEO53L0A1_SetDisplayString+0xc0>)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001552:	60fb      	str	r3, [r7, #12]
        CurIOVal.u32 |=0x7F<<BitPos;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	217f      	movs	r1, #127	; 0x7f
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	fa01 f202 	lsl.w	r2, r1, r2
 8001560:	4313      	orrs	r3, r2
 8001562:	4a0e      	ldr	r2, [pc, #56]	; (800159c <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8001564:	6013      	str	r3, [r2, #0]
    for( ; i<4;i++){
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b03      	cmp	r3, #3
 8001570:	ddeb      	ble.n	800154a <XNUCLEO53L0A1_SetDisplayString+0x72>
    }
    status = _ExpandersSetAllIO();
 8001572:	f7ff ff35 	bl	80013e0 <_ExpandersSetAllIO>
 8001576:	60b8      	str	r0, [r7, #8]
    if( status ){
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <XNUCLEO53L0A1_SetDisplayString+0xb2>
        XNUCLEO53L0A1_ErrLog("Set i/o");
 800157e:	f240 320f 	movw	r2, #783	; 0x30f
 8001582:	4907      	ldr	r1, [pc, #28]	; (80015a0 <XNUCLEO53L0A1_SetDisplayString+0xc8>)
 8001584:	4807      	ldr	r0, [pc, #28]	; (80015a4 <XNUCLEO53L0A1_SetDisplayString+0xcc>)
 8001586:	f000 f859 	bl	800163c <uart_printf>
    }
    return status;
 800158a:	68bb      	ldr	r3, [r7, #8]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	0800bb8c 	.word	0x0800bb8c
 8001598:	200004fc 	.word	0x200004fc
 800159c:	20000854 	.word	0x20000854
 80015a0:	0800bd08 	.word	0x0800bd08
 80015a4:	0800bc8c 	.word	0x0800bc8c

080015a8 <HAL_UART_TxCpltCallback>:

static volatile int InUsed=0;
static char uart_buffer[256];
static uint32_t UartErrCnt=0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
    // TODO check if any more to send and do it
    InUsed=0;
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <HAL_UART_TxCpltCallback+0x1c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000858 	.word	0x20000858

080015c8 <uart_vprintf>:

int uart_vprintf(const char *msg, va_list ap){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
    int n;
    int status;
    while( InUsed ){
 80015d2:	e000      	b.n	80015d6 <uart_vprintf+0xe>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80015d4:	bf30      	wfi
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <uart_vprintf+0x64>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1fa      	bne.n	80015d4 <uart_vprintf+0xc>
           //
        __WFI();
    }
    InUsed|=1;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <uart_vprintf+0x64>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	4a11      	ldr	r2, [pc, #68]	; (800162c <uart_vprintf+0x64>)
 80015e8:	6013      	str	r3, [r2, #0]
    n=vsnprintf(uart_buffer, sizeof(uart_buffer),  msg, ap);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f2:	480f      	ldr	r0, [pc, #60]	; (8001630 <uart_vprintf+0x68>)
 80015f4:	f009 fd1e 	bl	800b034 <vsniprintf>
 80015f8:	60f8      	str	r0, [r7, #12]
    status = HAL_UART_Transmit_DMA(&huart2, (uint8_t*)uart_buffer, n );
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	490b      	ldr	r1, [pc, #44]	; (8001630 <uart_vprintf+0x68>)
 8001602:	480c      	ldr	r0, [pc, #48]	; (8001634 <uart_vprintf+0x6c>)
 8001604:	f008 ff38 	bl	800a478 <HAL_UART_Transmit_DMA>
 8001608:	4603      	mov	r3, r0
 800160a:	60bb      	str	r3, [r7, #8]
    if( status ){
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d007      	beq.n	8001622 <uart_vprintf+0x5a>
        UartErrCnt++;
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <uart_vprintf+0x70>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <uart_vprintf+0x70>)
 800161a:	6013      	str	r3, [r2, #0]
        InUsed=0;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <uart_vprintf+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
    }
    return n;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000858 	.word	0x20000858
 8001630:	2000085c 	.word	0x2000085c
 8001634:	20000a84 	.word	0x20000a84
 8001638:	2000095c 	.word	0x2000095c

0800163c <uart_printf>:

int uart_printf(const char *msg, ...){
 800163c:	b40f      	push	{r0, r1, r2, r3}
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
	va_list ap;
    int n;
    while( InUsed ){
 8001644:	e000      	b.n	8001648 <uart_printf+0xc>
 8001646:	bf30      	wfi
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <uart_printf+0x34>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1fa      	bne.n	8001646 <uart_printf+0xa>
        //
        __WFI();
    }
    va_start(ap, msg);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	603b      	str	r3, [r7, #0]
    n=uart_vprintf(msg, ap);
 8001656:	6839      	ldr	r1, [r7, #0]
 8001658:	6938      	ldr	r0, [r7, #16]
 800165a:	f7ff ffb5 	bl	80015c8 <uart_vprintf>
 800165e:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return n;
 8001660:	687b      	ldr	r3, [r7, #4]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800166c:	b004      	add	sp, #16
 800166e:	4770      	bx	lr
 8001670:	20000858 	.word	0x20000858

08001674 <VL53L0A1_EXTI_Callback>:
 * @param DevNo     DeviceNumber  (for shared interrupt is  center always)
 * @param GPIO_Pin  EXTI Gpio Pin associated to the interrupt
 *
 * @ingroup   MSP_implement_common
 */
__weak void VL53L0A1_EXTI_Callback(int DevNo, int GPIO_Pin){
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
    /**
     * built-in Does nothing redefined your's
     */
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <DMA1_Stream6_IRQHandler>:
#if VL53L0A1_UART_DMA_TX
/**
* @brief This function handles DMA1 stream6 global interrupt.
*/
void DMA1_Stream6_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <DMA1_Stream6_IRQHandler+0x10>)
 8001692:	f006 fc41 	bl	8007f18 <HAL_DMA_IRQHandler>
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000a24 	.word	0x20000a24

080016a0 <XNUCLEO53L0A1_DMA_Init>:
#endif  //VL53L0A1_UART_DMA_TX


static void XNUCLEO53L0A1_DMA_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __DMA1_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <XNUCLEO53L0A1_DMA_Init+0x3c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <XNUCLEO53L0A1_DMA_Init+0x3c>)
 80016b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <XNUCLEO53L0A1_DMA_Init+0x3c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
#if  VL53L0A1_UART_DMA_RX
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, VL53L0A1_UART_DMA_TX_IRQ_PRI, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
#endif
#if  VL53L0A1_UART_DMA_TX
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, VL53L0A1_UART_DMA_TX_IRQ_PRI, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	2011      	movs	r0, #17
 80016c8:	f006 fab7 	bl	8007c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016cc:	2011      	movs	r0, #17
 80016ce:	f006 fad0 	bl	8007c72 <HAL_NVIC_EnableIRQ>
#endif

}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800

080016e0 <XNUCLEO53L0A1_USART2_UART_Init>:
/* USART2 init function */

void XNUCLEO53L0A1_USART2_UART_Init(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0

    XNUCLEO53L0A1_DMA_Init();
 80016e4:	f7ff ffdc 	bl	80016a0 <XNUCLEO53L0A1_DMA_Init>

    huart2.Instance = USART2;
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 80016ea:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <XNUCLEO53L0A1_USART2_UART_Init+0x48>)
 80016ec:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = USART2_BAUD_RATE;
 80016ee:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 80016f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f4:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 800170a:	220c      	movs	r2, #12
 800170c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart2);
 800171a:	4802      	ldr	r0, [pc, #8]	; (8001724 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 800171c:	f008 fe5f 	bl	800a3de <HAL_UART_Init>


}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000a84 	.word	0x20000a84
 8001728:	40004400 	.word	0x40004400

0800172c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a2a      	ldr	r2, [pc, #168]	; (80017e4 <HAL_UART_MspInit+0xb8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d14e      	bne.n	80017dc <HAL_UART_MspInit+0xb0>
  {
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <HAL_UART_MspInit+0xbc>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a28      	ldr	r2, [pc, #160]	; (80017e8 <HAL_UART_MspInit+0xbc>)
 8001748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <HAL_UART_MspInit+0xbc>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800175a:	230c      	movs	r3, #12
 800175c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800176a:	2307      	movs	r3, #7
 800176c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	4619      	mov	r1, r3
 8001774:	481d      	ldr	r0, [pc, #116]	; (80017ec <HAL_UART_MspInit+0xc0>)
 8001776:	f006 fe4d 	bl	8008414 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
#if VL53L0A1_UART_DMA_TX
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_UART_MspInit+0xc4>)
 800177c:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_UART_MspInit+0xc8>)
 800177e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_UART_MspInit+0xc4>)
 8001782:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001786:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_UART_MspInit+0xc4>)
 800178a:	2240      	movs	r2, #64	; 0x40
 800178c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_UART_MspInit+0xc4>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_UART_MspInit+0xc4>)
 8001796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800179a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_UART_MspInit+0xc4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <HAL_UART_MspInit+0xc4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <HAL_UART_MspInit+0xc4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_UART_MspInit+0xc4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_UART_MspInit+0xc4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_DMA_Init(&hdma_usart2_tx);
 80017ba:	480d      	ldr	r0, [pc, #52]	; (80017f0 <HAL_UART_MspInit+0xc4>)
 80017bc:	f006 fa80 	bl	8007cc0 <HAL_DMA_Init>

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_UART_MspInit+0xc4>)
 80017c4:	631a      	str	r2, [r3, #48]	; 0x30
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <HAL_UART_MspInit+0xc4>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    HAL_DMA_Init(&hdma_usart2_rx);

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
#endif
    HAL_NVIC_SetPriority(USART2_IRQn, VL53L0A1_UART_IRQ_PRI, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	2026      	movs	r0, #38	; 0x26
 80017d2:	f006 fa32 	bl	8007c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017d6:	2026      	movs	r0, #38	; 0x26
 80017d8:	f006 fa4b 	bl	8007c72 <HAL_NVIC_EnableIRQ>
  }
}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40004400 	.word	0x40004400
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020000 	.word	0x40020000
 80017f0:	20000a24 	.word	0x20000a24
 80017f4:	400260a0 	.word	0x400260a0

080017f8 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <USART2_IRQHandler+0x10>)
 80017fe:	f008 fea7 	bl	800a550 <HAL_UART_IRQHandler>
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000a84 	.word	0x20000a84

0800180c <HAL_GPIO_EXTI_Callback>:

/**
 * HAl Callback for EXTI
 * @param GPIO_Pin The GPIO pin EXTI was invoked
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
#if VL53L0A1_GPIO1_SHARED
    if( GPIO_Pin == VL53L0A1_GPIO1_C_GPIO_PIN ){
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_CENTER, GPIO_Pin);
    }
#else
    switch(  GPIO_Pin  ){
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	2b80      	cmp	r3, #128	; 0x80
 800181a:	d00b      	beq.n	8001834 <HAL_GPIO_EXTI_Callback+0x28>
 800181c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001820:	d00e      	beq.n	8001840 <HAL_GPIO_EXTI_Callback+0x34>
 8001822:	2b10      	cmp	r3, #16
 8001824:	d000      	beq.n	8001828 <HAL_GPIO_EXTI_Callback+0x1c>
    case VL53L0A1_GPIO1_R_GPIO_PIN :
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_RIGHT, GPIO_Pin);
        break;

    default:
        break;
 8001826:	e011      	b.n	800184c <HAL_GPIO_EXTI_Callback+0x40>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_CENTER, GPIO_Pin);
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	4619      	mov	r1, r3
 800182c:	2001      	movs	r0, #1
 800182e:	f7ff ff21 	bl	8001674 <VL53L0A1_EXTI_Callback>
        break;
 8001832:	e00b      	b.n	800184c <HAL_GPIO_EXTI_Callback+0x40>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_LEFT, GPIO_Pin);
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	4619      	mov	r1, r3
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff ff1b 	bl	8001674 <VL53L0A1_EXTI_Callback>
        break;
 800183e:	e005      	b.n	800184c <HAL_GPIO_EXTI_Callback+0x40>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_RIGHT, GPIO_Pin);
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	4619      	mov	r1, r3
 8001844:	2002      	movs	r0, #2
 8001846:	f7ff ff15 	bl	8001674 <VL53L0A1_EXTI_Callback>
        break;
 800184a:	bf00      	nop
    }
#endif
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <EXTI4_IRQHandler>:
 * interrupt Handler for EXTI lines 4
 *
 * @note is only implemented if needed by configuration
 */
void EXTI4_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI4_USE_PIN);
 8001858:	2010      	movs	r0, #16
 800185a:	f006 ff8f 	bl	800877c <HAL_GPIO_EXTI_IRQHandler>
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}

08001862 <EXTI9_5_IRQHandler>:
 * @warning this handler assume ther's no shared pin on the EXTI
 * For share interrupt  end user must fix this code to find the originating pins
 * and dispatch accordingly see __HAL_GPIO_EXTI_GET_FLAG  etc ..
 */
void EXTI9_5_IRQHandler(void)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI9_5_USE_PIN);
 8001866:	2080      	movs	r0, #128	; 0x80
 8001868:	f006 ff88 	bl	800877c <HAL_GPIO_EXTI_IRQHandler>
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <EXTI15_10_IRQHandler>:
 * @note is only implemented if needed by configuration
 * @warning this handler assume ther's no shared pin on the EXTI
 * For share interrupt  end user must fix this code to find the originating pins
 * and dispatch accordingly see __HAL_GPIO_EXTI_GET_FLAG  etc ..
 */
void EXTI15_10_IRQHandler(void){
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI15_10_USE_PIN);
 8001874:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001878:	f006 ff80 	bl	800877c <HAL_GPIO_EXTI_IRQHandler>
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af02      	add	r7, sp, #8
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	330a      	adds	r3, #10
 8001890:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800189e:	b299      	uxth	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	4613      	mov	r3, r2
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	f007 f868 	bl	8008980 <HAL_I2C_Master_Transmit>
 80018b0:	4603      	mov	r3, r0
 80018b2:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80018b4:	693b      	ldr	r3, [r7, #16]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80018be:	b580      	push	{r7, lr}
 80018c0:	b088      	sub	sp, #32
 80018c2:	af02      	add	r7, sp, #8
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	330a      	adds	r3, #10
 80018ce:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	b299      	uxth	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	4613      	mov	r3, r2
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	f007 f952 	bl	8008b98 <HAL_I2C_Master_Receive>
 80018f4:	4603      	mov	r3, r0
 80018f6:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80018f8:	693b      	ldr	r3, [r7, #16]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	460b      	mov	r3, r1
 8001912:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001914:	2300      	movs	r3, #0
 8001916:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2b3f      	cmp	r3, #63	; 0x3f
 800191c:	d902      	bls.n	8001924 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800191e:	f06f 0303 	mvn.w	r3, #3
 8001922:	e016      	b.n	8001952 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8001924:	4a0d      	ldr	r2, [pc, #52]	; (800195c <VL53L0X_WriteMulti+0x58>)
 8001926:	7afb      	ldrb	r3, [r7, #11]
 8001928:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	480c      	ldr	r0, [pc, #48]	; (8001960 <VL53L0X_WriteMulti+0x5c>)
 8001930:	f009 fb18 	bl	800af64 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	3301      	adds	r3, #1
 8001938:	461a      	mov	r2, r3
 800193a:	4908      	ldr	r1, [pc, #32]	; (800195c <VL53L0X_WriteMulti+0x58>)
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f7ff ff9f 	bl	8001880 <_I2CWrite>
 8001942:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800194a:	23ec      	movs	r3, #236	; 0xec
 800194c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800194e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000ac4 	.word	0x20000ac4
 8001960:	20000ac5 	.word	0x20000ac5

08001964 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	460b      	mov	r3, r1
 8001972:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001974:	2300      	movs	r3, #0
 8001976:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001978:	f107 030b 	add.w	r3, r7, #11
 800197c:	2201      	movs	r2, #1
 800197e:	4619      	mov	r1, r3
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f7ff ff7d 	bl	8001880 <_I2CWrite>
 8001986:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800198e:	23ec      	movs	r3, #236	; 0xec
 8001990:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001992:	e00c      	b.n	80019ae <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff ff90 	bl	80018be <_I2CRead>
 800199e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80019a6:	23ec      	movs	r3, #236	; 0xec
 80019a8:	75fb      	strb	r3, [r7, #23]
 80019aa:	e000      	b.n	80019ae <VL53L0X_ReadMulti+0x4a>
    }
done:
 80019ac:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80019ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
 80019c8:	4613      	mov	r3, r2
 80019ca:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80019d0:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <VL53L0X_WrByte+0x44>)
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <VL53L0X_WrByte+0x44>)
 80019d8:	78bb      	ldrb	r3, [r7, #2]
 80019da:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80019dc:	2202      	movs	r2, #2
 80019de:	4908      	ldr	r1, [pc, #32]	; (8001a00 <VL53L0X_WrByte+0x44>)
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff4d 	bl	8001880 <_I2CWrite>
 80019e6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80019ee:	23ec      	movs	r3, #236	; 0xec
 80019f0:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000ac4 	.word	0x20000ac4

08001a04 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	70fb      	strb	r3, [r7, #3]
 8001a10:	4613      	mov	r3, r2
 8001a12:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8001a18:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <VL53L0X_WrWord+0x50>)
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8001a1e:	883b      	ldrh	r3, [r7, #0]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <VL53L0X_WrWord+0x50>)
 8001a28:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8001a2a:	883b      	ldrh	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <VL53L0X_WrWord+0x50>)
 8001a30:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8001a32:	2203      	movs	r2, #3
 8001a34:	4907      	ldr	r1, [pc, #28]	; (8001a54 <VL53L0X_WrWord+0x50>)
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ff22 	bl	8001880 <_I2CWrite>
 8001a3c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001a44:	23ec      	movs	r3, #236	; 0xec
 8001a46:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8001a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000ac4 	.word	0x20000ac4

08001a58 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	4608      	mov	r0, r1
 8001a62:	4611      	mov	r1, r2
 8001a64:	461a      	mov	r2, r3
 8001a66:	4603      	mov	r3, r0
 8001a68:	70fb      	strb	r3, [r7, #3]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	70bb      	strb	r3, [r7, #2]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8001a76:	f107 020e 	add.w	r2, r7, #14
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f81e 	bl	8001ac0 <VL53L0X_RdByte>
 8001a84:	4603      	mov	r3, r0
 8001a86:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8001a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d110      	bne.n	8001ab2 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8001a90:	7bba      	ldrb	r2, [r7, #14]
 8001a92:	78bb      	ldrb	r3, [r7, #2]
 8001a94:	4013      	ands	r3, r2
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8001aa0:	7bba      	ldrb	r2, [r7, #14]
 8001aa2:	78fb      	ldrb	r3, [r7, #3]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ff88 	bl	80019bc <VL53L0X_WrByte>
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	e000      	b.n	8001ab4 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8001ab2:	bf00      	nop
done:
    return Status;
 8001ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001ad2:	f107 030b 	add.w	r3, r7, #11
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	4619      	mov	r1, r3
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f7ff fed0 	bl	8001880 <_I2CWrite>
 8001ae0:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001ae8:	23ec      	movs	r3, #236	; 0xec
 8001aea:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001aec:	e00c      	b.n	8001b08 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8001aee:	2201      	movs	r2, #1
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f7ff fee3 	bl	80018be <_I2CRead>
 8001af8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001b00:	23ec      	movs	r3, #236	; 0xec
 8001b02:	75fb      	strb	r3, [r7, #23]
 8001b04:	e000      	b.n	8001b08 <VL53L0X_RdByte+0x48>
    }
done:
 8001b06:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8001b08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001b26:	f107 030b 	add.w	r3, r7, #11
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f7ff fea6 	bl	8001880 <_I2CWrite>
 8001b34:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001b3c:	23ec      	movs	r3, #236	; 0xec
 8001b3e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001b40:	e017      	b.n	8001b72 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8001b42:	2202      	movs	r2, #2
 8001b44:	490e      	ldr	r1, [pc, #56]	; (8001b80 <VL53L0X_RdWord+0x6c>)
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f7ff feb9 	bl	80018be <_I2CRead>
 8001b4c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001b54:	23ec      	movs	r3, #236	; 0xec
 8001b56:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001b58:	e00b      	b.n	8001b72 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <VL53L0X_RdWord+0x6c>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <VL53L0X_RdWord+0x6c>)
 8001b66:	785b      	ldrb	r3, [r3, #1]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8001b72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000ac4 	.word	0x20000ac4

08001b84 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001b96:	f107 030b 	add.w	r3, r7, #11
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f7ff fe6e 	bl	8001880 <_I2CWrite>
 8001ba4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001bac:	23ec      	movs	r3, #236	; 0xec
 8001bae:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001bb0:	e01b      	b.n	8001bea <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	4910      	ldr	r1, [pc, #64]	; (8001bf8 <VL53L0X_RdDWord+0x74>)
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f7ff fe81 	bl	80018be <_I2CRead>
 8001bbc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001bc4:	23ec      	movs	r3, #236	; 0xec
 8001bc6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001bc8:	e00f      	b.n	8001bea <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <VL53L0X_RdDWord+0x74>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	061a      	lsls	r2, r3, #24
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <VL53L0X_RdDWord+0x74>)
 8001bd2:	785b      	ldrb	r3, [r3, #1]
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	441a      	add	r2, r3
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <VL53L0X_RdDWord+0x74>)
 8001bda:	789b      	ldrb	r3, [r3, #2]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	4413      	add	r3, r2
 8001be0:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <VL53L0X_RdDWord+0x74>)
 8001be2:	78d2      	ldrb	r2, [r2, #3]
 8001be4:	441a      	add	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8001bea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000ac4 	.word	0x20000ac4

08001bfc <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8001c08:	2002      	movs	r0, #2
 8001c0a:	f005 ff29 	bl	8007a60 <HAL_Delay>
    return status;
 8001c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af04      	add	r7, sp, #16
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x6c>)
 8001c2c:	681c      	ldr	r4, [r3, #0]
 8001c2e:	f005 ff0b 	bl	8007a48 <HAL_GetTick>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x70>)
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	9200      	str	r2, [sp, #0]
 8001c3c:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x74>)
 8001c3e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c42:	4621      	mov	r1, r4
 8001c44:	2001      	movs	r0, #1
 8001c46:	f005 fe51 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8001c4a:	6839      	ldr	r1, [r7, #0]
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f002 fa81 	bl	8004154 <VL53L0X_get_offset_calibration_data_micro_meter>
 8001c52:	4603      	mov	r3, r0
 8001c54:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x6c>)
 8001c58:	681c      	ldr	r4, [r3, #0]
 8001c5a:	f005 fef5 	bl	8007a48 <HAL_GetTick>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	461a      	mov	r2, r3
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x70>)
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	9200      	str	r2, [sp, #0]
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x78>)
 8001c70:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c74:	4621      	mov	r1, r4
 8001c76:	2001      	movs	r0, #1
 8001c78:	f005 fe38 	bl	80078ec <trace_print_module_function>
	return Status;
 8001c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd90      	pop	{r4, r7, pc}
 8001c88:	200007c8 	.word	0x200007c8
 8001c8c:	0800becc 	.word	0x0800becc
 8001c90:	0800bd28 	.word	0x0800bd28
 8001c94:	0800bd3c 	.word	0x0800bd3c

08001c98 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af04      	add	r7, sp, #16
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <VL53L0X_SetDeviceAddress+0x78>)
 8001caa:	681c      	ldr	r4, [r3, #0]
 8001cac:	f005 fecc 	bl	8007a48 <HAL_GetTick>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <VL53L0X_SetDeviceAddress+0x7c>)
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	9200      	str	r2, [sp, #0]
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <VL53L0X_SetDeviceAddress+0x80>)
 8001cbc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f005 fe12 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	085b      	lsrs	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	218a      	movs	r1, #138	; 0x8a
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff fe72 	bl	80019bc <VL53L0X_WrByte>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <VL53L0X_SetDeviceAddress+0x78>)
 8001cde:	681c      	ldr	r4, [r3, #0]
 8001ce0:	f005 feb2 	bl	8007a48 <HAL_GetTick>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cec:	9302      	str	r3, [sp, #8]
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <VL53L0X_SetDeviceAddress+0x7c>)
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	9200      	str	r2, [sp, #0]
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <VL53L0X_SetDeviceAddress+0x84>)
 8001cf6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f005 fdf5 	bl	80078ec <trace_print_module_function>
	return Status;
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd90      	pop	{r4, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200007c8 	.word	0x200007c8
 8001d14:	0800bf98 	.word	0x0800bf98
 8001d18:	0800bd28 	.word	0x0800bd28
 8001d1c:	0800bd3c 	.word	0x0800bd3c

08001d20 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8001d20:	b5b0      	push	{r4, r5, r7, lr}
 8001d22:	b09a      	sub	sp, #104	; 0x68
 8001d24:	af04      	add	r7, sp, #16
 8001d26:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	VL53L0X_DeviceParameters_t CurrentParameters;
	int i;
	uint8_t StopVariable;

	LOG_FUNCTION_START("");
 8001d2e:	4bbd      	ldr	r3, [pc, #756]	; (8002024 <VL53L0X_DataInit+0x304>)
 8001d30:	681c      	ldr	r4, [r3, #0]
 8001d32:	f005 fe89 	bl	8007a48 <HAL_GetTick>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4bbb      	ldr	r3, [pc, #748]	; (8002028 <VL53L0X_DataInit+0x308>)
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	9200      	str	r2, [sp, #0]
 8001d40:	4bba      	ldr	r3, [pc, #744]	; (800202c <VL53L0X_DataInit+0x30c>)
 8001d42:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001d46:	4621      	mov	r1, r4
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f005 fdcf 	bl	80078ec <trace_print_module_function>
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8001d4e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d107      	bne.n	8001d66 <VL53L0X_DataInit+0x46>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2188      	movs	r1, #136	; 0x88
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff fe2e 	bl	80019bc <VL53L0X_WrByte>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d74:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001d7e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4aaa      	ldr	r2, [pc, #680]	; (8002030 <VL53L0X_DataInit+0x310>)
 8001d86:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4aa9      	ldr	r2, [pc, #676]	; (8002034 <VL53L0X_DataInit+0x314>)
 8001d8e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001d98:	f107 0310 	add.w	r3, r7, #16
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 faf8 	bl	8002394 <VL53L0X_GetDeviceParameters>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8001daa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d112      	bne.n	8001dd8 <VL53L0X_DataInit+0xb8>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8001db2:	2300      	movs	r3, #0
 8001db4:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8001db6:	2300      	movs	r3, #0
 8001db8:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f103 0410 	add.w	r4, r3, #16
 8001dc0:	f107 0510 	add.w	r5, r7, #16
 8001dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001dd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2264      	movs	r2, #100	; 0x64
 8001ddc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001de6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001df0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001dfa:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001e06:	2201      	movs	r2, #1
 8001e08:	2180      	movs	r1, #128	; 0x80
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff fdd6 	bl	80019bc <VL53L0X_WrByte>
 8001e10:	4603      	mov	r3, r0
 8001e12:	461a      	mov	r2, r3
 8001e14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001e1e:	2201      	movs	r2, #1
 8001e20:	21ff      	movs	r1, #255	; 0xff
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff fdca 	bl	80019bc <VL53L0X_WrByte>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e30:	4313      	orrs	r3, r2
 8001e32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff fdbe 	bl	80019bc <VL53L0X_WrByte>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8001e4e:	f107 030f 	add.w	r3, r7, #15
 8001e52:	461a      	mov	r2, r3
 8001e54:	2191      	movs	r1, #145	; 0x91
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff fe32 	bl	8001ac0 <VL53L0X_RdByte>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461a      	mov	r2, r3
 8001e60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8001e6a:	7bfa      	ldrb	r2, [r7, #15]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001e72:	2201      	movs	r2, #1
 8001e74:	2100      	movs	r1, #0
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff fda0 	bl	80019bc <VL53L0X_WrByte>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e84:	4313      	orrs	r3, r2
 8001e86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	21ff      	movs	r1, #255	; 0xff
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fd94 	bl	80019bc <VL53L0X_WrByte>
 8001e94:	4603      	mov	r3, r0
 8001e96:	461a      	mov	r2, r3
 8001e98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fd88 	bl	80019bc <VL53L0X_WrByte>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001eba:	2300      	movs	r3, #0
 8001ebc:	653b      	str	r3, [r7, #80]	; 0x50
 8001ebe:	e014      	b.n	8001eea <VL53L0X_DataInit+0x1ca>
		if (Status == VL53L0X_ERROR_NONE)
 8001ec0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d114      	bne.n	8001ef2 <VL53L0X_DataInit+0x1d2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8001ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	2201      	movs	r2, #1
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 ffe1 	bl	8002e98 <VL53L0X_SetLimitCheckEnable>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	461a      	mov	r2, r3
 8001eda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	653b      	str	r3, [r7, #80]	; 0x50
 8001eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	dde7      	ble.n	8001ec0 <VL53L0X_DataInit+0x1a0>
 8001ef0:	e000      	b.n	8001ef4 <VL53L0X_DataInit+0x1d4>
		else
			break;
 8001ef2:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8001ef4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <VL53L0X_DataInit+0x1ec>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001efc:	2200      	movs	r2, #0
 8001efe:	2102      	movs	r1, #2
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 ffc9 	bl	8002e98 <VL53L0X_SetLimitCheckEnable>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001f0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d107      	bne.n	8001f24 <VL53L0X_DataInit+0x204>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001f14:	2200      	movs	r2, #0
 8001f16:	2103      	movs	r1, #3
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 ffbd 	bl	8002e98 <VL53L0X_SetLimitCheckEnable>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001f24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d107      	bne.n	8001f3c <VL53L0X_DataInit+0x21c>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2104      	movs	r1, #4
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 ffb1 	bl	8002e98 <VL53L0X_SetLimitCheckEnable>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001f3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <VL53L0X_DataInit+0x234>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001f44:	2200      	movs	r2, #0
 8001f46:	2105      	movs	r1, #5
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 ffa5 	bl	8002e98 <VL53L0X_SetLimitCheckEnable>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8001f54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d108      	bne.n	8001f6e <VL53L0X_DataInit+0x24e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001f5c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8001f60:	2100      	movs	r1, #0
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f001 f89c 	bl	80030a0 <VL53L0X_SetLimitCheckValue>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001f6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d108      	bne.n	8001f88 <VL53L0X_DataInit+0x268>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001f76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f001 f88f 	bl	80030a0 <VL53L0X_SetLimitCheckValue>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001f88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d108      	bne.n	8001fa2 <VL53L0X_DataInit+0x282>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001f90:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8001f94:	2102      	movs	r1, #2
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f001 f882 	bl	80030a0 <VL53L0X_SetLimitCheckValue>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001fa2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d107      	bne.n	8001fba <VL53L0X_DataInit+0x29a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001faa:	2200      	movs	r2, #0
 8001fac:	2103      	movs	r1, #3
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f001 f876 	bl	80030a0 <VL53L0X_SetLimitCheckValue>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001fba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10f      	bne.n	8001fe2 <VL53L0X_DataInit+0x2c2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	22ff      	movs	r2, #255	; 0xff
 8001fc6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001fca:	22ff      	movs	r2, #255	; 0xff
 8001fcc:	2101      	movs	r1, #1
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff fcf4 	bl	80019bc <VL53L0X_WrByte>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8001fe2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <VL53L0X_DataInit+0x2d2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <VL53L0X_DataInit+0x304>)
 8001ff4:	681c      	ldr	r4, [r3, #0]
 8001ff6:	f005 fd27 	bl	8007a48 <HAL_GetTick>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002002:	9302      	str	r3, [sp, #8]
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <VL53L0X_DataInit+0x308>)
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	9200      	str	r2, [sp, #0]
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <VL53L0X_DataInit+0x318>)
 800200c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002010:	4621      	mov	r1, r4
 8002012:	2001      	movs	r0, #1
 8002014:	f005 fc6a 	bl	80078ec <trace_print_module_function>
	return Status;
 8002018:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800201c:	4618      	mov	r0, r3
 800201e:	3758      	adds	r7, #88	; 0x58
 8002020:	46bd      	mov	sp, r7
 8002022:	bdb0      	pop	{r4, r5, r7, pc}
 8002024:	200007c8 	.word	0x200007c8
 8002028:	0800bfb4 	.word	0x0800bfb4
 800202c:	0800bd28 	.word	0x0800bd28
 8002030:	00016b85 	.word	0x00016b85
 8002034:	000970a4 	.word	0x000970a4
 8002038:	0800bd3c 	.word	0x0800bd3c

0800203c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800203c:	b5b0      	push	{r4, r5, r7, lr}
 800203e:	b0a0      	sub	sp, #128	; 0x80
 8002040:	af04      	add	r7, sp, #16
 8002042:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800204a:	f107 031c 	add.w	r3, r7, #28
 800204e:	2240      	movs	r2, #64	; 0x40
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f008 ff91 	bl	800af7a <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");
 8002078:	4bc1      	ldr	r3, [pc, #772]	; (8002380 <VL53L0X_StaticInit+0x344>)
 800207a:	681c      	ldr	r4, [r3, #0]
 800207c:	f005 fce4 	bl	8007a48 <HAL_GetTick>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	4bbf      	ldr	r3, [pc, #764]	; (8002384 <VL53L0X_StaticInit+0x348>)
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	9200      	str	r2, [sp, #0]
 800208a:	4bbf      	ldr	r3, [pc, #764]	; (8002388 <VL53L0X_StaticInit+0x34c>)
 800208c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002090:	4621      	mov	r1, r4
 8002092:	2001      	movs	r0, #1
 8002094:	f005 fc2a 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002098:	2101      	movs	r1, #1
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f003 f808 	bl	80050b0 <VL53L0X_get_info_from_device>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80020ac:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80020b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80020b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d80d      	bhi.n	80020dc <VL53L0X_StaticInit+0xa0>
 80020c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d102      	bne.n	80020ce <VL53L0X_StaticInit+0x92>
		((ApertureSpads == 1) && (count > 32)) ||
 80020c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	d806      	bhi.n	80020dc <VL53L0X_StaticInit+0xa0>
 80020ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10e      	bne.n	80020f4 <VL53L0X_StaticInit+0xb8>
		((ApertureSpads == 0) && (count > 12)))
 80020d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020d8:	2b0c      	cmp	r3, #12
 80020da:	d90b      	bls.n	80020f4 <VL53L0X_StaticInit+0xb8>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80020dc:	f107 0218 	add.w	r2, r7, #24
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4619      	mov	r1, r3
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f002 fa30 	bl	800454c <VL53L0X_perform_ref_spad_management>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80020f2:	e009      	b.n	8002108 <VL53L0X_StaticInit+0xcc>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80020f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020f8:	461a      	mov	r2, r3
 80020fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f002 fc31 	bl	8004964 <VL53L0X_set_reference_spads>
 8002102:	4603      	mov	r3, r0
 8002104:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8002108:	4ba0      	ldr	r3, [pc, #640]	; (800238c <VL53L0X_StaticInit+0x350>)
 800210a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800210c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10f      	bne.n	8002134 <VL53L0X_StaticInit+0xf8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800211a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800211e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002122:	2b00      	cmp	r3, #0
 8002124:	d104      	bne.n	8002130 <VL53L0X_StaticInit+0xf4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800212c:	66bb      	str	r3, [r7, #104]	; 0x68
 800212e:	e001      	b.n	8002134 <VL53L0X_StaticInit+0xf8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8002130:	4b96      	ldr	r3, [pc, #600]	; (800238c <VL53L0X_StaticInit+0x350>)
 8002132:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002134:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002138:	2b00      	cmp	r3, #0
 800213a:	d106      	bne.n	800214a <VL53L0X_StaticInit+0x10e>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800213c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f004 fc48 	bl	80069d4 <VL53L0X_load_tuning_settings>
 8002144:	4603      	mov	r3, r0
 8002146:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800214a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10a      	bne.n	8002168 <VL53L0X_StaticInit+0x12c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8002152:	2300      	movs	r3, #0
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2304      	movs	r3, #4
 8002158:	2200      	movs	r2, #0
 800215a:	2100      	movs	r1, #0
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f001 fd4b 	bl	8003bf8 <VL53L0X_SetGpioConfig>
 8002162:	4603      	mov	r3, r0
 8002164:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002168:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800216c:	2b00      	cmp	r3, #0
 800216e:	d121      	bne.n	80021b4 <VL53L0X_StaticInit+0x178>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002170:	2201      	movs	r2, #1
 8002172:	21ff      	movs	r1, #255	; 0xff
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff fc21 	bl	80019bc <VL53L0X_WrByte>
 800217a:	4603      	mov	r3, r0
 800217c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8002180:	f107 031a 	add.w	r3, r7, #26
 8002184:	461a      	mov	r2, r3
 8002186:	2184      	movs	r1, #132	; 0x84
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff fcc3 	bl	8001b14 <VL53L0X_RdWord>
 800218e:	4603      	mov	r3, r0
 8002190:	461a      	mov	r2, r3
 8002192:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002196:	4313      	orrs	r3, r2
 8002198:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800219c:	2200      	movs	r2, #0
 800219e:	21ff      	movs	r1, #255	; 0xff
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff fc0b 	bl	80019bc <VL53L0X_WrByte>
 80021a6:	4603      	mov	r3, r0
 80021a8:	461a      	mov	r2, r3
 80021aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80021b4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80021bc:	8b7b      	ldrh	r3, [r7, #26]
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	461a      	mov	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80021c8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d108      	bne.n	80021e2 <VL53L0X_StaticInit+0x1a6>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	4619      	mov	r1, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f8dc 	bl	8002394 <VL53L0X_GetDeviceParameters>
 80021dc:	4603      	mov	r3, r0
 80021de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80021e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d110      	bne.n	800220c <VL53L0X_StaticInit+0x1d0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80021ea:	f107 0319 	add.w	r3, r7, #25
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fa3b 	bl	800266c <VL53L0X_GetFractionEnable>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80021fc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002200:	2b00      	cmp	r3, #0
 8002202:	d103      	bne.n	800220c <VL53L0X_StaticInit+0x1d0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8002204:	7e7a      	ldrb	r2, [r7, #25]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800220c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10e      	bne.n	8002232 <VL53L0X_StaticInit+0x1f6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f103 0410 	add.w	r4, r3, #16
 800221a:	f107 051c 	add.w	r5, r7, #28
 800221e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800222a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800222e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8002232:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002236:	2b00      	cmp	r3, #0
 8002238:	d111      	bne.n	800225e <VL53L0X_StaticInit+0x222>
		Status = VL53L0X_RdByte(Dev,
 800223a:	f107 0319 	add.w	r3, r7, #25
 800223e:	461a      	mov	r2, r3
 8002240:	2101      	movs	r1, #1
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff fc3c 	bl	8001ac0 <VL53L0X_RdByte>
 8002248:	4603      	mov	r3, r0
 800224a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800224e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002252:	2b00      	cmp	r3, #0
 8002254:	d103      	bne.n	800225e <VL53L0X_StaticInit+0x222>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8002256:	7e7a      	ldrb	r2, [r7, #25]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800225e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002262:	2b00      	cmp	r3, #0
 8002264:	d107      	bne.n	8002276 <VL53L0X_StaticInit+0x23a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fb4a 	bl	8002904 <VL53L0X_SetSequenceStepEnable>
 8002270:	4603      	mov	r3, r0
 8002272:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8002276:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800227a:	2b00      	cmp	r3, #0
 800227c:	d107      	bne.n	800228e <VL53L0X_StaticInit+0x252>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800227e:	2200      	movs	r2, #0
 8002280:	2102      	movs	r1, #2
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fb3e 	bl	8002904 <VL53L0X_SetSequenceStepEnable>
 8002288:	4603      	mov	r3, r0
 800228a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800228e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002292:	2b00      	cmp	r3, #0
 8002294:	d103      	bne.n	800229e <VL53L0X_StaticInit+0x262>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2203      	movs	r2, #3
 800229a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800229e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d109      	bne.n	80022ba <VL53L0X_StaticInit+0x27e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80022a6:	f107 0313 	add.w	r3, r7, #19
 80022aa:	461a      	mov	r2, r3
 80022ac:	2100      	movs	r1, #0
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fae6 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80022ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d103      	bne.n	80022ca <VL53L0X_StaticInit+0x28e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80022c2:	7cfa      	ldrb	r2, [r7, #19]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80022ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <VL53L0X_StaticInit+0x2aa>
		Status = VL53L0X_GetVcselPulsePeriod(
 80022d2:	f107 0313 	add.w	r3, r7, #19
 80022d6:	461a      	mov	r2, r3
 80022d8:	2101      	movs	r1, #1
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fad0 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80022e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d103      	bne.n	80022f6 <VL53L0X_StaticInit+0x2ba>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80022ee:	7cfa      	ldrb	r2, [r7, #19]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80022f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <VL53L0X_StaticInit+0x2d6>
		Status = get_sequence_step_timeout(
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	461a      	mov	r2, r3
 8002304:	2103      	movs	r1, #3
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f003 fcae 	bl	8005c68 <get_sequence_step_timeout>
 800230c:	4603      	mov	r3, r0
 800230e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002312:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <VL53L0X_StaticInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002322:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <VL53L0X_StaticInit+0x302>
		Status = get_sequence_step_timeout(
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	461a      	mov	r2, r3
 8002330:	2104      	movs	r1, #4
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f003 fc98 	bl	8005c68 <get_sequence_step_timeout>
 8002338:	4603      	mov	r3, r0
 800233a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800233e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002342:	2b00      	cmp	r3, #0
 8002344:	d103      	bne.n	800234e <VL53L0X_StaticInit+0x312>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			Dev,
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <VL53L0X_StaticInit+0x344>)
 8002350:	681c      	ldr	r4, [r3, #0]
 8002352:	f005 fb79 	bl	8007a48 <HAL_GetTick>
 8002356:	4603      	mov	r3, r0
 8002358:	461a      	mov	r2, r3
 800235a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <VL53L0X_StaticInit+0x348>)
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	9200      	str	r2, [sp, #0]
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <VL53L0X_StaticInit+0x354>)
 8002368:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800236c:	4621      	mov	r1, r4
 800236e:	2001      	movs	r0, #1
 8002370:	f005 fabc 	bl	80078ec <trace_print_module_function>
	return Status;
 8002374:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8002378:	4618      	mov	r0, r3
 800237a:	3770      	adds	r7, #112	; 0x70
 800237c:	46bd      	mov	sp, r7
 800237e:	bdb0      	pop	{r4, r5, r7, pc}
 8002380:	200007c8 	.word	0x200007c8
 8002384:	0800c008 	.word	0x0800c008
 8002388:	0800bd28 	.word	0x0800bd28
 800238c:	2000050c 	.word	0x2000050c
 8002390:	0800bd3c 	.word	0x0800bd3c

08002394 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8002394:	b590      	push	{r4, r7, lr}
 8002396:	b089      	sub	sp, #36	; 0x24
 8002398:	af04      	add	r7, sp, #16
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");
 80023a2:	4b56      	ldr	r3, [pc, #344]	; (80024fc <VL53L0X_GetDeviceParameters+0x168>)
 80023a4:	681c      	ldr	r4, [r3, #0]
 80023a6:	f005 fb4f 	bl	8007a48 <HAL_GetTick>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b54      	ldr	r3, [pc, #336]	; (8002500 <VL53L0X_GetDeviceParameters+0x16c>)
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	9200      	str	r2, [sp, #0]
 80023b4:	4b53      	ldr	r3, [pc, #332]	; (8002504 <VL53L0X_GetDeviceParameters+0x170>)
 80023b6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80023ba:	4621      	mov	r1, r4
 80023bc:	2001      	movs	r0, #1
 80023be:	f005 fa95 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f914 	bl	80025f4 <VL53L0X_GetDeviceMode>
 80023cc:	4603      	mov	r3, r0
 80023ce:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80023d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d107      	bne.n	80023e8 <VL53L0X_GetDeviceParameters+0x54>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	3308      	adds	r3, #8
 80023dc:	4619      	mov	r1, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fc5e 	bl	8002ca0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80023e4:	4603      	mov	r3, r0
 80023e6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80023e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <VL53L0X_GetDeviceParameters+0x62>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2200      	movs	r2, #0
 80023f4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80023f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <VL53L0X_GetDeviceParameters+0x7a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	3310      	adds	r3, #16
 8002402:	4619      	mov	r1, r3
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fce9 	bl	8002ddc <VL53L0X_GetXTalkCompensationRateMegaCps>
 800240a:	4603      	mov	r3, r0
 800240c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800240e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d107      	bne.n	8002426 <VL53L0X_GetDeviceParameters+0x92>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	3314      	adds	r3, #20
 800241a:	4619      	mov	r1, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff fbfd 	bl	8001c1c <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8002422:	4603      	mov	r3, r0
 8002424:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8002426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d134      	bne.n	8002498 <VL53L0X_GetDeviceParameters+0x104>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	e02a      	b.n	800248a <VL53L0X_GetDeviceParameters+0xf6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8002434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d12a      	bne.n	8002492 <VL53L0X_GetDeviceParameters+0xfe>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	b299      	uxth	r1, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	3308      	adds	r3, #8
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	4413      	add	r3, r2
 800244a:	3304      	adds	r3, #4
 800244c:	461a      	mov	r2, r3
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 feb2 	bl	80031b8 <VL53L0X_GetLimitCheckValue>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	4313      	orrs	r3, r2
 800245c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d117      	bne.n	8002496 <VL53L0X_GetDeviceParameters+0x102>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	b299      	uxth	r1, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3318      	adds	r3, #24
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	4413      	add	r3, r2
 8002472:	461a      	mov	r2, r3
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fdc7 	bl	8003008 <VL53L0X_GetLimitCheckEnable>
 800247a:	4603      	mov	r3, r0
 800247c:	461a      	mov	r2, r3
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	4313      	orrs	r3, r2
 8002482:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	3301      	adds	r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b05      	cmp	r3, #5
 800248e:	ddd1      	ble.n	8002434 <VL53L0X_GetDeviceParameters+0xa0>
 8002490:	e002      	b.n	8002498 <VL53L0X_GetDeviceParameters+0x104>
				break;
 8002492:	bf00      	nop
 8002494:	e000      	b.n	8002498 <VL53L0X_GetDeviceParameters+0x104>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8002496:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d107      	bne.n	80024b0 <VL53L0X_GetDeviceParameters+0x11c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	333c      	adds	r3, #60	; 0x3c
 80024a4:	4619      	mov	r1, r3
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 ff3e 	bl	8003328 <VL53L0X_GetWrapAroundCheckEnable>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80024b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d107      	bne.n	80024c8 <VL53L0X_GetDeviceParameters+0x134>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	3304      	adds	r3, #4
 80024bc:	4619      	mov	r1, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f95c 	bl	800277c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80024c4:	4603      	mov	r3, r0
 80024c6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <VL53L0X_GetDeviceParameters+0x168>)
 80024ca:	681c      	ldr	r4, [r3, #0]
 80024cc:	f005 fabc 	bl	8007a48 <HAL_GetTick>
 80024d0:	4603      	mov	r3, r0
 80024d2:	461a      	mov	r2, r3
 80024d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d8:	9302      	str	r3, [sp, #8]
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <VL53L0X_GetDeviceParameters+0x16c>)
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	9200      	str	r2, [sp, #0]
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <VL53L0X_GetDeviceParameters+0x174>)
 80024e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80024e6:	4621      	mov	r1, r4
 80024e8:	2001      	movs	r0, #1
 80024ea:	f005 f9ff 	bl	80078ec <trace_print_module_function>
	return Status;
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd90      	pop	{r4, r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200007c8 	.word	0x200007c8
 8002500:	0800c068 	.word	0x0800c068
 8002504:	0800bd28 	.word	0x0800bd28
 8002508:	0800bd3c 	.word	0x0800bd3c

0800250c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af04      	add	r7, sp, #16
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);
 800251c:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <VL53L0X_SetDeviceMode+0xd8>)
 800251e:	681c      	ldr	r4, [r3, #0]
 8002520:	f005 fa92 	bl	8007a48 <HAL_GetTick>
 8002524:	4603      	mov	r3, r0
 8002526:	461a      	mov	r2, r3
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	9302      	str	r3, [sp, #8]
 800252c:	4b2e      	ldr	r3, [pc, #184]	; (80025e8 <VL53L0X_SetDeviceMode+0xdc>)
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	9200      	str	r2, [sp, #0]
 8002532:	4b2e      	ldr	r3, [pc, #184]	; (80025ec <VL53L0X_SetDeviceMode+0xe0>)
 8002534:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002538:	4621      	mov	r1, r4
 800253a:	2001      	movs	r0, #1
 800253c:	f005 f9d6 	bl	80078ec <trace_print_module_function>

	switch (DeviceMode) {
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	2b15      	cmp	r3, #21
 8002544:	d832      	bhi.n	80025ac <VL53L0X_SetDeviceMode+0xa0>
 8002546:	a201      	add	r2, pc, #4	; (adr r2, 800254c <VL53L0X_SetDeviceMode+0x40>)
 8002548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254c:	080025a5 	.word	0x080025a5
 8002550:	080025a5 	.word	0x080025a5
 8002554:	080025ad 	.word	0x080025ad
 8002558:	080025a5 	.word	0x080025a5
 800255c:	080025ad 	.word	0x080025ad
 8002560:	080025ad 	.word	0x080025ad
 8002564:	080025ad 	.word	0x080025ad
 8002568:	080025ad 	.word	0x080025ad
 800256c:	080025ad 	.word	0x080025ad
 8002570:	080025ad 	.word	0x080025ad
 8002574:	080025ad 	.word	0x080025ad
 8002578:	080025ad 	.word	0x080025ad
 800257c:	080025ad 	.word	0x080025ad
 8002580:	080025ad 	.word	0x080025ad
 8002584:	080025ad 	.word	0x080025ad
 8002588:	080025ad 	.word	0x080025ad
 800258c:	080025ad 	.word	0x080025ad
 8002590:	080025ad 	.word	0x080025ad
 8002594:	080025ad 	.word	0x080025ad
 8002598:	080025ad 	.word	0x080025ad
 800259c:	080025a5 	.word	0x080025a5
 80025a0:	080025a5 	.word	0x080025a5
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	78fa      	ldrb	r2, [r7, #3]
 80025a8:	741a      	strb	r2, [r3, #16]
		break;
 80025aa:	e001      	b.n	80025b0 <VL53L0X_SetDeviceMode+0xa4>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80025ac:	23f8      	movs	r3, #248	; 0xf8
 80025ae:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <VL53L0X_SetDeviceMode+0xd8>)
 80025b2:	681c      	ldr	r4, [r3, #0]
 80025b4:	f005 fa48 	bl	8007a48 <HAL_GetTick>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c0:	9302      	str	r3, [sp, #8]
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <VL53L0X_SetDeviceMode+0xdc>)
 80025c4:	9301      	str	r3, [sp, #4]
 80025c6:	9200      	str	r2, [sp, #0]
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <VL53L0X_SetDeviceMode+0xe4>)
 80025ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80025ce:	4621      	mov	r1, r4
 80025d0:	2001      	movs	r0, #1
 80025d2:	f005 f98b 	bl	80078ec <trace_print_module_function>
	return Status;
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd90      	pop	{r4, r7, pc}
 80025e2:	bf00      	nop
 80025e4:	200007c8 	.word	0x200007c8
 80025e8:	0800c084 	.word	0x0800c084
 80025ec:	0800bd4c 	.word	0x0800bd4c
 80025f0:	0800bd3c 	.word	0x0800bd3c

080025f4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b089      	sub	sp, #36	; 0x24
 80025f8:	af04      	add	r7, sp, #16
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8002602:	4b16      	ldr	r3, [pc, #88]	; (800265c <VL53L0X_GetDeviceMode+0x68>)
 8002604:	681c      	ldr	r4, [r3, #0]
 8002606:	f005 fa1f 	bl	8007a48 <HAL_GetTick>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <VL53L0X_GetDeviceMode+0x6c>)
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	9200      	str	r2, [sp, #0]
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <VL53L0X_GetDeviceMode+0x70>)
 8002616:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800261a:	4621      	mov	r1, r4
 800261c:	2001      	movs	r0, #1
 800261e:	f005 f965 	bl	80078ec <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	7c1a      	ldrb	r2, [r3, #16]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <VL53L0X_GetDeviceMode+0x68>)
 800262c:	681c      	ldr	r4, [r3, #0]
 800262e:	f005 fa0b 	bl	8007a48 <HAL_GetTick>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263a:	9302      	str	r3, [sp, #8]
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <VL53L0X_GetDeviceMode+0x6c>)
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	9200      	str	r2, [sp, #0]
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <VL53L0X_GetDeviceMode+0x74>)
 8002644:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002648:	4621      	mov	r1, r4
 800264a:	2001      	movs	r0, #1
 800264c:	f005 f94e 	bl	80078ec <trace_print_module_function>
	return Status;
 8002650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	bd90      	pop	{r4, r7, pc}
 800265c:	200007c8 	.word	0x200007c8
 8002660:	0800c09c 	.word	0x0800c09c
 8002664:	0800bd28 	.word	0x0800bd28
 8002668:	0800bd3c 	.word	0x0800bd3c

0800266c <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b089      	sub	sp, #36	; 0x24
 8002670:	af04      	add	r7, sp, #16
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 800267a:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <VL53L0X_GetFractionEnable+0x84>)
 800267c:	681c      	ldr	r4, [r3, #0]
 800267e:	f005 f9e3 	bl	8007a48 <HAL_GetTick>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <VL53L0X_GetFractionEnable+0x88>)
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	9200      	str	r2, [sp, #0]
 800268c:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <VL53L0X_GetFractionEnable+0x8c>)
 800268e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002692:	4621      	mov	r1, r4
 8002694:	2001      	movs	r0, #1
 8002696:	f005 f929 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	2109      	movs	r1, #9
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fa0e 	bl	8001ac0 <VL53L0X_RdByte>
 80026a4:	4603      	mov	r3, r0
 80026a6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80026a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <VL53L0X_GetFractionEnable+0x52>
		*pEnabled = (*pEnabled & 1);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <VL53L0X_GetFractionEnable+0x84>)
 80026c0:	681c      	ldr	r4, [r3, #0]
 80026c2:	f005 f9c1 	bl	8007a48 <HAL_GetTick>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ce:	9302      	str	r3, [sp, #8]
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <VL53L0X_GetFractionEnable+0x88>)
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	9200      	str	r2, [sp, #0]
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <VL53L0X_GetFractionEnable+0x90>)
 80026d8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80026dc:	4621      	mov	r1, r4
 80026de:	2001      	movs	r0, #1
 80026e0:	f005 f904 	bl	80078ec <trace_print_module_function>
	return Status;
 80026e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd90      	pop	{r4, r7, pc}
 80026f0:	200007c8 	.word	0x200007c8
 80026f4:	0800c0d4 	.word	0x0800c0d4
 80026f8:	0800bd28 	.word	0x0800bd28
 80026fc:	0800bd3c 	.word	0x0800bd3c

08002700 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af04      	add	r7, sp, #16
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 800270e:	4b17      	ldr	r3, [pc, #92]	; (800276c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x6c>)
 8002710:	681c      	ldr	r4, [r3, #0]
 8002712:	f005 f999 	bl	8007a48 <HAL_GetTick>
 8002716:	4603      	mov	r3, r0
 8002718:	461a      	mov	r2, r3
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x70>)
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	9200      	str	r2, [sp, #0]
 8002720:	4b14      	ldr	r3, [pc, #80]	; (8002774 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x74>)
 8002722:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002726:	4621      	mov	r1, r4
 8002728:	2001      	movs	r0, #1
 800272a:	f005 f8df 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800272e:	6839      	ldr	r1, [r7, #0]
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f003 ff2d 	bl	8006590 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8002736:	4603      	mov	r3, r0
 8002738:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
 800273a:	4b0c      	ldr	r3, [pc, #48]	; (800276c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x6c>)
 800273c:	681c      	ldr	r4, [r3, #0]
 800273e:	f005 f983 	bl	8007a48 <HAL_GetTick>
 8002742:	4603      	mov	r3, r0
 8002744:	461a      	mov	r2, r3
 8002746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274a:	9302      	str	r3, [sp, #8]
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x70>)
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	9200      	str	r2, [sp, #0]
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x78>)
 8002754:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002758:	4621      	mov	r1, r4
 800275a:	2001      	movs	r0, #1
 800275c:	f005 f8c6 	bl	80078ec <trace_print_module_function>

	return Status;
 8002760:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bd90      	pop	{r4, r7, pc}
 800276c:	200007c8 	.word	0x200007c8
 8002770:	0800c128 	.word	0x0800c128
 8002774:	0800bd28 	.word	0x0800bd28
 8002778:	0800bd3c 	.word	0x0800bd3c

0800277c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af04      	add	r7, sp, #16
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002786:	2300      	movs	r3, #0
 8002788:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x6c>)
 800278c:	681c      	ldr	r4, [r3, #0]
 800278e:	f005 f95b 	bl	8007a48 <HAL_GetTick>
 8002792:	4603      	mov	r3, r0
 8002794:	461a      	mov	r2, r3
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x70>)
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	9200      	str	r2, [sp, #0]
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x74>)
 800279e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80027a2:	4621      	mov	r1, r4
 80027a4:	2001      	movs	r0, #1
 80027a6:	f005 f8a1 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80027aa:	6839      	ldr	r1, [r7, #0]
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f004 f821 	bl	80067f4 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80027b2:	4603      	mov	r3, r0
 80027b4:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
 80027b6:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x6c>)
 80027b8:	681c      	ldr	r4, [r3, #0]
 80027ba:	f005 f945 	bl	8007a48 <HAL_GetTick>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c6:	9302      	str	r3, [sp, #8]
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x70>)
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	9200      	str	r2, [sp, #0]
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x78>)
 80027d0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80027d4:	4621      	mov	r1, r4
 80027d6:	2001      	movs	r0, #1
 80027d8:	f005 f888 	bl	80078ec <trace_print_module_function>
	return Status;
 80027dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd90      	pop	{r4, r7, pc}
 80027e8:	200007c8 	.word	0x200007c8
 80027ec:	0800c158 	.word	0x0800c158
 80027f0:	0800bd28 	.word	0x0800bd28
 80027f4:	0800bd3c 	.word	0x0800bd3c

080027f8 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af04      	add	r7, sp, #16
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	70fb      	strb	r3, [r7, #3]
 8002804:	4613      	mov	r3, r2
 8002806:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 800280c:	4b18      	ldr	r3, [pc, #96]	; (8002870 <VL53L0X_SetVcselPulsePeriod+0x78>)
 800280e:	681c      	ldr	r4, [r3, #0]
 8002810:	f005 f91a 	bl	8007a48 <HAL_GetTick>
 8002814:	4603      	mov	r3, r0
 8002816:	461a      	mov	r2, r3
 8002818:	4b16      	ldr	r3, [pc, #88]	; (8002874 <VL53L0X_SetVcselPulsePeriod+0x7c>)
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	9200      	str	r2, [sp, #0]
 800281e:	4b16      	ldr	r3, [pc, #88]	; (8002878 <VL53L0X_SetVcselPulsePeriod+0x80>)
 8002820:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002824:	4621      	mov	r1, r4
 8002826:	2001      	movs	r0, #1
 8002828:	f005 f860 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800282c:	78ba      	ldrb	r2, [r7, #2]
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	4619      	mov	r1, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f003 fbeb 	bl	800600e <VL53L0X_set_vcsel_pulse_period>
 8002838:	4603      	mov	r3, r0
 800283a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <VL53L0X_SetVcselPulsePeriod+0x78>)
 800283e:	681c      	ldr	r4, [r3, #0]
 8002840:	f005 f902 	bl	8007a48 <HAL_GetTick>
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284c:	9302      	str	r3, [sp, #8]
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <VL53L0X_SetVcselPulsePeriod+0x7c>)
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	9200      	str	r2, [sp, #0]
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <VL53L0X_SetVcselPulsePeriod+0x84>)
 8002856:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800285a:	4621      	mov	r1, r4
 800285c:	2001      	movs	r0, #1
 800285e:	f005 f845 	bl	80078ec <trace_print_module_function>
	return Status;
 8002862:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}
 800286e:	bf00      	nop
 8002870:	200007c8 	.word	0x200007c8
 8002874:	0800c188 	.word	0x0800c188
 8002878:	0800bd28 	.word	0x0800bd28
 800287c:	0800bd3c 	.word	0x0800bd3c

08002880 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b08b      	sub	sp, #44	; 0x2c
 8002884:	af04      	add	r7, sp, #16
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	460b      	mov	r3, r1
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800288e:	2300      	movs	r3, #0
 8002890:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <VL53L0X_GetVcselPulsePeriod+0x74>)
 8002894:	681c      	ldr	r4, [r3, #0]
 8002896:	f005 f8d7 	bl	8007a48 <HAL_GetTick>
 800289a:	4603      	mov	r3, r0
 800289c:	461a      	mov	r2, r3
 800289e:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <VL53L0X_GetVcselPulsePeriod+0x78>)
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	9200      	str	r2, [sp, #0]
 80028a4:	4b15      	ldr	r3, [pc, #84]	; (80028fc <VL53L0X_GetVcselPulsePeriod+0x7c>)
 80028a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80028aa:	4621      	mov	r1, r4
 80028ac:	2001      	movs	r0, #1
 80028ae:	f005 f81d 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80028b2:	7afb      	ldrb	r3, [r7, #11]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	4619      	mov	r1, r3
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f003 fe31 	bl	8006520 <VL53L0X_get_vcsel_pulse_period>
 80028be:	4603      	mov	r3, r0
 80028c0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <VL53L0X_GetVcselPulsePeriod+0x74>)
 80028c4:	681c      	ldr	r4, [r3, #0]
 80028c6:	f005 f8bf 	bl	8007a48 <HAL_GetTick>
 80028ca:	4603      	mov	r3, r0
 80028cc:	461a      	mov	r2, r3
 80028ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028d2:	9302      	str	r3, [sp, #8]
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <VL53L0X_GetVcselPulsePeriod+0x78>)
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	9200      	str	r2, [sp, #0]
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <VL53L0X_GetVcselPulsePeriod+0x80>)
 80028dc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80028e0:	4621      	mov	r1, r4
 80028e2:	2001      	movs	r0, #1
 80028e4:	f005 f802 	bl	80078ec <trace_print_module_function>
	return Status;
 80028e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	371c      	adds	r7, #28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd90      	pop	{r4, r7, pc}
 80028f4:	200007c8 	.word	0x200007c8
 80028f8:	0800c1a4 	.word	0x0800c1a4
 80028fc:	0800bd28 	.word	0x0800bd28
 8002900:	0800bd3c 	.word	0x0800bd3c

08002904 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b08b      	sub	sp, #44	; 0x2c
 8002908:	af04      	add	r7, sp, #16
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	70fb      	strb	r3, [r7, #3]
 8002910:	4613      	mov	r3, r2
 8002912:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002914:	2300      	movs	r3, #0
 8002916:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");
 8002920:	4b5b      	ldr	r3, [pc, #364]	; (8002a90 <VL53L0X_SetSequenceStepEnable+0x18c>)
 8002922:	681c      	ldr	r4, [r3, #0]
 8002924:	f005 f890 	bl	8007a48 <HAL_GetTick>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <VL53L0X_SetSequenceStepEnable+0x190>)
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	9200      	str	r2, [sp, #0]
 8002932:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <VL53L0X_SetSequenceStepEnable+0x194>)
 8002934:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002938:	4621      	mov	r1, r4
 800293a:	2001      	movs	r0, #1
 800293c:	f004 ffd6 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002940:	f107 030f 	add.w	r3, r7, #15
 8002944:	461a      	mov	r2, r3
 8002946:	2101      	movs	r1, #1
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff f8b9 	bl	8001ac0 <VL53L0X_RdByte>
 800294e:	4603      	mov	r3, r0
 8002950:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8002956:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d15a      	bne.n	8002a14 <VL53L0X_SetSequenceStepEnable+0x110>
		if (SequenceStepEnabled == 1) {
 800295e:	78bb      	ldrb	r3, [r7, #2]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d12b      	bne.n	80029bc <VL53L0X_SetSequenceStepEnable+0xb8>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8002964:	78fb      	ldrb	r3, [r7, #3]
 8002966:	2b04      	cmp	r3, #4
 8002968:	d825      	bhi.n	80029b6 <VL53L0X_SetSequenceStepEnable+0xb2>
 800296a:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <VL53L0X_SetSequenceStepEnable+0x6c>)
 800296c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002970:	08002985 	.word	0x08002985
 8002974:	0800298f 	.word	0x0800298f
 8002978:	08002999 	.word	0x08002999
 800297c:	080029a3 	.word	0x080029a3
 8002980:	080029ad 	.word	0x080029ad
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8002984:	7dbb      	ldrb	r3, [r7, #22]
 8002986:	f043 0310 	orr.w	r3, r3, #16
 800298a:	75bb      	strb	r3, [r7, #22]
				break;
 800298c:	e043      	b.n	8002a16 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800298e:	7dbb      	ldrb	r3, [r7, #22]
 8002990:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002994:	75bb      	strb	r3, [r7, #22]
				break;
 8002996:	e03e      	b.n	8002a16 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8002998:	7dbb      	ldrb	r3, [r7, #22]
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	75bb      	strb	r3, [r7, #22]
				break;
 80029a0:	e039      	b.n	8002a16 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80029a2:	7dbb      	ldrb	r3, [r7, #22]
 80029a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a8:	75bb      	strb	r3, [r7, #22]
				break;
 80029aa:	e034      	b.n	8002a16 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80029ac:	7dbb      	ldrb	r3, [r7, #22]
 80029ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029b2:	75bb      	strb	r3, [r7, #22]
				break;
 80029b4:	e02f      	b.n	8002a16 <VL53L0X_SetSequenceStepEnable+0x112>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80029b6:	23fc      	movs	r3, #252	; 0xfc
 80029b8:	75fb      	strb	r3, [r7, #23]
 80029ba:	e02c      	b.n	8002a16 <VL53L0X_SetSequenceStepEnable+0x112>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d825      	bhi.n	8002a0e <VL53L0X_SetSequenceStepEnable+0x10a>
 80029c2:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <VL53L0X_SetSequenceStepEnable+0xc4>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	080029dd 	.word	0x080029dd
 80029cc:	080029e7 	.word	0x080029e7
 80029d0:	080029f1 	.word	0x080029f1
 80029d4:	080029fb 	.word	0x080029fb
 80029d8:	08002a05 	.word	0x08002a05
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80029dc:	7dbb      	ldrb	r3, [r7, #22]
 80029de:	f023 0310 	bic.w	r3, r3, #16
 80029e2:	75bb      	strb	r3, [r7, #22]
				break;
 80029e4:	e017      	b.n	8002a16 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80029e6:	7dbb      	ldrb	r3, [r7, #22]
 80029e8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80029ec:	75bb      	strb	r3, [r7, #22]
				break;
 80029ee:	e012      	b.n	8002a16 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80029f0:	7dbb      	ldrb	r3, [r7, #22]
 80029f2:	f023 0304 	bic.w	r3, r3, #4
 80029f6:	75bb      	strb	r3, [r7, #22]
				break;
 80029f8:	e00d      	b.n	8002a16 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80029fa:	7dbb      	ldrb	r3, [r7, #22]
 80029fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a00:	75bb      	strb	r3, [r7, #22]
				break;
 8002a02:	e008      	b.n	8002a16 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8002a04:	7dbb      	ldrb	r3, [r7, #22]
 8002a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a0a:	75bb      	strb	r3, [r7, #22]
				break;
 8002a0c:	e003      	b.n	8002a16 <VL53L0X_SetSequenceStepEnable+0x112>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002a0e:	23fc      	movs	r3, #252	; 0xfc
 8002a10:	75fb      	strb	r3, [r7, #23]
 8002a12:	e000      	b.n	8002a16 <VL53L0X_SetSequenceStepEnable+0x112>
			}
		}
 8002a14:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	7dba      	ldrb	r2, [r7, #22]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d01e      	beq.n	8002a5c <VL53L0X_SetSequenceStepEnable+0x158>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8002a1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d107      	bne.n	8002a36 <VL53L0X_SetSequenceStepEnable+0x132>
			Status = VL53L0X_WrByte(Dev,
 8002a26:	7dbb      	ldrb	r3, [r7, #22]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7fe ffc5 	bl	80019bc <VL53L0X_WrByte>
 8002a32:	4603      	mov	r3, r0
 8002a34:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8002a36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d103      	bne.n	8002a46 <VL53L0X_SetSequenceStepEnable+0x142>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7dba      	ldrb	r2, [r7, #22]
 8002a42:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8002a46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <VL53L0X_SetSequenceStepEnable+0x158>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8002a54:	6939      	ldr	r1, [r7, #16]
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff fe52 	bl	8002700 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
				MeasurementTimingBudgetMicroSeconds);
		}
	}

	LOG_FUNCTION_END(Status);
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <VL53L0X_SetSequenceStepEnable+0x18c>)
 8002a5e:	681c      	ldr	r4, [r3, #0]
 8002a60:	f004 fff2 	bl	8007a48 <HAL_GetTick>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a6c:	9302      	str	r3, [sp, #8]
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <VL53L0X_SetSequenceStepEnable+0x190>)
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	9200      	str	r2, [sp, #0]
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <VL53L0X_SetSequenceStepEnable+0x198>)
 8002a76:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	f004 ff35 	bl	80078ec <trace_print_module_function>

	return Status;
 8002a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd90      	pop	{r4, r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200007c8 	.word	0x200007c8
 8002a94:	0800c1c0 	.word	0x0800c1c0
 8002a98:	0800bd28 	.word	0x0800bd28
 8002a9c:	0800bd3c 	.word	0x0800bd3c

08002aa0 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b08b      	sub	sp, #44	; 0x2c
 8002aa4:	af04      	add	r7, sp, #16
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	72fb      	strb	r3, [r7, #11]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");
 8002abc:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <sequence_step_enabled+0xe8>)
 8002abe:	681c      	ldr	r4, [r3, #0]
 8002ac0:	f004 ffc2 	bl	8007a48 <HAL_GetTick>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <sequence_step_enabled+0xec>)
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	9200      	str	r2, [sp, #0]
 8002ace:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <sequence_step_enabled+0xf0>)
 8002ad0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f004 ff08 	bl	80078ec <trace_print_module_function>

	switch (SequenceStepId) {
 8002adc:	7afb      	ldrb	r3, [r7, #11]
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d836      	bhi.n	8002b50 <sequence_step_enabled+0xb0>
 8002ae2:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <sequence_step_enabled+0x48>)
 8002ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae8:	08002afd 	.word	0x08002afd
 8002aec:	08002b0f 	.word	0x08002b0f
 8002af0:	08002b21 	.word	0x08002b21
 8002af4:	08002b33 	.word	0x08002b33
 8002af8:	08002b45 	.word	0x08002b45
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8002afc:	7abb      	ldrb	r3, [r7, #10]
 8002afe:	111b      	asrs	r3, r3, #4
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	701a      	strb	r2, [r3, #0]
		break;
 8002b0c:	e022      	b.n	8002b54 <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8002b0e:	7abb      	ldrb	r3, [r7, #10]
 8002b10:	10db      	asrs	r3, r3, #3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	701a      	strb	r2, [r3, #0]
		break;
 8002b1e:	e019      	b.n	8002b54 <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8002b20:	7abb      	ldrb	r3, [r7, #10]
 8002b22:	109b      	asrs	r3, r3, #2
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	701a      	strb	r2, [r3, #0]
		break;
 8002b30:	e010      	b.n	8002b54 <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8002b32:	7abb      	ldrb	r3, [r7, #10]
 8002b34:	119b      	asrs	r3, r3, #6
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	701a      	strb	r2, [r3, #0]
		break;
 8002b42:	e007      	b.n	8002b54 <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8002b44:	7abb      	ldrb	r3, [r7, #10]
 8002b46:	09db      	lsrs	r3, r3, #7
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	701a      	strb	r2, [r3, #0]
		break;
 8002b4e:	e001      	b.n	8002b54 <sequence_step_enabled+0xb4>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002b50:	23fc      	movs	r3, #252	; 0xfc
 8002b52:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <sequence_step_enabled+0xe8>)
 8002b56:	681c      	ldr	r4, [r3, #0]
 8002b58:	f004 ff76 	bl	8007a48 <HAL_GetTick>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b64:	9302      	str	r3, [sp, #8]
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <sequence_step_enabled+0xec>)
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	9200      	str	r2, [sp, #0]
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <sequence_step_enabled+0xf4>)
 8002b6e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002b72:	4621      	mov	r1, r4
 8002b74:	2001      	movs	r0, #1
 8002b76:	f004 feb9 	bl	80078ec <trace_print_module_function>
	return Status;
 8002b7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd90      	pop	{r4, r7, pc}
 8002b86:	bf00      	nop
 8002b88:	200007c8 	.word	0x200007c8
 8002b8c:	0800c1e0 	.word	0x0800c1e0
 8002b90:	0800bd28 	.word	0x0800bd28
 8002b94:	0800bd3c 	.word	0x0800bd3c

08002b98 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af04      	add	r7, sp, #16
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");
 8002baa:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <VL53L0X_GetSequenceStepEnables+0xf8>)
 8002bac:	681c      	ldr	r4, [r3, #0]
 8002bae:	f004 ff4b 	bl	8007a48 <HAL_GetTick>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b37      	ldr	r3, [pc, #220]	; (8002c94 <VL53L0X_GetSequenceStepEnables+0xfc>)
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	9200      	str	r2, [sp, #0]
 8002bbc:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <VL53L0X_GetSequenceStepEnables+0x100>)
 8002bbe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	f004 fe91 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002bca:	f107 030e 	add.w	r3, r7, #14
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fe ff74 	bl	8001ac0 <VL53L0X_RdByte>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8002bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d107      	bne.n	8002bf4 <VL53L0X_GetSequenceStepEnables+0x5c>
		Status = sequence_step_enabled(Dev,
 8002be4:	7bba      	ldrb	r2, [r7, #14]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2100      	movs	r1, #0
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ff58 	bl	8002aa0 <sequence_step_enabled>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d108      	bne.n	8002c0e <VL53L0X_GetSequenceStepEnables+0x76>
		Status = sequence_step_enabled(Dev,
 8002bfc:	7bba      	ldrb	r2, [r7, #14]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	3302      	adds	r3, #2
 8002c02:	2101      	movs	r1, #1
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff ff4b 	bl	8002aa0 <sequence_step_enabled>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d108      	bne.n	8002c28 <VL53L0X_GetSequenceStepEnables+0x90>
		Status = sequence_step_enabled(Dev,
 8002c16:	7bba      	ldrb	r2, [r7, #14]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ff3e 	bl	8002aa0 <sequence_step_enabled>
 8002c24:	4603      	mov	r3, r0
 8002c26:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d108      	bne.n	8002c42 <VL53L0X_GetSequenceStepEnables+0xaa>
		Status = sequence_step_enabled(Dev,
 8002c30:	7bba      	ldrb	r2, [r7, #14]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	3303      	adds	r3, #3
 8002c36:	2103      	movs	r1, #3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ff31 	bl	8002aa0 <sequence_step_enabled>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d108      	bne.n	8002c5c <VL53L0X_GetSequenceStepEnables+0xc4>
		Status = sequence_step_enabled(Dev,
 8002c4a:	7bba      	ldrb	r2, [r7, #14]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	2104      	movs	r1, #4
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ff24 	bl	8002aa0 <sequence_step_enabled>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <VL53L0X_GetSequenceStepEnables+0xf8>)
 8002c5e:	681c      	ldr	r4, [r3, #0]
 8002c60:	f004 fef2 	bl	8007a48 <HAL_GetTick>
 8002c64:	4603      	mov	r3, r0
 8002c66:	461a      	mov	r2, r3
 8002c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6c:	9302      	str	r3, [sp, #8]
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <VL53L0X_GetSequenceStepEnables+0xfc>)
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	9200      	str	r2, [sp, #0]
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <VL53L0X_GetSequenceStepEnables+0x104>)
 8002c76:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	f004 fe35 	bl	80078ec <trace_print_module_function>
	return Status;
 8002c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd90      	pop	{r4, r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200007c8 	.word	0x200007c8
 8002c94:	0800c218 	.word	0x0800c218
 8002c98:	0800bd28 	.word	0x0800bd28
 8002c9c:	0800bd3c 	.word	0x0800bd3c

08002ca0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b089      	sub	sp, #36	; 0x24
 8002ca4:	af04      	add	r7, sp, #16
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");
 8002cae:	4b28      	ldr	r3, [pc, #160]	; (8002d50 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb0>)
 8002cb0:	681c      	ldr	r4, [r3, #0]
 8002cb2:	f004 fec9 	bl	8007a48 <HAL_GetTick>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb4>)
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	9200      	str	r2, [sp, #0]
 8002cc0:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb8>)
 8002cc2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	2001      	movs	r0, #1
 8002cca:	f004 fe0f 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8002cce:	f107 030c 	add.w	r3, r7, #12
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	21f8      	movs	r1, #248	; 0xf8
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe ff1c 	bl	8001b14 <VL53L0X_RdWord>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8002ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d108      	bne.n	8002cfa <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5a>
		Status = VL53L0X_RdDWord(Dev,
 8002ce8:	f107 0308 	add.w	r3, r7, #8
 8002cec:	461a      	mov	r2, r3
 8002cee:	2104      	movs	r1, #4
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7fe ff47 	bl	8001b84 <VL53L0X_RdDWord>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10c      	bne.n	8002d1c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7c>
		if (osc_calibrate_val != 0) {
 8002d02:	89bb      	ldrh	r3, [r7, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x74>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	89ba      	ldrh	r2, [r7, #12]
 8002d0c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb0>)
 8002d1e:	681c      	ldr	r4, [r3, #0]
 8002d20:	f004 fe92 	bl	8007a48 <HAL_GetTick>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461a      	mov	r2, r3
 8002d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2c:	9302      	str	r3, [sp, #8]
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb4>)
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	9200      	str	r2, [sp, #0]
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xbc>)
 8002d36:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002d3a:	4621      	mov	r1, r4
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	f004 fdd5 	bl	80078ec <trace_print_module_function>
	return Status;
 8002d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd90      	pop	{r4, r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	200007c8 	.word	0x200007c8
 8002d54:	0800c2ec 	.word	0x0800c2ec
 8002d58:	0800bd28 	.word	0x0800bd28
 8002d5c:	0800bd3c 	.word	0x0800bd3c

08002d60 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b089      	sub	sp, #36	; 0x24
 8002d64:	af04      	add	r7, sp, #16
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");
 8002d6e:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <VL53L0X_GetXTalkCompensationEnable+0x6c>)
 8002d70:	681c      	ldr	r4, [r3, #0]
 8002d72:	f004 fe69 	bl	8007a48 <HAL_GetTick>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <VL53L0X_GetXTalkCompensationEnable+0x70>)
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	9200      	str	r2, [sp, #0]
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <VL53L0X_GetXTalkCompensationEnable+0x74>)
 8002d82:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002d86:	4621      	mov	r1, r4
 8002d88:	2001      	movs	r0, #1
 8002d8a:	f004 fdaf 	bl	80078ec <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	7f1b      	ldrb	r3, [r3, #28]
 8002d92:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	7bba      	ldrb	r2, [r7, #14]
 8002d98:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <VL53L0X_GetXTalkCompensationEnable+0x6c>)
 8002d9c:	681c      	ldr	r4, [r3, #0]
 8002d9e:	f004 fe53 	bl	8007a48 <HAL_GetTick>
 8002da2:	4603      	mov	r3, r0
 8002da4:	461a      	mov	r2, r3
 8002da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002daa:	9302      	str	r3, [sp, #8]
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <VL53L0X_GetXTalkCompensationEnable+0x70>)
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	9200      	str	r2, [sp, #0]
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <VL53L0X_GetXTalkCompensationEnable+0x78>)
 8002db4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002db8:	4621      	mov	r1, r4
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f004 fd96 	bl	80078ec <trace_print_module_function>
	return Status;
 8002dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd90      	pop	{r4, r7, pc}
 8002dcc:	200007c8 	.word	0x200007c8
 8002dd0:	0800c340 	.word	0x0800c340
 8002dd4:	0800bd28 	.word	0x0800bd28
 8002dd8:	0800bd3c 	.word	0x0800bd3c

08002ddc <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b08b      	sub	sp, #44	; 0x2c
 8002de0:	af04      	add	r7, sp, #16
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");
 8002dea:	4b27      	ldr	r3, [pc, #156]	; (8002e88 <VL53L0X_GetXTalkCompensationRateMegaCps+0xac>)
 8002dec:	681c      	ldr	r4, [r3, #0]
 8002dee:	f004 fe2b 	bl	8007a48 <HAL_GetTick>
 8002df2:	4603      	mov	r3, r0
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <VL53L0X_GetXTalkCompensationRateMegaCps+0xb0>)
 8002df8:	9301      	str	r3, [sp, #4]
 8002dfa:	9200      	str	r2, [sp, #0]
 8002dfc:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb4>)
 8002dfe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002e02:	4621      	mov	r1, r4
 8002e04:	2001      	movs	r0, #1
 8002e06:	f004 fd71 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_RdWord(Dev,
 8002e0a:	f107 030e 	add.w	r3, r7, #14
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2120      	movs	r1, #32
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe fe7e 	bl	8001b14 <VL53L0X_RdWord>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8002e1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d118      	bne.n	8002e56 <VL53L0X_GetXTalkCompensationRateMegaCps+0x7a>
		if (Value == 0) {
 8002e24:	89fb      	ldrh	r3, [r7, #14]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <VL53L0X_GetXTalkCompensationRateMegaCps+0x62>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	771a      	strb	r2, [r3, #28]
 8002e3c:	e00b      	b.n	8002e56 <VL53L0X_GetXTalkCompensationRateMegaCps+0x7a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8002e3e:	89fb      	ldrh	r3, [r7, #14]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
 8002e56:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <VL53L0X_GetXTalkCompensationRateMegaCps+0xac>)
 8002e58:	681c      	ldr	r4, [r3, #0]
 8002e5a:	f004 fdf5 	bl	8007a48 <HAL_GetTick>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	461a      	mov	r2, r3
 8002e62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e66:	9302      	str	r3, [sp, #8]
 8002e68:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <VL53L0X_GetXTalkCompensationRateMegaCps+0xb0>)
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	9200      	str	r2, [sp, #0]
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb8>)
 8002e70:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002e74:	4621      	mov	r1, r4
 8002e76:	2001      	movs	r0, #1
 8002e78:	f004 fd38 	bl	80078ec <trace_print_module_function>
	return Status;
 8002e7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd90      	pop	{r4, r7, pc}
 8002e88:	200007c8 	.word	0x200007c8
 8002e8c:	0800c38c 	.word	0x0800c38c
 8002e90:	0800bd28 	.word	0x0800bd28
 8002e94:	0800bd3c 	.word	0x0800bd3c

08002e98 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b08b      	sub	sp, #44	; 0x2c
 8002e9c:	af04      	add	r7, sp, #16
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 8002eb8:	4b4f      	ldr	r3, [pc, #316]	; (8002ff8 <VL53L0X_SetLimitCheckEnable+0x160>)
 8002eba:	681c      	ldr	r4, [r3, #0]
 8002ebc:	f004 fdc4 	bl	8007a48 <HAL_GetTick>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4b4d      	ldr	r3, [pc, #308]	; (8002ffc <VL53L0X_SetLimitCheckEnable+0x164>)
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	9200      	str	r2, [sp, #0]
 8002eca:	4b4d      	ldr	r3, [pc, #308]	; (8003000 <VL53L0X_SetLimitCheckEnable+0x168>)
 8002ecc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	f004 fd0a 	bl	80078ec <trace_print_module_function>

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002ed8:	887b      	ldrh	r3, [r7, #2]
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	d902      	bls.n	8002ee4 <VL53L0X_SetLimitCheckEnable+0x4c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002ede:	23fc      	movs	r3, #252	; 0xfc
 8002ee0:	75fb      	strb	r3, [r7, #23]
 8002ee2:	e05b      	b.n	8002f9c <VL53L0X_SetLimitCheckEnable+0x104>
	} else {
		if (LimitCheckEnable == 0) {
 8002ee4:	787b      	ldrb	r3, [r7, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <VL53L0X_SetLimitCheckEnable+0x60>
			TempFix1616 = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73bb      	strb	r3, [r7, #14]
 8002ef6:	e00a      	b.n	8002f0e <VL53L0X_SetLimitCheckEnable+0x76>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002ef8:	887b      	ldrh	r3, [r7, #2]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	330c      	adds	r3, #12
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8002f0e:	887b      	ldrh	r3, [r7, #2]
 8002f10:	2b05      	cmp	r3, #5
 8002f12:	d841      	bhi.n	8002f98 <VL53L0X_SetLimitCheckEnable+0x100>
 8002f14:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <VL53L0X_SetLimitCheckEnable+0x84>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002f35 	.word	0x08002f35
 8002f20:	08002f3f 	.word	0x08002f3f
 8002f24:	08002f55 	.word	0x08002f55
 8002f28:	08002f5f 	.word	0x08002f5f
 8002f2c:	08002f69 	.word	0x08002f69
 8002f30:	08002f81 	.word	0x08002f81

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8002f3c:	e02e      	b.n	8002f9c <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	2144      	movs	r1, #68	; 0x44
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7fe fd5b 	bl	8001a04 <VL53L0X_WrWord>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	75fb      	strb	r3, [r7, #23]

			break;
 8002f52:	e023      	b.n	8002f9c <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7bfa      	ldrb	r2, [r7, #15]
 8002f58:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8002f5c:	e01e      	b.n	8002f9c <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8002f66:	e019      	b.n	8002f9c <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8002f68:	7bbb      	ldrb	r3, [r7, #14]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8002f6e:	7b7b      	ldrb	r3, [r7, #13]
 8002f70:	22fe      	movs	r2, #254	; 0xfe
 8002f72:	2160      	movs	r1, #96	; 0x60
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7fe fd6f 	bl	8001a58 <VL53L0X_UpdateByte>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8002f7e:	e00d      	b.n	8002f9c <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8002f80:	7bbb      	ldrb	r3, [r7, #14]
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8002f86:	7b7b      	ldrb	r3, [r7, #13]
 8002f88:	22ef      	movs	r2, #239	; 0xef
 8002f8a:	2160      	movs	r1, #96	; 0x60
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7fe fd63 	bl	8001a58 <VL53L0X_UpdateByte>
 8002f92:	4603      	mov	r3, r0
 8002f94:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8002f96:	e001      	b.n	8002f9c <VL53L0X_SetLimitCheckEnable+0x104>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002f98:	23fc      	movs	r3, #252	; 0xfc
 8002f9a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10f      	bne.n	8002fc4 <VL53L0X_SetLimitCheckEnable+0x12c>
		if (LimitCheckEnable == 0) {
 8002fa4:	787b      	ldrb	r3, [r7, #1]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <VL53L0X_SetLimitCheckEnable+0x120>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002faa:	887b      	ldrh	r3, [r7, #2]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002fb6:	e005      	b.n	8002fc4 <VL53L0X_SetLimitCheckEnable+0x12c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002fb8:	887b      	ldrh	r3, [r7, #2]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <VL53L0X_SetLimitCheckEnable+0x160>)
 8002fc6:	681c      	ldr	r4, [r3, #0]
 8002fc8:	f004 fd3e 	bl	8007a48 <HAL_GetTick>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fd4:	9302      	str	r3, [sp, #8]
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <VL53L0X_SetLimitCheckEnable+0x164>)
 8002fd8:	9301      	str	r3, [sp, #4]
 8002fda:	9200      	str	r2, [sp, #0]
 8002fdc:	4b09      	ldr	r3, [pc, #36]	; (8003004 <VL53L0X_SetLimitCheckEnable+0x16c>)
 8002fde:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f004 fc81 	bl	80078ec <trace_print_module_function>
	return Status;
 8002fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd90      	pop	{r4, r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	200007c8 	.word	0x200007c8
 8002ffc:	0800c444 	.word	0x0800c444
 8003000:	0800bd28 	.word	0x0800bd28
 8003004:	0800bd3c 	.word	0x0800bd3c

08003008 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b08b      	sub	sp, #44	; 0x2c
 800300c:	af04      	add	r7, sp, #16
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	460b      	mov	r3, r1
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003016:	2300      	movs	r3, #0
 8003018:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 800301a:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <VL53L0X_GetLimitCheckEnable+0x88>)
 800301c:	681c      	ldr	r4, [r3, #0]
 800301e:	f004 fd13 	bl	8007a48 <HAL_GetTick>
 8003022:	4603      	mov	r3, r0
 8003024:	461a      	mov	r2, r3
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <VL53L0X_GetLimitCheckEnable+0x8c>)
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	9200      	str	r2, [sp, #0]
 800302c:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <VL53L0X_GetLimitCheckEnable+0x90>)
 800302e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003032:	4621      	mov	r1, r4
 8003034:	2001      	movs	r0, #1
 8003036:	f004 fc59 	bl	80078ec <trace_print_module_function>

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800303a:	897b      	ldrh	r3, [r7, #10]
 800303c:	2b05      	cmp	r3, #5
 800303e:	d905      	bls.n	800304c <VL53L0X_GetLimitCheckEnable+0x44>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003040:	23fc      	movs	r3, #252	; 0xfc
 8003042:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	e008      	b.n	800305e <VL53L0X_GetLimitCheckEnable+0x56>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800304c:	897b      	ldrh	r3, [r7, #10]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003056:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7dba      	ldrb	r2, [r7, #22]
 800305c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
 800305e:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <VL53L0X_GetLimitCheckEnable+0x88>)
 8003060:	681c      	ldr	r4, [r3, #0]
 8003062:	f004 fcf1 	bl	8007a48 <HAL_GetTick>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800306e:	9302      	str	r3, [sp, #8]
 8003070:	4b08      	ldr	r3, [pc, #32]	; (8003094 <VL53L0X_GetLimitCheckEnable+0x8c>)
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	9200      	str	r2, [sp, #0]
 8003076:	4b09      	ldr	r3, [pc, #36]	; (800309c <VL53L0X_GetLimitCheckEnable+0x94>)
 8003078:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800307c:	4621      	mov	r1, r4
 800307e:	2001      	movs	r0, #1
 8003080:	f004 fc34 	bl	80078ec <trace_print_module_function>
	return Status;
 8003084:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003088:	4618      	mov	r0, r3
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	bd90      	pop	{r4, r7, pc}
 8003090:	200007c8 	.word	0x200007c8
 8003094:	0800c460 	.word	0x0800c460
 8003098:	0800bd28 	.word	0x0800bd28
 800309c:	0800bd3c 	.word	0x0800bd3c

080030a0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b08b      	sub	sp, #44	; 0x2c
 80030a4:	af04      	add	r7, sp, #16
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	460b      	mov	r3, r1
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 80030b2:	4b3d      	ldr	r3, [pc, #244]	; (80031a8 <VL53L0X_SetLimitCheckValue+0x108>)
 80030b4:	681c      	ldr	r4, [r3, #0]
 80030b6:	f004 fcc7 	bl	8007a48 <HAL_GetTick>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	4b3b      	ldr	r3, [pc, #236]	; (80031ac <VL53L0X_SetLimitCheckValue+0x10c>)
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	9200      	str	r2, [sp, #0]
 80030c4:	4b3a      	ldr	r3, [pc, #232]	; (80031b0 <VL53L0X_SetLimitCheckValue+0x110>)
 80030c6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80030ca:	4621      	mov	r1, r4
 80030cc:	2001      	movs	r0, #1
 80030ce:	f004 fc0d 	bl	80078ec <trace_print_module_function>

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80030d2:	897b      	ldrh	r3, [r7, #10]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4413      	add	r3, r2
 80030d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030dc:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80030de:	7dbb      	ldrb	r3, [r7, #22]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d107      	bne.n	80030f4 <VL53L0X_SetLimitCheckValue+0x54>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80030e4:	897b      	ldrh	r3, [r7, #10]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	330c      	adds	r3, #12
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	e040      	b.n	8003176 <VL53L0X_SetLimitCheckValue+0xd6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80030f4:	897b      	ldrh	r3, [r7, #10]
 80030f6:	2b05      	cmp	r3, #5
 80030f8:	d830      	bhi.n	800315c <VL53L0X_SetLimitCheckValue+0xbc>
 80030fa:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <VL53L0X_SetLimitCheckValue+0x60>)
 80030fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003100:	08003119 	.word	0x08003119
 8003104:	08003121 	.word	0x08003121
 8003108:	08003137 	.word	0x08003137
 800310c:	0800313f 	.word	0x0800313f
 8003110:	08003147 	.word	0x08003147
 8003114:	08003147 	.word	0x08003147

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800311e:	e01f      	b.n	8003160 <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003124:	b29b      	uxth	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	2144      	movs	r1, #68	; 0x44
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7fe fc6a 	bl	8001a04 <VL53L0X_WrWord>
 8003130:	4603      	mov	r3, r0
 8003132:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003134:	e014      	b.n	8003160 <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800313c:	e010      	b.n	8003160 <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8003144:	e00c      	b.n	8003160 <VL53L0X_SetLimitCheckValue+0xc0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800314a:	b29b      	uxth	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	2164      	movs	r1, #100	; 0x64
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f7fe fc57 	bl	8001a04 <VL53L0X_WrWord>
 8003156:	4603      	mov	r3, r0
 8003158:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800315a:	e001      	b.n	8003160 <VL53L0X_SetLimitCheckValue+0xc0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800315c:	23fc      	movs	r3, #252	; 0xfc
 800315e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8003160:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d106      	bne.n	8003176 <VL53L0X_SetLimitCheckValue+0xd6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003168:	897b      	ldrh	r3, [r7, #10]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	330c      	adds	r3, #12
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
 8003176:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <VL53L0X_SetLimitCheckValue+0x108>)
 8003178:	681c      	ldr	r4, [r3, #0]
 800317a:	f004 fc65 	bl	8007a48 <HAL_GetTick>
 800317e:	4603      	mov	r3, r0
 8003180:	461a      	mov	r2, r3
 8003182:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003186:	9302      	str	r3, [sp, #8]
 8003188:	4b08      	ldr	r3, [pc, #32]	; (80031ac <VL53L0X_SetLimitCheckValue+0x10c>)
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	9200      	str	r2, [sp, #0]
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <VL53L0X_SetLimitCheckValue+0x114>)
 8003190:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003194:	4621      	mov	r1, r4
 8003196:	2001      	movs	r0, #1
 8003198:	f004 fba8 	bl	80078ec <trace_print_module_function>
	return Status;
 800319c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd90      	pop	{r4, r7, pc}
 80031a8:	200007c8 	.word	0x200007c8
 80031ac:	0800c47c 	.word	0x0800c47c
 80031b0:	0800bd28 	.word	0x0800bd28
 80031b4:	0800bd3c 	.word	0x0800bd3c

080031b8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b08d      	sub	sp, #52	; 0x34
 80031bc:	af04      	add	r7, sp, #16
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	460b      	mov	r3, r1
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");
 80031ce:	4b52      	ldr	r3, [pc, #328]	; (8003318 <VL53L0X_GetLimitCheckValue+0x160>)
 80031d0:	681c      	ldr	r4, [r3, #0]
 80031d2:	f004 fc39 	bl	8007a48 <HAL_GetTick>
 80031d6:	4603      	mov	r3, r0
 80031d8:	461a      	mov	r2, r3
 80031da:	4b50      	ldr	r3, [pc, #320]	; (800331c <VL53L0X_GetLimitCheckValue+0x164>)
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	9200      	str	r2, [sp, #0]
 80031e0:	4b4f      	ldr	r3, [pc, #316]	; (8003320 <VL53L0X_GetLimitCheckValue+0x168>)
 80031e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80031e6:	4621      	mov	r1, r4
 80031e8:	2001      	movs	r0, #1
 80031ea:	f004 fb7f 	bl	80078ec <trace_print_module_function>

	switch (LimitCheckId) {
 80031ee:	897b      	ldrh	r3, [r7, #10]
 80031f0:	2b05      	cmp	r3, #5
 80031f2:	d847      	bhi.n	8003284 <VL53L0X_GetLimitCheckValue+0xcc>
 80031f4:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <VL53L0X_GetLimitCheckValue+0x44>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	08003215 	.word	0x08003215
 8003200:	08003221 	.word	0x08003221
 8003204:	08003247 	.word	0x08003247
 8003208:	08003253 	.word	0x08003253
 800320c:	0800325f 	.word	0x0800325f
 8003210:	0800325f 	.word	0x0800325f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003218:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	77bb      	strb	r3, [r7, #30]
		break;
 800321e:	e033      	b.n	8003288 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003220:	f107 0316 	add.w	r3, r7, #22
 8003224:	461a      	mov	r2, r3
 8003226:	2144      	movs	r1, #68	; 0x44
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f7fe fc73 	bl	8001b14 <VL53L0X_RdWord>
 800322e:	4603      	mov	r3, r0
 8003230:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003232:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d102      	bne.n	8003240 <VL53L0X_GetLimitCheckValue+0x88>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800323a:	8afb      	ldrh	r3, [r7, #22]
 800323c:	025b      	lsls	r3, r3, #9
 800323e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8003240:	2301      	movs	r3, #1
 8003242:	77bb      	strb	r3, [r7, #30]
		break;
 8003244:	e020      	b.n	8003288 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	77bb      	strb	r3, [r7, #30]
		break;
 8003250:	e01a      	b.n	8003288 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	77bb      	strb	r3, [r7, #30]
		break;
 800325c:	e014      	b.n	8003288 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800325e:	f107 0316 	add.w	r3, r7, #22
 8003262:	461a      	mov	r2, r3
 8003264:	2164      	movs	r1, #100	; 0x64
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f7fe fc54 	bl	8001b14 <VL53L0X_RdWord>
 800326c:	4603      	mov	r3, r0
 800326e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003270:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <VL53L0X_GetLimitCheckValue+0xc6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003278:	8afb      	ldrh	r3, [r7, #22]
 800327a:	025b      	lsls	r3, r3, #9
 800327c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	77bb      	strb	r3, [r7, #30]
		break;
 8003282:	e001      	b.n	8003288 <VL53L0X_GetLimitCheckValue+0xd0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003284:	23fc      	movs	r3, #252	; 0xfc
 8003286:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003288:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d12a      	bne.n	80032e6 <VL53L0X_GetLimitCheckValue+0x12e>

		if (EnableZeroValue == 1) {
 8003290:	7fbb      	ldrb	r3, [r7, #30]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d124      	bne.n	80032e0 <VL53L0X_GetLimitCheckValue+0x128>

			if (TempFix1616 == 0) {
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d110      	bne.n	80032be <VL53L0X_GetLimitCheckValue+0x106>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800329c:	897b      	ldrh	r3, [r7, #10]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	330c      	adds	r3, #12
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80032b0:	897b      	ldrh	r3, [r7, #10]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4413      	add	r3, r2
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80032bc:	e013      	b.n	80032e6 <VL53L0X_GetLimitCheckValue+0x12e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80032c4:	897b      	ldrh	r3, [r7, #10]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	330c      	adds	r3, #12
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80032d2:	897b      	ldrh	r3, [r7, #10]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80032de:	e002      	b.n	80032e6 <VL53L0X_GetLimitCheckValue+0x12e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <VL53L0X_GetLimitCheckValue+0x160>)
 80032e8:	681c      	ldr	r4, [r3, #0]
 80032ea:	f004 fbad 	bl	8007a48 <HAL_GetTick>
 80032ee:	4603      	mov	r3, r0
 80032f0:	461a      	mov	r2, r3
 80032f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032f6:	9302      	str	r3, [sp, #8]
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <VL53L0X_GetLimitCheckValue+0x164>)
 80032fa:	9301      	str	r3, [sp, #4]
 80032fc:	9200      	str	r2, [sp, #0]
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <VL53L0X_GetLimitCheckValue+0x16c>)
 8003300:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003304:	4621      	mov	r1, r4
 8003306:	2001      	movs	r0, #1
 8003308:	f004 faf0 	bl	80078ec <trace_print_module_function>
	return Status;
 800330c:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8003310:	4618      	mov	r0, r3
 8003312:	3724      	adds	r7, #36	; 0x24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd90      	pop	{r4, r7, pc}
 8003318:	200007c8 	.word	0x200007c8
 800331c:	0800c498 	.word	0x0800c498
 8003320:	0800bd28 	.word	0x0800bd28
 8003324:	0800bd3c 	.word	0x0800bd3c

08003328 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b089      	sub	sp, #36	; 0x24
 800332c:	af04      	add	r7, sp, #16
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");
 8003336:	4b27      	ldr	r3, [pc, #156]	; (80033d4 <VL53L0X_GetWrapAroundCheckEnable+0xac>)
 8003338:	681c      	ldr	r4, [r3, #0]
 800333a:	f004 fb85 	bl	8007a48 <HAL_GetTick>
 800333e:	4603      	mov	r3, r0
 8003340:	461a      	mov	r2, r3
 8003342:	4b25      	ldr	r3, [pc, #148]	; (80033d8 <VL53L0X_GetWrapAroundCheckEnable+0xb0>)
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	9200      	str	r2, [sp, #0]
 8003348:	4b24      	ldr	r3, [pc, #144]	; (80033dc <VL53L0X_GetWrapAroundCheckEnable+0xb4>)
 800334a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800334e:	4621      	mov	r1, r4
 8003350:	2001      	movs	r0, #1
 8003352:	f004 facb 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8003356:	f107 030e 	add.w	r3, r7, #14
 800335a:	461a      	mov	r2, r3
 800335c:	2101      	movs	r1, #1
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fe fbae 	bl	8001ac0 <VL53L0X_RdByte>
 8003364:	4603      	mov	r3, r0
 8003366:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8003368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10e      	bne.n	800338e <VL53L0X_GetWrapAroundCheckEnable+0x66>
		PALDevDataSet(Dev, SequenceConfig, data);
 8003370:	7bba      	ldrb	r2, [r7, #14]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8003378:	7bbb      	ldrb	r3, [r7, #14]
 800337a:	b25b      	sxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	da03      	bge.n	8003388 <VL53L0X_GetWrapAroundCheckEnable+0x60>
			*pWrapAroundCheckEnable = 0x01;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	e002      	b.n	800338e <VL53L0X_GetWrapAroundCheckEnable+0x66>
		else
			*pWrapAroundCheckEnable = 0x00;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800338e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <VL53L0X_GetWrapAroundCheckEnable+0x78>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	781a      	ldrb	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <VL53L0X_GetWrapAroundCheckEnable+0xac>)
 80033a2:	681c      	ldr	r4, [r3, #0]
 80033a4:	f004 fb50 	bl	8007a48 <HAL_GetTick>
 80033a8:	4603      	mov	r3, r0
 80033aa:	461a      	mov	r2, r3
 80033ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b0:	9302      	str	r3, [sp, #8]
 80033b2:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <VL53L0X_GetWrapAroundCheckEnable+0xb0>)
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	9200      	str	r2, [sp, #0]
 80033b8:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <VL53L0X_GetWrapAroundCheckEnable+0xb8>)
 80033ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80033be:	4621      	mov	r1, r4
 80033c0:	2001      	movs	r0, #1
 80033c2:	f004 fa93 	bl	80078ec <trace_print_module_function>
	return Status;
 80033c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd90      	pop	{r4, r7, pc}
 80033d2:	bf00      	nop
 80033d4:	200007c8 	.word	0x200007c8
 80033d8:	0800c4f8 	.word	0x0800c4f8
 80033dc:	0800bd28 	.word	0x0800bd28
 80033e0:	0800bd3c 	.word	0x0800bd3c

080033e4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	af04      	add	r7, sp, #16
 80033ea:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");
 80033f0:	4b28      	ldr	r3, [pc, #160]	; (8003494 <VL53L0X_PerformSingleMeasurement+0xb0>)
 80033f2:	681c      	ldr	r4, [r3, #0]
 80033f4:	f004 fb28 	bl	8007a48 <HAL_GetTick>
 80033f8:	4603      	mov	r3, r0
 80033fa:	461a      	mov	r2, r3
 80033fc:	4b26      	ldr	r3, [pc, #152]	; (8003498 <VL53L0X_PerformSingleMeasurement+0xb4>)
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	9200      	str	r2, [sp, #0]
 8003402:	4b26      	ldr	r3, [pc, #152]	; (800349c <VL53L0X_PerformSingleMeasurement+0xb8>)
 8003404:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003408:	4621      	mov	r1, r4
 800340a:	2001      	movs	r0, #1
 800340c:	f004 fa6e 	bl	80078ec <trace_print_module_function>

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003410:	f107 030e 	add.w	r3, r7, #14
 8003414:	4619      	mov	r1, r3
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff f8ec 	bl	80025f4 <VL53L0X_GetDeviceMode>
 800341c:	4603      	mov	r3, r0
 800341e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d107      	bne.n	8003438 <VL53L0X_PerformSingleMeasurement+0x54>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003428:	7bbb      	ldrb	r3, [r7, #14]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d104      	bne.n	8003438 <VL53L0X_PerformSingleMeasurement+0x54>
		Status = VL53L0X_StartMeasurement(Dev);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f8e0 	bl	80035f4 <VL53L0X_StartMeasurement>
 8003434:	4603      	mov	r3, r0
 8003436:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d104      	bne.n	800344a <VL53L0X_PerformSingleMeasurement+0x66>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f001 fd11 	bl	8004e68 <VL53L0X_measurement_poll_for_completion>
 8003446:	4603      	mov	r3, r0
 8003448:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800344a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <VL53L0X_PerformSingleMeasurement+0x7c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003452:	7bbb      	ldrb	r3, [r7, #14]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d103      	bne.n	8003460 <VL53L0X_PerformSingleMeasurement+0x7c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2203      	movs	r2, #3
 800345c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <VL53L0X_PerformSingleMeasurement+0xb0>)
 8003462:	681c      	ldr	r4, [r3, #0]
 8003464:	f004 faf0 	bl	8007a48 <HAL_GetTick>
 8003468:	4603      	mov	r3, r0
 800346a:	461a      	mov	r2, r3
 800346c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003470:	9302      	str	r3, [sp, #8]
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <VL53L0X_PerformSingleMeasurement+0xb4>)
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	9200      	str	r2, [sp, #0]
 8003478:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <VL53L0X_PerformSingleMeasurement+0xbc>)
 800347a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800347e:	4621      	mov	r1, r4
 8003480:	2001      	movs	r0, #1
 8003482:	f004 fa33 	bl	80078ec <trace_print_module_function>
	return Status;
 8003486:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	bd90      	pop	{r4, r7, pc}
 8003492:	bf00      	nop
 8003494:	200007c8 	.word	0x200007c8
 8003498:	0800c55c 	.word	0x0800c55c
 800349c:	0800bd28 	.word	0x0800bd28
 80034a0:	0800bd3c 	.word	0x0800bd3c

080034a4 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b08b      	sub	sp, #44	; 0x2c
 80034a8:	af04      	add	r7, sp, #16
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 80034b4:	4b18      	ldr	r3, [pc, #96]	; (8003518 <VL53L0X_PerformRefCalibration+0x74>)
 80034b6:	681c      	ldr	r4, [r3, #0]
 80034b8:	f004 fac6 	bl	8007a48 <HAL_GetTick>
 80034bc:	4603      	mov	r3, r0
 80034be:	461a      	mov	r2, r3
 80034c0:	4b16      	ldr	r3, [pc, #88]	; (800351c <VL53L0X_PerformRefCalibration+0x78>)
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	9200      	str	r2, [sp, #0]
 80034c6:	4b16      	ldr	r3, [pc, #88]	; (8003520 <VL53L0X_PerformRefCalibration+0x7c>)
 80034c8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80034cc:	4621      	mov	r1, r4
 80034ce:	2001      	movs	r0, #1
 80034d0:	f004 fa0c 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80034d4:	2301      	movs	r3, #1
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f001 fc87 	bl	8004dee <VL53L0X_perform_ref_calibration>
 80034e0:	4603      	mov	r3, r0
 80034e2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
 80034e4:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <VL53L0X_PerformRefCalibration+0x74>)
 80034e6:	681c      	ldr	r4, [r3, #0]
 80034e8:	f004 faae 	bl	8007a48 <HAL_GetTick>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461a      	mov	r2, r3
 80034f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034f4:	9302      	str	r3, [sp, #8]
 80034f6:	4b09      	ldr	r3, [pc, #36]	; (800351c <VL53L0X_PerformRefCalibration+0x78>)
 80034f8:	9301      	str	r3, [sp, #4]
 80034fa:	9200      	str	r2, [sp, #0]
 80034fc:	4b09      	ldr	r3, [pc, #36]	; (8003524 <VL53L0X_PerformRefCalibration+0x80>)
 80034fe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003502:	4621      	mov	r1, r4
 8003504:	2001      	movs	r0, #1
 8003506:	f004 f9f1 	bl	80078ec <trace_print_module_function>
	return Status;
 800350a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800350e:	4618      	mov	r0, r3
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	bd90      	pop	{r4, r7, pc}
 8003516:	bf00      	nop
 8003518:	200007c8 	.word	0x200007c8
 800351c:	0800c5ac 	.word	0x0800c5ac
 8003520:	0800bd28 	.word	0x0800bd28
 8003524:	0800bd3c 	.word	0x0800bd3c

08003528 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003534:	2300      	movs	r3, #0
 8003536:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800353e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8003540:	7dbb      	ldrb	r3, [r7, #22]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d005      	beq.n	8003552 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8003546:	7dbb      	ldrb	r3, [r7, #22]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d002      	beq.n	8003552 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800354c:	7dbb      	ldrb	r3, [r7, #22]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d147      	bne.n	80035e2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8003552:	f107 030c 	add.w	r3, r7, #12
 8003556:	f107 0210 	add.w	r2, r7, #16
 800355a:	2101      	movs	r1, #1
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fc9d 	bl	8003e9c <VL53L0X_GetInterruptThresholds>
 8003562:	4603      	mov	r3, r0
 8003564:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800356c:	d803      	bhi.n	8003576 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800356e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8003570:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8003574:	d935      	bls.n	80035e2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8003576:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d131      	bne.n	80035e2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d006      	beq.n	8003592 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003584:	491a      	ldr	r1, [pc, #104]	; (80035f0 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f003 fa24 	bl	80069d4 <VL53L0X_load_tuning_settings>
 800358c:	4603      	mov	r3, r0
 800358e:	75fb      	strb	r3, [r7, #23]
 8003590:	e027      	b.n	80035e2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8003592:	2204      	movs	r2, #4
 8003594:	21ff      	movs	r1, #255	; 0xff
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fe fa10 	bl	80019bc <VL53L0X_WrByte>
 800359c:	4603      	mov	r3, r0
 800359e:	461a      	mov	r2, r3
 80035a0:	7dfb      	ldrb	r3, [r7, #23]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80035a6:	2200      	movs	r2, #0
 80035a8:	2170      	movs	r1, #112	; 0x70
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fe fa06 	bl	80019bc <VL53L0X_WrByte>
 80035b0:	4603      	mov	r3, r0
 80035b2:	461a      	mov	r2, r3
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80035ba:	2200      	movs	r2, #0
 80035bc:	21ff      	movs	r1, #255	; 0xff
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fe f9fc 	bl	80019bc <VL53L0X_WrByte>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461a      	mov	r2, r3
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80035ce:	2200      	movs	r2, #0
 80035d0:	2180      	movs	r1, #128	; 0x80
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fe f9f2 	bl	80019bc <VL53L0X_WrByte>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
 80035de:	4313      	orrs	r3, r2
 80035e0:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80035e2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000600 	.word	0x20000600

080035f4 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b08b      	sub	sp, #44	; 0x2c
 80035f8:	af04      	add	r7, sp, #16
 80035fa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8003600:	2301      	movs	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");
 8003604:	4b6c      	ldr	r3, [pc, #432]	; (80037b8 <VL53L0X_StartMeasurement+0x1c4>)
 8003606:	681c      	ldr	r4, [r3, #0]
 8003608:	f004 fa1e 	bl	8007a48 <HAL_GetTick>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	4b6a      	ldr	r3, [pc, #424]	; (80037bc <VL53L0X_StartMeasurement+0x1c8>)
 8003612:	9301      	str	r3, [sp, #4]
 8003614:	9200      	str	r2, [sp, #0]
 8003616:	4b6a      	ldr	r3, [pc, #424]	; (80037c0 <VL53L0X_StartMeasurement+0x1cc>)
 8003618:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800361c:	4621      	mov	r1, r4
 800361e:	2001      	movs	r0, #1
 8003620:	f004 f964 	bl	80078ec <trace_print_module_function>

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003624:	f107 030e 	add.w	r3, r7, #14
 8003628:	4619      	mov	r1, r3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fe ffe2 	bl	80025f4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003630:	2201      	movs	r2, #1
 8003632:	2180      	movs	r1, #128	; 0x80
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7fe f9c1 	bl	80019bc <VL53L0X_WrByte>
 800363a:	4603      	mov	r3, r0
 800363c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800363e:	2201      	movs	r2, #1
 8003640:	21ff      	movs	r1, #255	; 0xff
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fe f9ba 	bl	80019bc <VL53L0X_WrByte>
 8003648:	4603      	mov	r3, r0
 800364a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800364c:	2200      	movs	r2, #0
 800364e:	2100      	movs	r1, #0
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7fe f9b3 	bl	80019bc <VL53L0X_WrByte>
 8003656:	4603      	mov	r3, r0
 8003658:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003660:	461a      	mov	r2, r3
 8003662:	2191      	movs	r1, #145	; 0x91
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7fe f9a9 	bl	80019bc <VL53L0X_WrByte>
 800366a:	4603      	mov	r3, r0
 800366c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800366e:	2201      	movs	r2, #1
 8003670:	2100      	movs	r1, #0
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fe f9a2 	bl	80019bc <VL53L0X_WrByte>
 8003678:	4603      	mov	r3, r0
 800367a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800367c:	2200      	movs	r2, #0
 800367e:	21ff      	movs	r1, #255	; 0xff
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7fe f99b 	bl	80019bc <VL53L0X_WrByte>
 8003686:	4603      	mov	r3, r0
 8003688:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800368a:	2200      	movs	r2, #0
 800368c:	2180      	movs	r1, #128	; 0x80
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fe f994 	bl	80019bc <VL53L0X_WrByte>
 8003694:	4603      	mov	r3, r0
 8003696:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8003698:	7bbb      	ldrb	r3, [r7, #14]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d037      	beq.n	800370e <VL53L0X_StartMeasurement+0x11a>
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d04f      	beq.n	8003742 <VL53L0X_StartMeasurement+0x14e>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d167      	bne.n	8003776 <VL53L0X_StartMeasurement+0x182>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80036a6:	2201      	movs	r2, #1
 80036a8:	2100      	movs	r1, #0
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fe f986 	bl	80019bc <VL53L0X_WrByte>
 80036b0:	4603      	mov	r3, r0
 80036b2:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80036b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d15d      	bne.n	800377c <VL53L0X_StartMeasurement+0x188>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <VL53L0X_StartMeasurement+0xe8>
					Status = VL53L0X_RdByte(Dev,
 80036ca:	f107 030d 	add.w	r3, r7, #13
 80036ce:	461a      	mov	r2, r3
 80036d0:	2100      	movs	r1, #0
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fe f9f4 	bl	8001ac0 <VL53L0X_RdByte>
 80036d8:	4603      	mov	r3, r0
 80036da:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	3301      	adds	r3, #1
 80036e0:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80036e2:	7b7a      	ldrb	r2, [r7, #13]
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	4013      	ands	r3, r2
 80036e8:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80036ea:	7bfa      	ldrb	r2, [r7, #15]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d107      	bne.n	8003700 <VL53L0X_StartMeasurement+0x10c>
				&& (Status == VL53L0X_ERROR_NONE)
 80036f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d103      	bne.n	8003700 <VL53L0X_StartMeasurement+0x10c>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80036fe:	d3e1      	bcc.n	80036c4 <VL53L0X_StartMeasurement+0xd0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003706:	d339      	bcc.n	800377c <VL53L0X_StartMeasurement+0x188>
				Status = VL53L0X_ERROR_TIME_OUT;
 8003708:	23f9      	movs	r3, #249	; 0xf9
 800370a:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800370c:	e036      	b.n	800377c <VL53L0X_StartMeasurement+0x188>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800370e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d105      	bne.n	8003722 <VL53L0X_StartMeasurement+0x12e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003716:	2101      	movs	r1, #1
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff05 	bl	8003528 <VL53L0X_CheckAndLoadInterruptSettings>
 800371e:	4603      	mov	r3, r0
 8003720:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003722:	2202      	movs	r2, #2
 8003724:	2100      	movs	r1, #0
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fe f948 	bl	80019bc <VL53L0X_WrByte>
 800372c:	4603      	mov	r3, r0
 800372e:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8003730:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d123      	bne.n	8003780 <VL53L0X_StartMeasurement+0x18c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2204      	movs	r2, #4
 800373c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003740:	e01e      	b.n	8003780 <VL53L0X_StartMeasurement+0x18c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003742:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d105      	bne.n	8003756 <VL53L0X_StartMeasurement+0x162>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800374a:	2101      	movs	r1, #1
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff feeb 	bl	8003528 <VL53L0X_CheckAndLoadInterruptSettings>
 8003752:	4603      	mov	r3, r0
 8003754:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003756:	2204      	movs	r2, #4
 8003758:	2100      	movs	r1, #0
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fe f92e 	bl	80019bc <VL53L0X_WrByte>
 8003760:	4603      	mov	r3, r0
 8003762:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8003764:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10b      	bne.n	8003784 <VL53L0X_StartMeasurement+0x190>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2204      	movs	r2, #4
 8003770:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003774:	e006      	b.n	8003784 <VL53L0X_StartMeasurement+0x190>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003776:	23f8      	movs	r3, #248	; 0xf8
 8003778:	75fb      	strb	r3, [r7, #23]
 800377a:	e004      	b.n	8003786 <VL53L0X_StartMeasurement+0x192>
		break;
 800377c:	bf00      	nop
 800377e:	e002      	b.n	8003786 <VL53L0X_StartMeasurement+0x192>
		break;
 8003780:	bf00      	nop
 8003782:	e000      	b.n	8003786 <VL53L0X_StartMeasurement+0x192>
		break;
 8003784:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <VL53L0X_StartMeasurement+0x1c4>)
 8003788:	681c      	ldr	r4, [r3, #0]
 800378a:	f004 f95d 	bl	8007a48 <HAL_GetTick>
 800378e:	4603      	mov	r3, r0
 8003790:	461a      	mov	r2, r3
 8003792:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003796:	9302      	str	r3, [sp, #8]
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <VL53L0X_StartMeasurement+0x1c8>)
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	9200      	str	r2, [sp, #0]
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <VL53L0X_StartMeasurement+0x1d0>)
 80037a0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80037a4:	4621      	mov	r1, r4
 80037a6:	2001      	movs	r0, #1
 80037a8:	f004 f8a0 	bl	80078ec <trace_print_module_function>
	return Status;
 80037ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd90      	pop	{r4, r7, pc}
 80037b8:	200007c8 	.word	0x200007c8
 80037bc:	0800c630 	.word	0x0800c630
 80037c0:	0800bd28 	.word	0x0800bd28
 80037c4:	0800bd3c 	.word	0x0800bd3c

080037c8 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80037c8:	b590      	push	{r4, r7, lr}
 80037ca:	b089      	sub	sp, #36	; 0x24
 80037cc:	af04      	add	r7, sp, #16
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");
 80037d6:	4b2e      	ldr	r3, [pc, #184]	; (8003890 <VL53L0X_GetMeasurementDataReady+0xc8>)
 80037d8:	681c      	ldr	r4, [r3, #0]
 80037da:	f004 f935 	bl	8007a48 <HAL_GetTick>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b2c      	ldr	r3, [pc, #176]	; (8003894 <VL53L0X_GetMeasurementDataReady+0xcc>)
 80037e4:	9301      	str	r3, [sp, #4]
 80037e6:	9200      	str	r2, [sp, #0]
 80037e8:	4b2b      	ldr	r3, [pc, #172]	; (8003898 <VL53L0X_GetMeasurementDataReady+0xd0>)
 80037ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80037ee:	4621      	mov	r1, r4
 80037f0:	2001      	movs	r0, #1
 80037f2:	f004 f87b 	bl	80078ec <trace_print_module_function>

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80037fc:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80037fe:	7bbb      	ldrb	r3, [r7, #14]
 8003800:	2b04      	cmp	r3, #4
 8003802:	d112      	bne.n	800382a <VL53L0X_GetMeasurementDataReady+0x62>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8003804:	f107 0308 	add.w	r3, r7, #8
 8003808:	4619      	mov	r1, r3
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fc14 	bl	8004038 <VL53L0X_GetInterruptMaskStatus>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b04      	cmp	r3, #4
 8003818:	d103      	bne.n	8003822 <VL53L0X_GetMeasurementDataReady+0x5a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e01c      	b.n	800385c <VL53L0X_GetMeasurementDataReady+0x94>
		else
			*pMeasurementDataReady = 0;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2200      	movs	r2, #0
 8003826:	701a      	strb	r2, [r3, #0]
 8003828:	e018      	b.n	800385c <VL53L0X_GetMeasurementDataReady+0x94>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800382a:	f107 030d 	add.w	r3, r7, #13
 800382e:	461a      	mov	r2, r3
 8003830:	2114      	movs	r1, #20
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fe f944 	bl	8001ac0 <VL53L0X_RdByte>
 8003838:	4603      	mov	r3, r0
 800383a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800383c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10b      	bne.n	800385c <VL53L0X_GetMeasurementDataReady+0x94>
			if (SysRangeStatusRegister & 0x01)
 8003844:	7b7b      	ldrb	r3, [r7, #13]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <VL53L0X_GetMeasurementDataReady+0x8e>
				*pMeasurementDataReady = 1;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2201      	movs	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	e002      	b.n	800385c <VL53L0X_GetMeasurementDataReady+0x94>
			else
				*pMeasurementDataReady = 0;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <VL53L0X_GetMeasurementDataReady+0xc8>)
 800385e:	681c      	ldr	r4, [r3, #0]
 8003860:	f004 f8f2 	bl	8007a48 <HAL_GetTick>
 8003864:	4603      	mov	r3, r0
 8003866:	461a      	mov	r2, r3
 8003868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386c:	9302      	str	r3, [sp, #8]
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <VL53L0X_GetMeasurementDataReady+0xcc>)
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	9200      	str	r2, [sp, #0]
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <VL53L0X_GetMeasurementDataReady+0xd4>)
 8003876:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800387a:	4621      	mov	r1, r4
 800387c:	2001      	movs	r0, #1
 800387e:	f004 f835 	bl	80078ec <trace_print_module_function>
	return Status;
 8003882:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	bd90      	pop	{r4, r7, pc}
 800388e:	bf00      	nop
 8003890:	200007c8 	.word	0x200007c8
 8003894:	0800c664 	.word	0x0800c664
 8003898:	0800bd28 	.word	0x0800bd28
 800389c:	0800bd3c 	.word	0x0800bd3c

080038a0 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80038a0:	b5b0      	push	{r4, r5, r7, lr}
 80038a2:	b098      	sub	sp, #96	; 0x60
 80038a4:	af04      	add	r7, sp, #16
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint16_t XtalkRangeMilliMeter;
	uint16_t LinearityCorrectiveGain;
	uint8_t localBuffer[12];
	VL53L0X_RangingMeasurementData_t LastRangeDataBuffer;

	LOG_FUNCTION_START("");
 80038b0:	4b9e      	ldr	r3, [pc, #632]	; (8003b2c <VL53L0X_GetRangingMeasurementData+0x28c>)
 80038b2:	681c      	ldr	r4, [r3, #0]
 80038b4:	f004 f8c8 	bl	8007a48 <HAL_GetTick>
 80038b8:	4603      	mov	r3, r0
 80038ba:	461a      	mov	r2, r3
 80038bc:	4b9c      	ldr	r3, [pc, #624]	; (8003b30 <VL53L0X_GetRangingMeasurementData+0x290>)
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	9200      	str	r2, [sp, #0]
 80038c2:	4b9c      	ldr	r3, [pc, #624]	; (8003b34 <VL53L0X_GetRangingMeasurementData+0x294>)
 80038c4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80038c8:	4621      	mov	r1, r4
 80038ca:	2001      	movs	r0, #1
 80038cc:	f004 f80e 	bl	80078ec <trace_print_module_function>
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80038d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038d4:	230c      	movs	r3, #12
 80038d6:	2114      	movs	r1, #20
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7fe f843 	bl	8001964 <VL53L0X_ReadMulti>
 80038de:	4603      	mov	r3, r0
 80038e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80038e4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f040 80d2 	bne.w	8003a92 <VL53L0X_GetRangingMeasurementData+0x1f2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2200      	movs	r2, #0
 80038f2:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80038fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80038fe:	b29b      	uxth	r3, r3
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	b29a      	uxth	r2, r3
 8003904:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003908:	b29b      	uxth	r3, r3
 800390a:	4413      	add	r3, r2
 800390c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2200      	movs	r2, #0
 8003914:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8003916:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800391a:	b29b      	uxth	r3, r3
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	b29a      	uxth	r2, r3
 8003920:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003924:	b29b      	uxth	r3, r3
 8003926:	4413      	add	r3, r2
 8003928:	b29b      	uxth	r3, r3
 800392a:	025b      	lsls	r3, r3, #9
 800392c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003932:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8003934:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003938:	b29b      	uxth	r3, r3
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	b29a      	uxth	r2, r3
 800393e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003942:	b29b      	uxth	r3, r3
 8003944:	4413      	add	r3, r2
 8003946:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800394a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800394e:	025b      	lsls	r3, r3, #9
 8003950:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8003956:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800395a:	b29b      	uxth	r3, r3
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	b29a      	uxth	r2, r3
 8003960:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003964:	b29b      	uxth	r3, r3
 8003966:	4413      	add	r3, r2
 8003968:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003972:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8003974:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003978:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8003982:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800398a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800398e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003990:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003994:	d047      	beq.n	8003a26 <VL53L0X_GetRangingMeasurementData+0x186>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8003996:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003998:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800399c:	fb02 f303 	mul.w	r3, r2, r3
 80039a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80039a4:	4a64      	ldr	r2, [pc, #400]	; (8003b38 <VL53L0X_GetRangingMeasurementData+0x298>)
 80039a6:	fb82 1203 	smull	r1, r2, r2, r3
 80039aa:	1192      	asrs	r2, r2, #6
 80039ac:	17db      	asrs	r3, r3, #31
 80039ae:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80039b0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	7f1b      	ldrb	r3, [r3, #28]
 80039be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80039c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d02d      	beq.n	8003a26 <VL53L0X_GetRangingMeasurementData+0x186>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80039ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80039cc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	121b      	asrs	r3, r3, #8
 80039d6:	461a      	mov	r2, r3
				if ((SignalRate
 80039d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039da:	4293      	cmp	r3, r2
 80039dc:	d10d      	bne.n	80039fa <VL53L0X_GetRangingMeasurementData+0x15a>
					<= 0) {
					if (RangeFractionalEnable)
 80039de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d004      	beq.n	80039f0 <VL53L0X_GetRangingMeasurementData+0x150>
						XtalkRangeMilliMeter = 8888;
 80039e6:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80039ea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80039ee:	e016      	b.n	8003a1e <VL53L0X_GetRangingMeasurementData+0x17e>
					else
						XtalkRangeMilliMeter = 8888
 80039f0:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80039f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80039f8:	e011      	b.n	8003a1e <VL53L0X_GetRangingMeasurementData+0x17e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80039fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80039fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a00:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8003a04:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003a06:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8003a0e:	121b      	asrs	r3, r3, #8
 8003a10:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8003a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a14:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8003a16:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8003a1a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8003a1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a22:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8003a26:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00d      	beq.n	8003a4a <VL53L0X_GetRangingMeasurementData+0x1aa>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8003a2e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003a32:	089b      	lsrs	r3, r3, #2
 8003a34:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8003a3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	019b      	lsls	r3, r3, #6
 8003a42:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	75da      	strb	r2, [r3, #23]
 8003a48:	e006      	b.n	8003a58 <VL53L0X_GetRangingMeasurementData+0x1b8>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003a50:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2200      	movs	r2, #0
 8003a56:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8003a58:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003a5c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8003a60:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f003 fd10 	bl	8007494 <VL53L0X_get_pal_range_status>
 8003a74:	4603      	mov	r3, r0
 8003a76:	461a      	mov	r2, r3
 8003a78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8003a82:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d103      	bne.n	8003a92 <VL53L0X_GetRangingMeasurementData+0x1f2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8003a8a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003a92:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d12f      	bne.n	8003afa <VL53L0X_GetRangingMeasurementData+0x25a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f107 040c 	add.w	r4, r7, #12
 8003aa0:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8003aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aa8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003aac:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8003ab4:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8003aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8003ac2:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8003ac8:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8003ace:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8003ad4:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8003ada:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8003ae0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8003aea:	f107 050c 	add.w	r5, r7, #12
 8003aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003af2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003af6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
 8003afa:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <VL53L0X_GetRangingMeasurementData+0x28c>)
 8003afc:	681c      	ldr	r4, [r3, #0]
 8003afe:	f003 ffa3 	bl	8007a48 <HAL_GetTick>
 8003b02:	4603      	mov	r3, r0
 8003b04:	461a      	mov	r2, r3
 8003b06:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003b0a:	9302      	str	r3, [sp, #8]
 8003b0c:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <VL53L0X_GetRangingMeasurementData+0x290>)
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	9200      	str	r2, [sp, #0]
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <VL53L0X_GetRangingMeasurementData+0x29c>)
 8003b14:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003b18:	4621      	mov	r1, r4
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	f003 fee6 	bl	80078ec <trace_print_module_function>
	return Status;
 8003b20:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3750      	adds	r7, #80	; 0x50
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b2c:	200007c8 	.word	0x200007c8
 8003b30:	0800c6b0 	.word	0x0800c6b0
 8003b34:	0800bd28 	.word	0x0800bd28
 8003b38:	10624dd3 	.word	0x10624dd3
 8003b3c:	0800bd3c 	.word	0x0800bd3c

08003b40 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b089      	sub	sp, #36	; 0x24
 8003b44:	af04      	add	r7, sp, #16
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");
 8003b4e:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <VL53L0X_PerformSingleRangingMeasurement+0xa8>)
 8003b50:	681c      	ldr	r4, [r3, #0]
 8003b52:	f003 ff79 	bl	8007a48 <HAL_GetTick>
 8003b56:	4603      	mov	r3, r0
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4b24      	ldr	r3, [pc, #144]	; (8003bec <VL53L0X_PerformSingleRangingMeasurement+0xac>)
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	9200      	str	r2, [sp, #0]
 8003b60:	4b23      	ldr	r3, [pc, #140]	; (8003bf0 <VL53L0X_PerformSingleRangingMeasurement+0xb0>)
 8003b62:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003b66:	4621      	mov	r1, r4
 8003b68:	2001      	movs	r0, #1
 8003b6a:	f003 febf 	bl	80078ec <trace_print_module_function>

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8003b6e:	2100      	movs	r1, #0
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7fe fccb 	bl	800250c <VL53L0X_SetDeviceMode>
 8003b76:	4603      	mov	r3, r0
 8003b78:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d104      	bne.n	8003b8c <VL53L0X_PerformSingleRangingMeasurement+0x4c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff fc2e 	bl	80033e4 <VL53L0X_PerformSingleMeasurement>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <VL53L0X_PerformSingleRangingMeasurement+0x60>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8003b94:	6839      	ldr	r1, [r7, #0]
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff fe82 	bl	80038a0 <VL53L0X_GetRangingMeasurementData>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8003ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <VL53L0X_PerformSingleRangingMeasurement+0x74>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003ba8:	2100      	movs	r1, #0
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f9d8 	bl	8003f60 <VL53L0X_ClearInterruptMask>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <VL53L0X_PerformSingleRangingMeasurement+0xa8>)
 8003bb6:	681c      	ldr	r4, [r3, #0]
 8003bb8:	f003 ff46 	bl	8007a48 <HAL_GetTick>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc4:	9302      	str	r3, [sp, #8]
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <VL53L0X_PerformSingleRangingMeasurement+0xac>)
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	9200      	str	r2, [sp, #0]
 8003bcc:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <VL53L0X_PerformSingleRangingMeasurement+0xb4>)
 8003bce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	f003 fe89 	bl	80078ec <trace_print_module_function>
	return Status;
 8003bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd90      	pop	{r4, r7, pc}
 8003be6:	bf00      	nop
 8003be8:	200007c8 	.word	0x200007c8
 8003bec:	0800c718 	.word	0x0800c718
 8003bf0:	0800bd28 	.word	0x0800bd28
 8003bf4:	0800bd3c 	.word	0x0800bd3c

08003bf8 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b089      	sub	sp, #36	; 0x24
 8003bfc:	af04      	add	r7, sp, #16
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	461a      	mov	r2, r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	70fb      	strb	r3, [r7, #3]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	70bb      	strb	r3, [r7, #2]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");
 8003c16:	4b9d      	ldr	r3, [pc, #628]	; (8003e8c <VL53L0X_SetGpioConfig+0x294>)
 8003c18:	681c      	ldr	r4, [r3, #0]
 8003c1a:	f003 ff15 	bl	8007a48 <HAL_GetTick>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	461a      	mov	r2, r3
 8003c22:	4b9b      	ldr	r3, [pc, #620]	; (8003e90 <VL53L0X_SetGpioConfig+0x298>)
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	9200      	str	r2, [sp, #0]
 8003c28:	4b9a      	ldr	r3, [pc, #616]	; (8003e94 <VL53L0X_SetGpioConfig+0x29c>)
 8003c2a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003c2e:	4621      	mov	r1, r4
 8003c30:	2001      	movs	r0, #1
 8003c32:	f003 fe5b 	bl	80078ec <trace_print_module_function>

	if (Pin != 0) {
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <VL53L0X_SetGpioConfig+0x4a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8003c3c:	23f6      	movs	r3, #246	; 0xf6
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	e10a      	b.n	8003e58 <VL53L0X_SetGpioConfig+0x260>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8003c42:	78bb      	ldrb	r3, [r7, #2]
 8003c44:	2b14      	cmp	r3, #20
 8003c46:	d111      	bne.n	8003c6c <VL53L0X_SetGpioConfig+0x74>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8003c48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <VL53L0X_SetGpioConfig+0x5e>
			data = 0x10;
 8003c50:	2310      	movs	r3, #16
 8003c52:	73bb      	strb	r3, [r7, #14]
 8003c54:	e001      	b.n	8003c5a <VL53L0X_SetGpioConfig+0x62>
		else
			data = 1;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8003c5a:	7bbb      	ldrb	r3, [r7, #14]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2184      	movs	r1, #132	; 0x84
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7fd feab 	bl	80019bc <VL53L0X_WrByte>
 8003c66:	4603      	mov	r3, r0
 8003c68:	73fb      	strb	r3, [r7, #15]
 8003c6a:	e0f5      	b.n	8003e58 <VL53L0X_SetGpioConfig+0x260>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8003c6c:	78bb      	ldrb	r3, [r7, #2]
 8003c6e:	2b15      	cmp	r3, #21
 8003c70:	f040 8097 	bne.w	8003da2 <VL53L0X_SetGpioConfig+0x1aa>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003c74:	2201      	movs	r2, #1
 8003c76:	21ff      	movs	r1, #255	; 0xff
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7fd fe9f 	bl	80019bc <VL53L0X_WrByte>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	461a      	mov	r2, r3
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7fd fe95 	bl	80019bc <VL53L0X_WrByte>
 8003c92:	4603      	mov	r3, r0
 8003c94:	461a      	mov	r2, r3
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	21ff      	movs	r1, #255	; 0xff
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7fd fe8b 	bl	80019bc <VL53L0X_WrByte>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	461a      	mov	r2, r3
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	2180      	movs	r1, #128	; 0x80
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7fd fe81 	bl	80019bc <VL53L0X_WrByte>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	2185      	movs	r1, #133	; 0x85
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7fd fe77 	bl	80019bc <VL53L0X_WrByte>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8003cd8:	2204      	movs	r2, #4
 8003cda:	21ff      	movs	r1, #255	; 0xff
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7fd fe6d 	bl	80019bc <VL53L0X_WrByte>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8003cec:	2200      	movs	r2, #0
 8003cee:	21cd      	movs	r1, #205	; 0xcd
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7fd fe63 	bl	80019bc <VL53L0X_WrByte>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8003d00:	2211      	movs	r2, #17
 8003d02:	21cc      	movs	r1, #204	; 0xcc
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7fd fe59 	bl	80019bc <VL53L0X_WrByte>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8003d14:	2207      	movs	r2, #7
 8003d16:	21ff      	movs	r1, #255	; 0xff
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7fd fe4f 	bl	80019bc <VL53L0X_WrByte>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	461a      	mov	r2, r3
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8003d28:	2200      	movs	r2, #0
 8003d2a:	21be      	movs	r1, #190	; 0xbe
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7fd fe45 	bl	80019bc <VL53L0X_WrByte>
 8003d32:	4603      	mov	r3, r0
 8003d34:	461a      	mov	r2, r3
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8003d3c:	2206      	movs	r2, #6
 8003d3e:	21ff      	movs	r1, #255	; 0xff
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fd fe3b 	bl	80019bc <VL53L0X_WrByte>
 8003d46:	4603      	mov	r3, r0
 8003d48:	461a      	mov	r2, r3
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8003d50:	2209      	movs	r2, #9
 8003d52:	21cc      	movs	r1, #204	; 0xcc
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7fd fe31 	bl	80019bc <VL53L0X_WrByte>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003d64:	2200      	movs	r2, #0
 8003d66:	21ff      	movs	r1, #255	; 0xff
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7fd fe27 	bl	80019bc <VL53L0X_WrByte>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	461a      	mov	r2, r3
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003d78:	2201      	movs	r2, #1
 8003d7a:	21ff      	movs	r1, #255	; 0xff
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7fd fe1d 	bl	80019bc <VL53L0X_WrByte>
 8003d82:	4603      	mov	r3, r0
 8003d84:	461a      	mov	r2, r3
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2100      	movs	r1, #0
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7fd fe13 	bl	80019bc <VL53L0X_WrByte>
 8003d96:	4603      	mov	r3, r0
 8003d98:	461a      	mov	r2, r3
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	73fb      	strb	r3, [r7, #15]
 8003da0:	e05a      	b.n	8003e58 <VL53L0X_SetGpioConfig+0x260>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8003da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d122      	bne.n	8003df0 <VL53L0X_SetGpioConfig+0x1f8>
			switch (Functionality) {
 8003daa:	787b      	ldrb	r3, [r7, #1]
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d81c      	bhi.n	8003dea <VL53L0X_SetGpioConfig+0x1f2>
 8003db0:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <VL53L0X_SetGpioConfig+0x1c0>)
 8003db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db6:	bf00      	nop
 8003db8:	08003dcd 	.word	0x08003dcd
 8003dbc:	08003dd3 	.word	0x08003dd3
 8003dc0:	08003dd9 	.word	0x08003dd9
 8003dc4:	08003ddf 	.word	0x08003ddf
 8003dc8:	08003de5 	.word	0x08003de5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	73bb      	strb	r3, [r7, #14]
				break;
 8003dd0:	e00f      	b.n	8003df2 <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	73bb      	strb	r3, [r7, #14]
				break;
 8003dd6:	e00c      	b.n	8003df2 <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	73bb      	strb	r3, [r7, #14]
				break;
 8003ddc:	e009      	b.n	8003df2 <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8003dde:	2303      	movs	r3, #3
 8003de0:	73bb      	strb	r3, [r7, #14]
				break;
 8003de2:	e006      	b.n	8003df2 <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8003de4:	2304      	movs	r3, #4
 8003de6:	73bb      	strb	r3, [r7, #14]
				break;
 8003de8:	e003      	b.n	8003df2 <VL53L0X_SetGpioConfig+0x1fa>
			default:
				Status =
 8003dea:	23f5      	movs	r3, #245	; 0xf5
 8003dec:	73fb      	strb	r3, [r7, #15]
 8003dee:	e000      	b.n	8003df2 <VL53L0X_SetGpioConfig+0x1fa>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8003df0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8003df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d107      	bne.n	8003e0a <VL53L0X_SetGpioConfig+0x212>
			Status = VL53L0X_WrByte(Dev,
 8003dfa:	7bbb      	ldrb	r3, [r7, #14]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	210a      	movs	r1, #10
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7fd fddb 	bl	80019bc <VL53L0X_WrByte>
 8003e06:	4603      	mov	r3, r0
 8003e08:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8003e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d110      	bne.n	8003e34 <VL53L0X_SetGpioConfig+0x23c>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8003e12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <VL53L0X_SetGpioConfig+0x228>
				data = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	73bb      	strb	r3, [r7, #14]
 8003e1e:	e001      	b.n	8003e24 <VL53L0X_SetGpioConfig+0x22c>
			else
				data = (uint8_t)(1 << 4);
 8003e20:	2310      	movs	r3, #16
 8003e22:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8003e24:	7bbb      	ldrb	r3, [r7, #14]
 8003e26:	22ef      	movs	r2, #239	; 0xef
 8003e28:	2184      	movs	r1, #132	; 0x84
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fd fe14 	bl	8001a58 <VL53L0X_UpdateByte>
 8003e30:	4603      	mov	r3, r0
 8003e32:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8003e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d103      	bne.n	8003e44 <VL53L0X_SetGpioConfig+0x24c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	787a      	ldrb	r2, [r7, #1]
 8003e40:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8003e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <VL53L0X_SetGpioConfig+0x260>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f886 	bl	8003f60 <VL53L0X_ClearInterruptMask>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
 8003e58:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <VL53L0X_SetGpioConfig+0x294>)
 8003e5a:	681c      	ldr	r4, [r3, #0]
 8003e5c:	f003 fdf4 	bl	8007a48 <HAL_GetTick>
 8003e60:	4603      	mov	r3, r0
 8003e62:	461a      	mov	r2, r3
 8003e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e68:	9302      	str	r3, [sp, #8]
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <VL53L0X_SetGpioConfig+0x298>)
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	9200      	str	r2, [sp, #0]
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <VL53L0X_SetGpioConfig+0x2a0>)
 8003e72:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003e76:	4621      	mov	r1, r4
 8003e78:	2001      	movs	r0, #1
 8003e7a:	f003 fd37 	bl	80078ec <trace_print_module_function>
	return Status;
 8003e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd90      	pop	{r4, r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200007c8 	.word	0x200007c8
 8003e90:	0800c798 	.word	0x0800c798
 8003e94:	0800bd28 	.word	0x0800bd28
 8003e98:	0800bd3c 	.word	0x0800bd3c

08003e9c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8003e9c:	b590      	push	{r4, r7, lr}
 8003e9e:	b08b      	sub	sp, #44	; 0x2c
 8003ea0:	af04      	add	r7, sp, #16
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");
 8003eb0:	4b26      	ldr	r3, [pc, #152]	; (8003f4c <VL53L0X_GetInterruptThresholds+0xb0>)
 8003eb2:	681c      	ldr	r4, [r3, #0]
 8003eb4:	f003 fdc8 	bl	8007a48 <HAL_GetTick>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <VL53L0X_GetInterruptThresholds+0xb4>)
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	9200      	str	r2, [sp, #0]
 8003ec2:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <VL53L0X_GetInterruptThresholds+0xb8>)
 8003ec4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003ec8:	4621      	mov	r1, r4
 8003eca:	2001      	movs	r0, #1
 8003ecc:	f003 fd0e 	bl	80078ec <trace_print_module_function>

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8003ed0:	f107 0314 	add.w	r3, r7, #20
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	210e      	movs	r1, #14
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f7fd fe1b 	bl	8001b14 <VL53L0X_RdWord>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8003ee2:	8abb      	ldrh	r3, [r7, #20]
 8003ee4:	045b      	lsls	r3, r3, #17
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	; (8003f58 <VL53L0X_GetInterruptThresholds+0xbc>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8003ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10f      	bne.n	8003f18 <VL53L0X_GetInterruptThresholds+0x7c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8003ef8:	f107 0314 	add.w	r3, r7, #20
 8003efc:	461a      	mov	r2, r3
 8003efe:	210c      	movs	r1, #12
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f7fd fe07 	bl	8001b14 <VL53L0X_RdWord>
 8003f06:	4603      	mov	r3, r0
 8003f08:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8003f0a:	8abb      	ldrh	r3, [r7, #20]
 8003f0c:	045b      	lsls	r3, r3, #17
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <VL53L0X_GetInterruptThresholds+0xbc>)
 8003f12:	4013      	ands	r3, r2
		*pThresholdHigh =
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
 8003f18:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <VL53L0X_GetInterruptThresholds+0xb0>)
 8003f1a:	681c      	ldr	r4, [r3, #0]
 8003f1c:	f003 fd94 	bl	8007a48 <HAL_GetTick>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f28:	9302      	str	r3, [sp, #8]
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <VL53L0X_GetInterruptThresholds+0xb4>)
 8003f2c:	9301      	str	r3, [sp, #4]
 8003f2e:	9200      	str	r2, [sp, #0]
 8003f30:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <VL53L0X_GetInterruptThresholds+0xc0>)
 8003f32:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003f36:	4621      	mov	r1, r4
 8003f38:	2001      	movs	r0, #1
 8003f3a:	f003 fcd7 	bl	80078ec <trace_print_module_function>
	return Status;
 8003f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd90      	pop	{r4, r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	200007c8 	.word	0x200007c8
 8003f50:	0800c7e8 	.word	0x0800c7e8
 8003f54:	0800bd28 	.word	0x0800bd28
 8003f58:	1ffe0000 	.word	0x1ffe0000
 8003f5c:	0800bd3c 	.word	0x0800bd3c

08003f60 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b089      	sub	sp, #36	; 0x24
 8003f64:	af04      	add	r7, sp, #16
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");
 8003f6e:	4b2e      	ldr	r3, [pc, #184]	; (8004028 <VL53L0X_ClearInterruptMask+0xc8>)
 8003f70:	681c      	ldr	r4, [r3, #0]
 8003f72:	f003 fd69 	bl	8007a48 <HAL_GetTick>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b2c      	ldr	r3, [pc, #176]	; (800402c <VL53L0X_ClearInterruptMask+0xcc>)
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	9200      	str	r2, [sp, #0]
 8003f80:	4b2b      	ldr	r3, [pc, #172]	; (8004030 <VL53L0X_ClearInterruptMask+0xd0>)
 8003f82:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003f86:	4621      	mov	r1, r4
 8003f88:	2001      	movs	r0, #1
 8003f8a:	f003 fcaf 	bl	80078ec <trace_print_module_function>

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8003f92:	2201      	movs	r2, #1
 8003f94:	210b      	movs	r1, #11
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fd fd10 	bl	80019bc <VL53L0X_WrByte>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	210b      	movs	r1, #11
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7fd fd09 	bl	80019bc <VL53L0X_WrByte>
 8003faa:	4603      	mov	r3, r0
 8003fac:	461a      	mov	r2, r3
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8003fb4:	f107 030d 	add.w	r3, r7, #13
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2113      	movs	r1, #19
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7fd fd7f 	bl	8001ac0 <VL53L0X_RdByte>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8003fcc:	7bbb      	ldrb	r3, [r7, #14]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8003fd2:	7b7b      	ldrb	r3, [r7, #13]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d006      	beq.n	8003fea <VL53L0X_ClearInterruptMask+0x8a>
			&& (LoopCount < 3)
 8003fdc:	7bbb      	ldrb	r3, [r7, #14]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d803      	bhi.n	8003fea <VL53L0X_ClearInterruptMask+0x8a>
			&& (Status == VL53L0X_ERROR_NONE));
 8003fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0d3      	beq.n	8003f92 <VL53L0X_ClearInterruptMask+0x32>


	if (LoopCount >= 3)
 8003fea:	7bbb      	ldrb	r3, [r7, #14]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <VL53L0X_ClearInterruptMask+0x94>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8003ff0:	23f4      	movs	r3, #244	; 0xf4
 8003ff2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <VL53L0X_ClearInterruptMask+0xc8>)
 8003ff6:	681c      	ldr	r4, [r3, #0]
 8003ff8:	f003 fd26 	bl	8007a48 <HAL_GetTick>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	461a      	mov	r2, r3
 8004000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004004:	9302      	str	r3, [sp, #8]
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <VL53L0X_ClearInterruptMask+0xcc>)
 8004008:	9301      	str	r3, [sp, #4]
 800400a:	9200      	str	r2, [sp, #0]
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <VL53L0X_ClearInterruptMask+0xd4>)
 800400e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004012:	4621      	mov	r1, r4
 8004014:	2001      	movs	r0, #1
 8004016:	f003 fc69 	bl	80078ec <trace_print_module_function>
	return Status;
 800401a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	bd90      	pop	{r4, r7, pc}
 8004026:	bf00      	nop
 8004028:	200007c8 	.word	0x200007c8
 800402c:	0800c828 	.word	0x0800c828
 8004030:	0800bd28 	.word	0x0800bd28
 8004034:	0800bd3c 	.word	0x0800bd3c

08004038 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8004038:	b590      	push	{r4, r7, lr}
 800403a:	b089      	sub	sp, #36	; 0x24
 800403c:	af04      	add	r7, sp, #16
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004042:	2300      	movs	r3, #0
 8004044:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");
 8004046:	4b1f      	ldr	r3, [pc, #124]	; (80040c4 <VL53L0X_GetInterruptMaskStatus+0x8c>)
 8004048:	681c      	ldr	r4, [r3, #0]
 800404a:	f003 fcfd 	bl	8007a48 <HAL_GetTick>
 800404e:	4603      	mov	r3, r0
 8004050:	461a      	mov	r2, r3
 8004052:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <VL53L0X_GetInterruptMaskStatus+0x90>)
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	9200      	str	r2, [sp, #0]
 8004058:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <VL53L0X_GetInterruptMaskStatus+0x94>)
 800405a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800405e:	4621      	mov	r1, r4
 8004060:	2001      	movs	r0, #1
 8004062:	f003 fc43 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8004066:	f107 030e 	add.w	r3, r7, #14
 800406a:	461a      	mov	r2, r3
 800406c:	2113      	movs	r1, #19
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fd fd26 	bl	8001ac0 <VL53L0X_RdByte>
 8004074:	4603      	mov	r3, r0
 8004076:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8004078:	7bbb      	ldrb	r3, [r7, #14]
 800407a:	f003 0207 	and.w	r2, r3, #7
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8004082:	7bbb      	ldrb	r3, [r7, #14]
 8004084:	f003 0318 	and.w	r3, r3, #24
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <VL53L0X_GetInterruptMaskStatus+0x58>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800408c:	23fa      	movs	r3, #250	; 0xfa
 800408e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
 8004090:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <VL53L0X_GetInterruptMaskStatus+0x8c>)
 8004092:	681c      	ldr	r4, [r3, #0]
 8004094:	f003 fcd8 	bl	8007a48 <HAL_GetTick>
 8004098:	4603      	mov	r3, r0
 800409a:	461a      	mov	r2, r3
 800409c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040a0:	9302      	str	r3, [sp, #8]
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <VL53L0X_GetInterruptMaskStatus+0x90>)
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	9200      	str	r2, [sp, #0]
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <VL53L0X_GetInterruptMaskStatus+0x98>)
 80040aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80040ae:	4621      	mov	r1, r4
 80040b0:	2001      	movs	r0, #1
 80040b2:	f003 fc1b 	bl	80078ec <trace_print_module_function>
	return Status;
 80040b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd90      	pop	{r4, r7, pc}
 80040c2:	bf00      	nop
 80040c4:	200007c8 	.word	0x200007c8
 80040c8:	0800c844 	.word	0x0800c844
 80040cc:	0800bd28 	.word	0x0800bd28
 80040d0:	0800bd3c 	.word	0x0800bd3c

080040d4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b08b      	sub	sp, #44	; 0x2c
 80040d8:	af04      	add	r7, sp, #16
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040e0:	2300      	movs	r3, #0
 80040e2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 80040e4:	4b17      	ldr	r3, [pc, #92]	; (8004144 <VL53L0X_PerformRefSpadManagement+0x70>)
 80040e6:	681c      	ldr	r4, [r3, #0]
 80040e8:	f003 fcae 	bl	8007a48 <HAL_GetTick>
 80040ec:	4603      	mov	r3, r0
 80040ee:	461a      	mov	r2, r3
 80040f0:	4b15      	ldr	r3, [pc, #84]	; (8004148 <VL53L0X_PerformRefSpadManagement+0x74>)
 80040f2:	9301      	str	r3, [sp, #4]
 80040f4:	9200      	str	r2, [sp, #0]
 80040f6:	4b15      	ldr	r3, [pc, #84]	; (800414c <VL53L0X_PerformRefSpadManagement+0x78>)
 80040f8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80040fc:	4621      	mov	r1, r4
 80040fe:	2001      	movs	r0, #1
 8004100:	f003 fbf4 	bl	80078ec <trace_print_module_function>

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 fa1f 	bl	800454c <VL53L0X_perform_ref_spad_management>
 800410e:	4603      	mov	r3, r0
 8004110:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);
 8004112:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <VL53L0X_PerformRefSpadManagement+0x70>)
 8004114:	681c      	ldr	r4, [r3, #0]
 8004116:	f003 fc97 	bl	8007a48 <HAL_GetTick>
 800411a:	4603      	mov	r3, r0
 800411c:	461a      	mov	r2, r3
 800411e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004122:	9302      	str	r3, [sp, #8]
 8004124:	4b08      	ldr	r3, [pc, #32]	; (8004148 <VL53L0X_PerformRefSpadManagement+0x74>)
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	9200      	str	r2, [sp, #0]
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <VL53L0X_PerformRefSpadManagement+0x7c>)
 800412c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004130:	4621      	mov	r1, r4
 8004132:	2001      	movs	r0, #1
 8004134:	f003 fbda 	bl	80078ec <trace_print_module_function>

	return Status;
 8004138:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800413c:	4618      	mov	r0, r3
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	bd90      	pop	{r4, r7, pc}
 8004144:	200007c8 	.word	0x200007c8
 8004148:	0800c950 	.word	0x0800c950
 800414c:	0800bd28 	.word	0x0800bd28
 8004150:	0800bd3c 	.word	0x0800bd3c

08004154 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800415e:	2300      	movs	r3, #0
 8004160:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8004162:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004166:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8004168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800416c:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800416e:	f107 0308 	add.w	r3, r7, #8
 8004172:	461a      	mov	r2, r3
 8004174:	2128      	movs	r1, #40	; 0x28
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fd fccc 	bl	8001b14 <VL53L0X_RdWord>
 800417c:	4603      	mov	r3, r0
 800417e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8004180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d11e      	bne.n	80041c6 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8004188:	893b      	ldrh	r3, [r7, #8]
 800418a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800418e:	b29b      	uxth	r3, r3
 8004190:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8004192:	893b      	ldrh	r3, [r7, #8]
 8004194:	461a      	mov	r2, r3
 8004196:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800419a:	429a      	cmp	r2, r3
 800419c:	dd0b      	ble.n	80041b6 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800419e:	893a      	ldrh	r2, [r7, #8]
 80041a0:	897b      	ldrh	r3, [r7, #10]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	b21b      	sxth	r3, r3
 80041a8:	461a      	mov	r2, r3
					* 250;
 80041aa:	23fa      	movs	r3, #250	; 0xfa
 80041ac:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e007      	b.n	80041c6 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80041b6:	893b      	ldrh	r3, [r7, #8]
 80041b8:	b21b      	sxth	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	23fa      	movs	r3, #250	; 0xfa
 80041be:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80041c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b08b      	sub	sp, #44	; 0x2c
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80041e0:	2308      	movs	r3, #8
 80041e2:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f04f 32ff 	mov.w	r2, #4294967295
 80041ee:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004202:	69b9      	ldr	r1, [r7, #24]
 8004204:	fb01 f202 	mul.w	r2, r1, r2
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
 8004210:	e030      	b.n	8004274 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	4413      	add	r3, r2
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8004220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	429a      	cmp	r2, r3
 8004226:	d11e      	bne.n	8004266 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8004228:	7ffa      	ldrb	r2, [r7, #31]
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	fa42 f303 	asr.w	r3, r2, r3
 8004230:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8004236:	e016      	b.n	8004266 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8004238:	7ffb      	ldrb	r3, [r7, #31]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <get_next_good_spad+0x88>
				success = 1;
 8004242:	2301      	movs	r3, #1
 8004244:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	fb02 f203 	mul.w	r2, r2, r3
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	4413      	add	r3, r2
 8004252:	461a      	mov	r2, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	601a      	str	r2, [r3, #0]
				break;
 8004258:	e009      	b.n	800426e <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800425a:	7ffb      	ldrb	r3, [r7, #31]
 800425c:	085b      	lsrs	r3, r3, #1
 800425e:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	3301      	adds	r3, #1
 8004264:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8004266:	6a3a      	ldr	r2, [r7, #32]
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	429a      	cmp	r2, r3
 800426c:	d3e4      	bcc.n	8004238 <get_next_good_spad+0x66>
				coarseIndex++) {
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	3301      	adds	r3, #1
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	429a      	cmp	r2, r3
 800427a:	d202      	bcs.n	8004282 <get_next_good_spad+0xb0>
 800427c:	7fbb      	ldrb	r3, [r7, #30]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0c7      	beq.n	8004212 <get_next_good_spad+0x40>
		}
	}
}
 8004282:	bf00      	nop
 8004284:	372c      	adds	r7, #44	; 0x2c
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	099b      	lsrs	r3, r3, #6
 80042a0:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80042a2:	4a07      	ldr	r2, [pc, #28]	; (80042c0 <is_aperture+0x30>)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <is_aperture+0x22>
		isAperture = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	200007b8 	.word	0x200007b8

080042c4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b089      	sub	sp, #36	; 0x24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80042d0:	2300      	movs	r3, #0
 80042d2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80042d4:	2308      	movs	r3, #8
 80042d6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80042ea:	69b9      	ldr	r1, [r7, #24]
 80042ec:	fb01 f202 	mul.w	r2, r1, r2
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d302      	bcc.n	8004302 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80042fc:	23ce      	movs	r3, #206	; 0xce
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e010      	b.n	8004324 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	4413      	add	r3, r2
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	b25a      	sxtb	r2, r3
 800430c:	2101      	movs	r1, #1
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	fa01 f303 	lsl.w	r3, r1, r3
 8004314:	b25b      	sxtb	r3, r3
 8004316:	4313      	orrs	r3, r2
 8004318:	b259      	sxtb	r1, r3
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	4413      	add	r3, r2
 8004320:	b2ca      	uxtb	r2, r1
 8004322:	701a      	strb	r2, [r3, #0]

	return status;
 8004324:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3724      	adds	r7, #36	; 0x24
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800433e:	2306      	movs	r3, #6
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	21b0      	movs	r1, #176	; 0xb0
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7fd fadd 	bl	8001904 <VL53L0X_WriteMulti>
 800434a:	4603      	mov	r3, r0
 800434c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800434e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8004364:	2306      	movs	r3, #6
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	21b0      	movs	r1, #176	; 0xb0
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fd fafa 	bl	8001964 <VL53L0X_ReadMulti>
 8004370:	4603      	mov	r3, r0
 8004372:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8004374:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08c      	sub	sp, #48	; 0x30
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	460b      	mov	r3, r1
 800438e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004390:	2300      	movs	r3, #0
 8004392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8004396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004398:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800439a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800439c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800439e:	2300      	movs	r3, #0
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a2:	e02b      	b.n	80043fc <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80043a4:	f107 031c 	add.w	r3, r7, #28
 80043a8:	6a3a      	ldr	r2, [r7, #32]
 80043aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff ff10 	bl	80041d2 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b8:	d103      	bne.n	80043c2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80043ba:	23ce      	movs	r3, #206	; 0xce
 80043bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80043c0:	e020      	b.n	8004404 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	461a      	mov	r2, r3
 80043c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c8:	4413      	add	r3, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff ff60 	bl	8004290 <is_aperture>
 80043d0:	4603      	mov	r3, r0
 80043d2:	461a      	mov	r2, r3
 80043d4:	7afb      	ldrb	r3, [r7, #11]
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d003      	beq.n	80043e2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80043da:	23ce      	movs	r3, #206	; 0xce
 80043dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80043e0:	e010      	b.n	8004404 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80043e6:	6a3a      	ldr	r2, [r7, #32]
 80043e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043ea:	6838      	ldr	r0, [r7, #0]
 80043ec:	f7ff ff6a 	bl	80042c4 <enable_spad_bit>
		currentSpad++;
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	3301      	adds	r3, #1
 80043f4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	3301      	adds	r3, #1
 80043fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80043fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004400:	429a      	cmp	r2, r3
 8004402:	d3cf      	bcc.n	80043a4 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8004404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004406:	6a3a      	ldr	r2, [r7, #32]
 8004408:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800440a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8004412:	6839      	ldr	r1, [r7, #0]
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7ff ff8d 	bl	8004334 <set_ref_spad_map>
 800441a:	4603      	mov	r3, r0
 800441c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8004420:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004424:	2b00      	cmp	r3, #0
 8004426:	d121      	bne.n	800446c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8004428:	f107 0314 	add.w	r3, r7, #20
 800442c:	4619      	mov	r1, r3
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f7ff ff93 	bl	800435a <get_ref_spad_map>
 8004434:	4603      	mov	r3, r0
 8004436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800443e:	e011      	b.n	8004464 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	4413      	add	r3, r2
 8004446:	781a      	ldrb	r2, [r3, #0]
 8004448:	f107 0114 	add.w	r1, r7, #20
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	440b      	add	r3, r1
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d003      	beq.n	800445e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004456:	23ce      	movs	r3, #206	; 0xce
 8004458:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800445c:	e006      	b.n	800446c <enable_ref_spads+0xec>
			}
			i++;
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	3301      	adds	r3, #1
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8004464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	429a      	cmp	r2, r3
 800446a:	d3e9      	bcc.n	8004440 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800446c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004470:	4618      	mov	r0, r3
 8004472:	3730      	adds	r7, #48	; 0x30
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08a      	sub	sp, #40	; 0x28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004482:	2300      	movs	r3, #0
 8004484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004494:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8004498:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800449c:	2b00      	cmp	r3, #0
 800449e:	d107      	bne.n	80044b0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80044a0:	22c0      	movs	r2, #192	; 0xc0
 80044a2:	2101      	movs	r1, #1
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7fd fa89 	bl	80019bc <VL53L0X_WrByte>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80044b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d108      	bne.n	80044ca <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80044b8:	f107 0308 	add.w	r3, r7, #8
 80044bc:	4619      	mov	r1, r3
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff fb3e 	bl	8003b40 <VL53L0X_PerformSingleRangingMeasurement>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80044ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d107      	bne.n	80044e2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80044d2:	2201      	movs	r2, #1
 80044d4:	21ff      	movs	r1, #255	; 0xff
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fd fa70 	bl	80019bc <VL53L0X_WrByte>
 80044dc:	4603      	mov	r3, r0
 80044de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80044e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d107      	bne.n	80044fa <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	21b6      	movs	r1, #182	; 0xb6
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fd fb10 	bl	8001b14 <VL53L0X_RdWord>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80044fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d107      	bne.n	8004512 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004502:	2200      	movs	r2, #0
 8004504:	21ff      	movs	r1, #255	; 0xff
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fd fa58 	bl	80019bc <VL53L0X_WrByte>
 800450c:	4603      	mov	r3, r0
 800450e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8004512:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004516:	2b00      	cmp	r3, #0
 8004518:	d112      	bne.n	8004540 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800451a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800451e:	461a      	mov	r2, r3
 8004520:	2101      	movs	r1, #1
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fd fa4a 	bl	80019bc <VL53L0X_WrByte>
 8004528:	4603      	mov	r3, r0
 800452a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800452e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004532:	2b00      	cmp	r3, #0
 8004534:	d104      	bne.n	8004540 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800453c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8004540:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004544:	4618      	mov	r0, r3
 8004546:	3728      	adds	r7, #40	; 0x28
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800454c:	b590      	push	{r4, r7, lr}
 800454e:	b09d      	sub	sp, #116	; 0x74
 8004550:	af06      	add	r7, sp, #24
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004558:	2300      	movs	r3, #0
 800455a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800455e:	23b4      	movs	r3, #180	; 0xb4
 8004560:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8004564:	2303      	movs	r3, #3
 8004566:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8004568:	232c      	movs	r3, #44	; 0x2c
 800456a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8004578:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800457c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800457e:	2300      	movs	r3, #0
 8004580:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8004582:	2300      	movs	r3, #0
 8004584:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8004586:	2306      	movs	r3, #6
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800458a:	2300      	movs	r3, #0
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80045b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80045b2:	2300      	movs	r3, #0
 80045b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80045b6:	e009      	b.n	80045cc <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045bc:	4413      	add	r3, r2
 80045be:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80045c2:	2200      	movs	r2, #0
 80045c4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80045c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c8:	3301      	adds	r3, #1
 80045ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80045cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d3f1      	bcc.n	80045b8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80045d4:	2201      	movs	r2, #1
 80045d6:	21ff      	movs	r1, #255	; 0xff
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7fd f9ef 	bl	80019bc <VL53L0X_WrByte>
 80045de:	4603      	mov	r3, r0
 80045e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80045e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d107      	bne.n	80045fc <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80045ec:	2200      	movs	r2, #0
 80045ee:	214f      	movs	r1, #79	; 0x4f
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f7fd f9e3 	bl	80019bc <VL53L0X_WrByte>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80045fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004600:	2b00      	cmp	r3, #0
 8004602:	d107      	bne.n	8004614 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8004604:	222c      	movs	r2, #44	; 0x2c
 8004606:	214e      	movs	r1, #78	; 0x4e
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7fd f9d7 	bl	80019bc <VL53L0X_WrByte>
 800460e:	4603      	mov	r3, r0
 8004610:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004614:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004618:	2b00      	cmp	r3, #0
 800461a:	d107      	bne.n	800462c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800461c:	2200      	movs	r2, #0
 800461e:	21ff      	movs	r1, #255	; 0xff
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7fd f9cb 	bl	80019bc <VL53L0X_WrByte>
 8004626:	4603      	mov	r3, r0
 8004628:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800462c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004630:	2b00      	cmp	r3, #0
 8004632:	d109      	bne.n	8004648 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8004634:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004638:	461a      	mov	r2, r3
 800463a:	21b6      	movs	r1, #182	; 0xb6
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7fd f9bd 	bl	80019bc <VL53L0X_WrByte>
 8004642:	4603      	mov	r3, r0
 8004644:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8004648:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800464c:	2b00      	cmp	r3, #0
 800464e:	d107      	bne.n	8004660 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8004650:	2200      	movs	r2, #0
 8004652:	2180      	movs	r1, #128	; 0x80
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f7fd f9b1 	bl	80019bc <VL53L0X_WrByte>
 800465a:	4603      	mov	r3, r0
 800465c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8004660:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8004668:	f107 0210 	add.w	r2, r7, #16
 800466c:	f107 0111 	add.w	r1, r7, #17
 8004670:	2300      	movs	r3, #0
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fbbb 	bl	8004dee <VL53L0X_perform_ref_calibration>
 8004678:	4603      	mov	r3, r0
 800467a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800467e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004682:	2b00      	cmp	r3, #0
 8004684:	d121      	bne.n	80046ca <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800468a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800468c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800468e:	2300      	movs	r3, #0
 8004690:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8004692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004694:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80046a2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80046a6:	f107 0218 	add.w	r2, r7, #24
 80046aa:	9204      	str	r2, [sp, #16]
 80046ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046ae:	9203      	str	r2, [sp, #12]
 80046b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046b2:	9202      	str	r2, [sp, #8]
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	4623      	mov	r3, r4
 80046bc:	4602      	mov	r2, r0
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f7ff fe5e 	bl	8004380 <enable_ref_spads>
 80046c4:	4603      	mov	r3, r0
 80046c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80046ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d174      	bne.n	80047bc <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80046d6:	f107 0312 	add.w	r3, r7, #18
 80046da:	4619      	mov	r1, r3
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f7ff fecb 	bl	8004478 <perform_ref_signal_measurement>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80046e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d161      	bne.n	80047b4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80046f0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80046f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d25d      	bcs.n	80047b4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80046f8:	2300      	movs	r3, #0
 80046fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80046fc:	e009      	b.n	8004712 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004702:	4413      	add	r3, r2
 8004704:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800470c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800470e:	3301      	adds	r3, #1
 8004710:	64bb      	str	r3, [r7, #72]	; 0x48
 8004712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	429a      	cmp	r2, r3
 8004718:	d3f1      	bcc.n	80046fe <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800471a:	e002      	b.n	8004722 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800471c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800471e:	3301      	adds	r3, #1
 8004720:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8004722:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8004726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004728:	4413      	add	r3, r2
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fdb0 	bl	8004290 <is_aperture>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d103      	bne.n	800473e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8004736:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473a:	429a      	cmp	r2, r3
 800473c:	d3ee      	bcc.n	800471c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800473e:	2301      	movs	r3, #1
 8004740:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8004742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004744:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8004752:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004756:	f107 0218 	add.w	r2, r7, #24
 800475a:	9204      	str	r2, [sp, #16]
 800475c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800475e:	9203      	str	r2, [sp, #12]
 8004760:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004762:	9202      	str	r2, [sp, #8]
 8004764:	9301      	str	r3, [sp, #4]
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	4623      	mov	r3, r4
 800476c:	4602      	mov	r2, r0
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7ff fe06 	bl	8004380 <enable_ref_spads>
 8004774:	4603      	mov	r3, r0
 8004776:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800477a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800477e:	2b00      	cmp	r3, #0
 8004780:	d11b      	bne.n	80047ba <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8004786:	f107 0312 	add.w	r3, r7, #18
 800478a:	4619      	mov	r1, r3
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f7ff fe73 	bl	8004478 <perform_ref_signal_measurement>
 8004792:	4603      	mov	r3, r0
 8004794:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8004798:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10c      	bne.n	80047ba <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80047a0:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80047a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d208      	bcs.n	80047ba <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80047a8:	2301      	movs	r3, #1
 80047aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80047ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b0:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80047b2:	e002      	b.n	80047ba <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047b8:	e000      	b.n	80047bc <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80047ba:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80047bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f040 80af 	bne.w	8004924 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80047c6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80047c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80047ca:	429a      	cmp	r2, r3
 80047cc:	f240 80aa 	bls.w	8004924 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80047d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80047d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d8:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80047e0:	f107 031c 	add.w	r3, r7, #28
 80047e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e6:	4618      	mov	r0, r3
 80047e8:	f006 fbbc 	bl	800af64 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80047ec:	8a7b      	ldrh	r3, [r7, #18]
 80047ee:	461a      	mov	r2, r3
 80047f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bfb8      	it	lt
 80047f8:	425b      	neglt	r3, r3
 80047fa:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8004802:	e086      	b.n	8004912 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800480a:	f107 0314 	add.w	r3, r7, #20
 800480e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004812:	f7ff fcde 	bl	80041d2 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481c:	d103      	bne.n	8004826 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800481e:	23ce      	movs	r3, #206	; 0xce
 8004820:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8004824:	e07e      	b.n	8004924 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8004826:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4413      	add	r3, r2
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fd2e 	bl	8004290 <is_aperture>
 8004834:	4603      	mov	r3, r0
 8004836:	461a      	mov	r2, r3
 8004838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800483a:	4293      	cmp	r3, r2
 800483c:	d003      	beq.n	8004846 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800483e:	2301      	movs	r3, #1
 8004840:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8004844:	e06e      	b.n	8004924 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8004846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004848:	3301      	adds	r3, #1
 800484a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8004856:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fd32 	bl	80042c4 <enable_spad_bit>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004866:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10c      	bne.n	8004888 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800486e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004870:	3301      	adds	r3, #1
 8004872:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800487a:	4619      	mov	r1, r3
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f7ff fd59 	bl	8004334 <set_ref_spad_map>
 8004882:	4603      	mov	r3, r0
 8004884:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8004888:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800488c:	2b00      	cmp	r3, #0
 800488e:	d146      	bne.n	800491e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8004890:	f107 0312 	add.w	r3, r7, #18
 8004894:	4619      	mov	r1, r3
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f7ff fdee 	bl	8004478 <perform_ref_signal_measurement>
 800489c:	4603      	mov	r3, r0
 800489e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80048a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d13b      	bne.n	8004922 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80048aa:	8a7b      	ldrh	r3, [r7, #18]
 80048ac:	461a      	mov	r2, r3
 80048ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	bfb8      	it	lt
 80048b6:	425b      	neglt	r3, r3
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80048ba:	8a7b      	ldrh	r3, [r7, #18]
 80048bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048be:	429a      	cmp	r2, r3
 80048c0:	d21c      	bcs.n	80048fc <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80048c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d914      	bls.n	80048f4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80048ca:	f107 031c 	add.w	r3, r7, #28
 80048ce:	4619      	mov	r1, r3
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff fd2f 	bl	8004334 <set_ref_spad_map>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80048e2:	f107 011c 	add.w	r1, r7, #28
 80048e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e8:	4618      	mov	r0, r3
 80048ea:	f006 fb3b 	bl	800af64 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80048ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f0:	3b01      	subs	r3, #1
 80048f2:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048fa:	e00a      	b.n	8004912 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8004906:	f107 031c 	add.w	r3, r7, #28
 800490a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800490c:	4618      	mov	r0, r3
 800490e:	f006 fb29 	bl	800af64 <memcpy>
		while (!complete) {
 8004912:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004916:	2b00      	cmp	r3, #0
 8004918:	f43f af74 	beq.w	8004804 <VL53L0X_perform_ref_spad_management+0x2b8>
 800491c:	e002      	b.n	8004924 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800491e:	bf00      	nop
 8004920:	e000      	b.n	8004924 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004922:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004924:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004928:	2b00      	cmp	r3, #0
 800492a:	d115      	bne.n	8004958 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004930:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8004938:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	b2da      	uxtb	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	781a      	ldrb	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8004958:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800495c:	4618      	mov	r0, r3
 800495e:	375c      	adds	r7, #92	; 0x5c
 8004960:	46bd      	mov	sp, r7
 8004962:	bd90      	pop	{r4, r7, pc}

08004964 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8004964:	b590      	push	{r4, r7, lr}
 8004966:	b093      	sub	sp, #76	; 0x4c
 8004968:	af06      	add	r7, sp, #24
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	4613      	mov	r3, r2
 8004970:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004972:	2300      	movs	r3, #0
 8004974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800497c:	23b4      	movs	r3, #180	; 0xb4
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8004982:	2306      	movs	r3, #6
 8004984:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8004986:	232c      	movs	r3, #44	; 0x2c
 8004988:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800498a:	2201      	movs	r2, #1
 800498c:	21ff      	movs	r1, #255	; 0xff
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f7fd f814 	bl	80019bc <VL53L0X_WrByte>
 8004994:	4603      	mov	r3, r0
 8004996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800499a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d107      	bne.n	80049b2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80049a2:	2200      	movs	r2, #0
 80049a4:	214f      	movs	r1, #79	; 0x4f
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7fd f808 	bl	80019bc <VL53L0X_WrByte>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80049b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d107      	bne.n	80049ca <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80049ba:	222c      	movs	r2, #44	; 0x2c
 80049bc:	214e      	movs	r1, #78	; 0x4e
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7fc fffc 	bl	80019bc <VL53L0X_WrByte>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80049ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d107      	bne.n	80049e2 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80049d2:	2200      	movs	r2, #0
 80049d4:	21ff      	movs	r1, #255	; 0xff
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7fc fff0 	bl	80019bc <VL53L0X_WrByte>
 80049dc:	4603      	mov	r3, r0
 80049de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80049e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80049ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049ee:	461a      	mov	r2, r3
 80049f0:	21b6      	movs	r1, #182	; 0xb6
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f7fc ffe2 	bl	80019bc <VL53L0X_WrByte>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80049fe:	2300      	movs	r3, #0
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
 8004a02:	e009      	b.n	8004a18 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	3301      	adds	r3, #1
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
 8004a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d3f1      	bcc.n	8004a04 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d011      	beq.n	8004a4a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004a26:	e002      	b.n	8004a2e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004a2e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	4413      	add	r3, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fc2a 	bl	8004290 <is_aperture>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d103      	bne.n	8004a4a <VL53L0X_set_reference_spads+0xe6>
 8004a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d3ee      	bcc.n	8004a28 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8004a56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a5a:	79f9      	ldrb	r1, [r7, #7]
 8004a5c:	f107 0214 	add.w	r2, r7, #20
 8004a60:	9204      	str	r2, [sp, #16]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	9203      	str	r2, [sp, #12]
 8004a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a68:	9202      	str	r2, [sp, #8]
 8004a6a:	9301      	str	r3, [sp, #4]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	4623      	mov	r3, r4
 8004a72:	4602      	mov	r2, r0
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f7ff fc83 	bl	8004380 <enable_ref_spads>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004a80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10c      	bne.n	8004aa2 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	79fa      	ldrb	r2, [r7, #7]
 8004a9e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8004aa2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3734      	adds	r7, #52	; 0x34
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd90      	pop	{r4, r7, pc}

08004aae <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	461a      	mov	r2, r3
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fc ff72 	bl	80019bc <VL53L0X_WrByte>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d104      	bne.n	8004aee <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f9bf 	bl	8004e68 <VL53L0X_measurement_poll_for_completion>
 8004aea:	4603      	mov	r3, r0
 8004aec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d105      	bne.n	8004b02 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004af6:	2100      	movs	r1, #0
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff fa31 	bl	8003f60 <VL53L0X_ClearInterruptMask>
 8004afe:	4603      	mov	r3, r0
 8004b00:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc ff54 	bl	80019bc <VL53L0X_WrByte>
 8004b14:	4603      	mov	r3, r0
 8004b16:	73fb      	strb	r3, [r7, #15]

	return Status;
 8004b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	4608      	mov	r0, r1
 8004b2e:	4611      	mov	r1, r2
 8004b30:	461a      	mov	r2, r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	70fb      	strb	r3, [r7, #3]
 8004b36:	460b      	mov	r3, r1
 8004b38:	70bb      	strb	r3, [r7, #2]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004b46:	2201      	movs	r2, #1
 8004b48:	21ff      	movs	r1, #255	; 0xff
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fc ff36 	bl	80019bc <VL53L0X_WrByte>
 8004b50:	4603      	mov	r3, r0
 8004b52:	461a      	mov	r2, r3
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fc ff2c 	bl	80019bc <VL53L0X_WrByte>
 8004b64:	4603      	mov	r3, r0
 8004b66:	461a      	mov	r2, r3
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004b6e:	2200      	movs	r2, #0
 8004b70:	21ff      	movs	r1, #255	; 0xff
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fc ff22 	bl	80019bc <VL53L0X_WrByte>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01e      	beq.n	8004bc6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8004b88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d009      	beq.n	8004ba4 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	21cb      	movs	r1, #203	; 0xcb
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7fc ff93 	bl	8001ac0 <VL53L0X_RdByte>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004ba4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d02a      	beq.n	8004c02 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004bac:	f107 030e 	add.w	r3, r7, #14
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	21ee      	movs	r1, #238	; 0xee
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7fc ff83 	bl	8001ac0 <VL53L0X_RdByte>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	73fb      	strb	r3, [r7, #15]
 8004bc4:	e01d      	b.n	8004c02 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8004bc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8004bce:	78bb      	ldrb	r3, [r7, #2]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	21cb      	movs	r1, #203	; 0xcb
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7fc fef1 	bl	80019bc <VL53L0X_WrByte>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	461a      	mov	r2, r3
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004be4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8004bec:	787b      	ldrb	r3, [r7, #1]
 8004bee:	2280      	movs	r2, #128	; 0x80
 8004bf0:	21ee      	movs	r1, #238	; 0xee
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fc ff30 	bl	8001a58 <VL53L0X_UpdateByte>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004c02:	2201      	movs	r2, #1
 8004c04:	21ff      	movs	r1, #255	; 0xff
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fc fed8 	bl	80019bc <VL53L0X_WrByte>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	461a      	mov	r2, r3
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004c16:	2201      	movs	r2, #1
 8004c18:	2100      	movs	r1, #0
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc fece 	bl	80019bc <VL53L0X_WrByte>
 8004c20:	4603      	mov	r3, r0
 8004c22:	461a      	mov	r2, r3
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	21ff      	movs	r1, #255	; 0xff
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fc fec4 	bl	80019bc <VL53L0X_WrByte>
 8004c34:	4603      	mov	r3, r0
 8004c36:	461a      	mov	r2, r3
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8004c3e:	7bbb      	ldrb	r3, [r7, #14]
 8004c40:	f023 0310 	bic.w	r3, r3, #16
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	701a      	strb	r2, [r3, #0]

	return Status;
 8004c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b08a      	sub	sp, #40	; 0x28
 8004c5a:	af04      	add	r7, sp, #16
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	4611      	mov	r1, r2
 8004c62:	461a      	mov	r2, r3
 8004c64:	460b      	mov	r3, r1
 8004c66:	71fb      	strb	r3, [r7, #7]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004c80:	79bb      	ldrb	r3, [r7, #6]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004c8c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8004c8e:	2201      	movs	r2, #1
 8004c90:	2101      	movs	r1, #1
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f7fc fe92 	bl	80019bc <VL53L0X_WrByte>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004c9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d105      	bne.n	8004cb0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8004ca4:	2140      	movs	r1, #64	; 0x40
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f7ff ff01 	bl	8004aae <VL53L0X_perform_single_ref_calibration>
 8004cac:	4603      	mov	r3, r0
 8004cae:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004cb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d115      	bne.n	8004ce4 <VL53L0X_perform_vhv_calibration+0x8e>
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d112      	bne.n	8004ce4 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004cbe:	7d39      	ldrb	r1, [r7, #20]
 8004cc0:	7d7a      	ldrb	r2, [r7, #21]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	9303      	str	r3, [sp, #12]
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	9302      	str	r3, [sp, #8]
 8004cca:	f107 0313 	add.w	r3, r7, #19
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f7ff ff23 	bl	8004b24 <VL53L0X_ref_calibration_io>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	75fb      	strb	r3, [r7, #23]
 8004ce2:	e002      	b.n	8004cea <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004cea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d112      	bne.n	8004d18 <VL53L0X_perform_vhv_calibration+0xc2>
 8004cf2:	79bb      	ldrb	r3, [r7, #6]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00f      	beq.n	8004d18 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004cf8:	7dbb      	ldrb	r3, [r7, #22]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7fc fe5c 	bl	80019bc <VL53L0X_WrByte>
 8004d04:	4603      	mov	r3, r0
 8004d06:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004d08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d103      	bne.n	8004d18 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	7dba      	ldrb	r2, [r7, #22]
 8004d14:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004d18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	; 0x28
 8004d28:	af04      	add	r7, sp, #16
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	4611      	mov	r1, r2
 8004d30:	461a      	mov	r2, r3
 8004d32:	460b      	mov	r3, r1
 8004d34:	71fb      	strb	r3, [r7, #7]
 8004d36:	4613      	mov	r3, r2
 8004d38:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004d4a:	79bb      	ldrb	r3, [r7, #6]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004d56:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8004d58:	2202      	movs	r2, #2
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7fc fe2d 	bl	80019bc <VL53L0X_WrByte>
 8004d62:	4603      	mov	r3, r0
 8004d64:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d105      	bne.n	8004d7a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8004d6e:	2100      	movs	r1, #0
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff fe9c 	bl	8004aae <VL53L0X_perform_single_ref_calibration>
 8004d76:	4603      	mov	r3, r0
 8004d78:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004d7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d115      	bne.n	8004dae <VL53L0X_perform_phase_calibration+0x8a>
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d112      	bne.n	8004dae <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004d88:	7d39      	ldrb	r1, [r7, #20]
 8004d8a:	7d7a      	ldrb	r2, [r7, #21]
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	9303      	str	r3, [sp, #12]
 8004d90:	2300      	movs	r3, #0
 8004d92:	9302      	str	r3, [sp, #8]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	f107 0313 	add.w	r3, r7, #19
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	2101      	movs	r1, #1
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f7ff febe 	bl	8004b24 <VL53L0X_ref_calibration_io>
 8004da8:	4603      	mov	r3, r0
 8004daa:	75fb      	strb	r3, [r7, #23]
 8004dac:	e002      	b.n	8004db4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004db4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d112      	bne.n	8004de2 <VL53L0X_perform_phase_calibration+0xbe>
 8004dbc:	79bb      	ldrb	r3, [r7, #6]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00f      	beq.n	8004de2 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004dc2:	7dbb      	ldrb	r3, [r7, #22]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f7fc fdf7 	bl	80019bc <VL53L0X_WrByte>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004dd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d103      	bne.n	8004de2 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	7dba      	ldrb	r2, [r7, #22]
 8004dde:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004de2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b086      	sub	sp, #24
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
 8004dfa:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004e0a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8004e0c:	78fa      	ldrb	r2, [r7, #3]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	68b9      	ldr	r1, [r7, #8]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f7ff ff1f 	bl	8004c56 <VL53L0X_perform_vhv_calibration>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004e1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d107      	bne.n	8004e34 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8004e24:	78fa      	ldrb	r2, [r7, #3]
 8004e26:	2300      	movs	r3, #0
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f7ff ff7a 	bl	8004d24 <VL53L0X_perform_phase_calibration>
 8004e30:	4603      	mov	r3, r0
 8004e32:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8004e34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10f      	bne.n	8004e5c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004e3c:	7dbb      	ldrb	r3, [r7, #22]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	2101      	movs	r1, #1
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f7fc fdba 	bl	80019bc <VL53L0X_WrByte>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004e4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d103      	bne.n	8004e5c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	7dba      	ldrb	r2, [r7, #22]
 8004e58:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004e5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8004e68:	b590      	push	{r4, r7, lr}
 8004e6a:	b08b      	sub	sp, #44	; 0x2c
 8004e6c:	af04      	add	r7, sp, #16
 8004e6e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e70:	2300      	movs	r3, #0
 8004e72:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");
 8004e78:	4b25      	ldr	r3, [pc, #148]	; (8004f10 <VL53L0X_measurement_poll_for_completion+0xa8>)
 8004e7a:	681c      	ldr	r4, [r3, #0]
 8004e7c:	f002 fde4 	bl	8007a48 <HAL_GetTick>
 8004e80:	4603      	mov	r3, r0
 8004e82:	461a      	mov	r2, r3
 8004e84:	4b23      	ldr	r3, [pc, #140]	; (8004f14 <VL53L0X_measurement_poll_for_completion+0xac>)
 8004e86:	9301      	str	r3, [sp, #4]
 8004e88:	9200      	str	r2, [sp, #0]
 8004e8a:	4b23      	ldr	r3, [pc, #140]	; (8004f18 <VL53L0X_measurement_poll_for_completion+0xb0>)
 8004e8c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004e90:	4621      	mov	r1, r4
 8004e92:	2001      	movs	r0, #1
 8004e94:	f002 fd2a 	bl	80078ec <trace_print_module_function>

	LoopNb = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004e9c:	f107 030f 	add.w	r3, r7, #15
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fe fc90 	bl	80037c8 <VL53L0X_GetMeasurementDataReady>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8004eac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d110      	bne.n	8004ed6 <VL53L0X_measurement_poll_for_completion+0x6e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d00f      	beq.n	8004eda <VL53L0X_measurement_poll_for_completion+0x72>
			break; /* done note that status == 0 */

		LoopNb++;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004ec6:	d302      	bcc.n	8004ece <VL53L0X_measurement_poll_for_completion+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8004ec8:	23f9      	movs	r3, #249	; 0xf9
 8004eca:	75fb      	strb	r3, [r7, #23]
			break;
 8004ecc:	e006      	b.n	8004edc <VL53L0X_measurement_poll_for_completion+0x74>
		}

		VL53L0X_PollingDelay(Dev);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fc fe94 	bl	8001bfc <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004ed4:	e7e2      	b.n	8004e9c <VL53L0X_measurement_poll_for_completion+0x34>
			break; /* the error is set */
 8004ed6:	bf00      	nop
 8004ed8:	e000      	b.n	8004edc <VL53L0X_measurement_poll_for_completion+0x74>
			break; /* done note that status == 0 */
 8004eda:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);
 8004edc:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <VL53L0X_measurement_poll_for_completion+0xa8>)
 8004ede:	681c      	ldr	r4, [r3, #0]
 8004ee0:	f002 fdb2 	bl	8007a48 <HAL_GetTick>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004eec:	9302      	str	r3, [sp, #8]
 8004eee:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <VL53L0X_measurement_poll_for_completion+0xac>)
 8004ef0:	9301      	str	r3, [sp, #4]
 8004ef2:	9200      	str	r2, [sp, #0]
 8004ef4:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <VL53L0X_measurement_poll_for_completion+0xb4>)
 8004ef6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004efa:	4621      	mov	r1, r4
 8004efc:	2001      	movs	r0, #1
 8004efe:	f002 fcf5 	bl	80078ec <trace_print_module_function>

	return Status;
 8004f02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd90      	pop	{r4, r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	200007c8 	.word	0x200007c8
 8004f14:	0800c99c 	.word	0x0800c99c
 8004f18:	0800c974 	.word	0x0800c974
 8004f1c:	0800c988 	.word	0x0800c988

08004f20 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	3301      	adds	r3, #1
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b085      	sub	sp, #20
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	085b      	lsrs	r3, r3, #1
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8004f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f7c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8004f7e:	e002      	b.n	8004f86 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d8f8      	bhi.n	8004f80 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8004f8e:	e017      	b.n	8004fc0 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4413      	add	r3, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d30b      	bcc.n	8004fb4 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	4413      	add	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e002      	b.n	8004fba <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	089b      	lsrs	r3, r3, #2
 8004fbe:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e4      	bne.n	8004f90 <VL53L0X_isqrt+0x24>
	}

	return res;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8004fd4:	b590      	push	{r4, r7, lr}
 8004fd6:	b08b      	sub	sp, #44	; 0x2c
 8004fd8:	af04      	add	r7, sp, #16
 8004fda:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");
 8004fe0:	4b2f      	ldr	r3, [pc, #188]	; (80050a0 <VL53L0X_device_read_strobe+0xcc>)
 8004fe2:	681c      	ldr	r4, [r3, #0]
 8004fe4:	f002 fd30 	bl	8007a48 <HAL_GetTick>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	461a      	mov	r2, r3
 8004fec:	4b2d      	ldr	r3, [pc, #180]	; (80050a4 <VL53L0X_device_read_strobe+0xd0>)
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	9200      	str	r2, [sp, #0]
 8004ff2:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <VL53L0X_device_read_strobe+0xd4>)
 8004ff4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f002 fc76 	bl	80078ec <trace_print_module_function>

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005000:	2200      	movs	r2, #0
 8005002:	2183      	movs	r1, #131	; 0x83
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7fc fcd9 	bl	80019bc <VL53L0X_WrByte>
 800500a:	4603      	mov	r3, r0
 800500c:	461a      	mov	r2, r3
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	4313      	orrs	r3, r2
 8005012:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8005014:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d11e      	bne.n	800505a <VL53L0X_device_read_strobe+0x86>
		LoopNb = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005020:	f107 030f 	add.w	r3, r7, #15
 8005024:	461a      	mov	r2, r3
 8005026:	2183      	movs	r1, #131	; 0x83
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7fc fd49 	bl	8001ac0 <VL53L0X_RdByte>
 800502e:	4603      	mov	r3, r0
 8005030:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <VL53L0X_device_read_strobe+0x7a>
 8005038:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d106      	bne.n	800504e <VL53L0X_device_read_strobe+0x7a>
					break;

			LoopNb = LoopNb + 1;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	3301      	adds	r3, #1
 8005044:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800504c:	d3e8      	bcc.n	8005020 <VL53L0X_device_read_strobe+0x4c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005054:	d301      	bcc.n	800505a <VL53L0X_device_read_strobe+0x86>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005056:	23f9      	movs	r3, #249	; 0xf9
 8005058:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800505a:	2201      	movs	r2, #1
 800505c:	2183      	movs	r1, #131	; 0x83
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fc fcac 	bl	80019bc <VL53L0X_WrByte>
 8005064:	4603      	mov	r3, r0
 8005066:	461a      	mov	r2, r3
 8005068:	7dfb      	ldrb	r3, [r7, #23]
 800506a:	4313      	orrs	r3, r2
 800506c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
 800506e:	4b0c      	ldr	r3, [pc, #48]	; (80050a0 <VL53L0X_device_read_strobe+0xcc>)
 8005070:	681c      	ldr	r4, [r3, #0]
 8005072:	f002 fce9 	bl	8007a48 <HAL_GetTick>
 8005076:	4603      	mov	r3, r0
 8005078:	461a      	mov	r2, r3
 800507a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800507e:	9302      	str	r3, [sp, #8]
 8005080:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <VL53L0X_device_read_strobe+0xd0>)
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	9200      	str	r2, [sp, #0]
 8005086:	4b09      	ldr	r3, [pc, #36]	; (80050ac <VL53L0X_device_read_strobe+0xd8>)
 8005088:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800508c:	4621      	mov	r1, r4
 800508e:	2001      	movs	r0, #1
 8005090:	f002 fc2c 	bl	80078ec <trace_print_module_function>
	return Status;
 8005094:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005098:	4618      	mov	r0, r3
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	bd90      	pop	{r4, r7, pc}
 80050a0:	200007c8 	.word	0x200007c8
 80050a4:	0800c9c4 	.word	0x0800c9c4
 80050a8:	0800c974 	.word	0x0800c974
 80050ac:	0800c988 	.word	0x0800c988

080050b0 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80050b0:	b590      	push	{r4, r7, lr}
 80050b2:	b09d      	sub	sp, #116	; 0x74
 80050b4:	af04      	add	r7, sp, #16
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050bc:	2300      	movs	r3, #0
 80050be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80050d6:	2300      	movs	r3, #0
 80050d8:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80050e0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80050e4:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80050ee:	2300      	movs	r3, #0
 80050f0:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t NvmRefGoodSpadMap[VL53L0X_REF_SPAD_BUFFER_SIZE];
	int i;


	LOG_FUNCTION_START("");
 80050f2:	4b9b      	ldr	r3, [pc, #620]	; (8005360 <VL53L0X_get_info_from_device+0x2b0>)
 80050f4:	681c      	ldr	r4, [r3, #0]
 80050f6:	f002 fca7 	bl	8007a48 <HAL_GetTick>
 80050fa:	4603      	mov	r3, r0
 80050fc:	461a      	mov	r2, r3
 80050fe:	4b99      	ldr	r3, [pc, #612]	; (8005364 <VL53L0X_get_info_from_device+0x2b4>)
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	9200      	str	r2, [sp, #0]
 8005104:	4b98      	ldr	r3, [pc, #608]	; (8005368 <VL53L0X_get_info_from_device+0x2b8>)
 8005106:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800510a:	4621      	mov	r1, r4
 800510c:	2001      	movs	r0, #1
 800510e:	f002 fbed 	bl	80078ec <trace_print_module_function>

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005118:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800511c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005120:	2b07      	cmp	r3, #7
 8005122:	f000 8410 	beq.w	8005946 <VL53L0X_get_info_from_device+0x896>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005126:	2201      	movs	r2, #1
 8005128:	2180      	movs	r1, #128	; 0x80
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fc fc46 	bl	80019bc <VL53L0X_WrByte>
 8005130:	4603      	mov	r3, r0
 8005132:	461a      	mov	r2, r3
 8005134:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005138:	4313      	orrs	r3, r2
 800513a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800513e:	2201      	movs	r2, #1
 8005140:	21ff      	movs	r1, #255	; 0xff
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fc fc3a 	bl	80019bc <VL53L0X_WrByte>
 8005148:	4603      	mov	r3, r0
 800514a:	461a      	mov	r2, r3
 800514c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005150:	4313      	orrs	r3, r2
 8005152:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005156:	2200      	movs	r2, #0
 8005158:	2100      	movs	r1, #0
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fc fc2e 	bl	80019bc <VL53L0X_WrByte>
 8005160:	4603      	mov	r3, r0
 8005162:	461a      	mov	r2, r3
 8005164:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005168:	4313      	orrs	r3, r2
 800516a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800516e:	2206      	movs	r2, #6
 8005170:	21ff      	movs	r1, #255	; 0xff
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc fc22 	bl	80019bc <VL53L0X_WrByte>
 8005178:	4603      	mov	r3, r0
 800517a:	461a      	mov	r2, r3
 800517c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005180:	4313      	orrs	r3, r2
 8005182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005186:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800518a:	461a      	mov	r2, r3
 800518c:	2183      	movs	r1, #131	; 0x83
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fc fc96 	bl	8001ac0 <VL53L0X_RdByte>
 8005194:	4603      	mov	r3, r0
 8005196:	461a      	mov	r2, r3
 8005198:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800519c:	4313      	orrs	r3, r2
 800519e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80051a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	2183      	movs	r1, #131	; 0x83
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fc fc03 	bl	80019bc <VL53L0X_WrByte>
 80051b6:	4603      	mov	r3, r0
 80051b8:	461a      	mov	r2, r3
 80051ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051be:	4313      	orrs	r3, r2
 80051c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80051c4:	2207      	movs	r2, #7
 80051c6:	21ff      	movs	r1, #255	; 0xff
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7fc fbf7 	bl	80019bc <VL53L0X_WrByte>
 80051ce:	4603      	mov	r3, r0
 80051d0:	461a      	mov	r2, r3
 80051d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80051dc:	2201      	movs	r2, #1
 80051de:	2181      	movs	r1, #129	; 0x81
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7fc fbeb 	bl	80019bc <VL53L0X_WrByte>
 80051e6:	4603      	mov	r3, r0
 80051e8:	461a      	mov	r2, r3
 80051ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7fc fd01 	bl	8001bfc <VL53L0X_PollingDelay>
 80051fa:	4603      	mov	r3, r0
 80051fc:	461a      	mov	r2, r3
 80051fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005202:	4313      	orrs	r3, r2
 8005204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005208:	2201      	movs	r2, #1
 800520a:	2180      	movs	r1, #128	; 0x80
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7fc fbd5 	bl	80019bc <VL53L0X_WrByte>
 8005212:	4603      	mov	r3, r0
 8005214:	461a      	mov	r2, r3
 8005216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800521a:	4313      	orrs	r3, r2
 800521c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 80a0 	beq.w	800536c <VL53L0X_get_info_from_device+0x2bc>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800522c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005230:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005234:	2b00      	cmp	r3, #0
 8005236:	f040 8099 	bne.w	800536c <VL53L0X_get_info_from_device+0x2bc>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800523a:	226b      	movs	r2, #107	; 0x6b
 800523c:	2194      	movs	r1, #148	; 0x94
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fc fbbc 	bl	80019bc <VL53L0X_WrByte>
 8005244:	4603      	mov	r3, r0
 8005246:	461a      	mov	r2, r3
 8005248:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800524c:	4313      	orrs	r3, r2
 800524e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7ff febe 	bl	8004fd4 <VL53L0X_device_read_strobe>
 8005258:	4603      	mov	r3, r0
 800525a:	461a      	mov	r2, r3
 800525c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005260:	4313      	orrs	r3, r2
 8005262:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800526a:	461a      	mov	r2, r3
 800526c:	2190      	movs	r1, #144	; 0x90
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fc fc88 	bl	8001b84 <VL53L0X_RdDWord>
 8005274:	4603      	mov	r3, r0
 8005276:	461a      	mov	r2, r3
 8005278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800527c:	4313      	orrs	r3, r2
 800527e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	0a1b      	lsrs	r3, r3, #8
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800528c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	0bdb      	lsrs	r3, r3, #15
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800529e:	2224      	movs	r2, #36	; 0x24
 80052a0:	2194      	movs	r1, #148	; 0x94
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fc fb8a 	bl	80019bc <VL53L0X_WrByte>
 80052a8:	4603      	mov	r3, r0
 80052aa:	461a      	mov	r2, r3
 80052ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff fe8c 	bl	8004fd4 <VL53L0X_device_read_strobe>
 80052bc:	4603      	mov	r3, r0
 80052be:	461a      	mov	r2, r3
 80052c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80052ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052ce:	461a      	mov	r2, r3
 80052d0:	2190      	movs	r1, #144	; 0x90
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fc fc56 	bl	8001b84 <VL53L0X_RdDWord>
 80052d8:	4603      	mov	r3, r0
 80052da:	461a      	mov	r2, r3
 80052dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	0e1b      	lsrs	r3, r3, #24
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	0c1b      	lsrs	r3, r3, #16
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	0a1b      	lsrs	r3, r3, #8
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	b2db      	uxtb	r3, r3
 8005302:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005304:	2225      	movs	r2, #37	; 0x25
 8005306:	2194      	movs	r1, #148	; 0x94
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7fc fb57 	bl	80019bc <VL53L0X_WrByte>
 800530e:	4603      	mov	r3, r0
 8005310:	461a      	mov	r2, r3
 8005312:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005316:	4313      	orrs	r3, r2
 8005318:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff fe59 	bl	8004fd4 <VL53L0X_device_read_strobe>
 8005322:	4603      	mov	r3, r0
 8005324:	461a      	mov	r2, r3
 8005326:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800532a:	4313      	orrs	r3, r2
 800532c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005330:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005334:	461a      	mov	r2, r3
 8005336:	2190      	movs	r1, #144	; 0x90
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7fc fc23 	bl	8001b84 <VL53L0X_RdDWord>
 800533e:	4603      	mov	r3, r0
 8005340:	461a      	mov	r2, r3
 8005342:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005346:	4313      	orrs	r3, r2
 8005348:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	0e1b      	lsrs	r3, r3, #24
 8005350:	b2db      	uxtb	r3, r3
 8005352:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	0c1b      	lsrs	r3, r3, #16
 8005358:	b2db      	uxtb	r3, r3
 800535a:	737b      	strb	r3, [r7, #13]
 800535c:	e006      	b.n	800536c <VL53L0X_get_info_from_device+0x2bc>
 800535e:	bf00      	nop
 8005360:	200007c8 	.word	0x200007c8
 8005364:	0800c9e0 	.word	0x0800c9e0
 8005368:	0800c974 	.word	0x0800c974
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 8189 	beq.w	800568a <VL53L0X_get_info_from_device+0x5da>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005378:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800537c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005380:	2b00      	cmp	r3, #0
 8005382:	f040 8182 	bne.w	800568a <VL53L0X_get_info_from_device+0x5da>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8005386:	2202      	movs	r2, #2
 8005388:	2194      	movs	r1, #148	; 0x94
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fc fb16 	bl	80019bc <VL53L0X_WrByte>
 8005390:	4603      	mov	r3, r0
 8005392:	461a      	mov	r2, r3
 8005394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005398:	4313      	orrs	r3, r2
 800539a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff fe18 	bl	8004fd4 <VL53L0X_device_read_strobe>
 80053a4:	4603      	mov	r3, r0
 80053a6:	461a      	mov	r2, r3
 80053a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80053b2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80053b6:	461a      	mov	r2, r3
 80053b8:	2190      	movs	r1, #144	; 0x90
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fc fb80 	bl	8001ac0 <VL53L0X_RdByte>
 80053c0:	4603      	mov	r3, r0
 80053c2:	461a      	mov	r2, r3
 80053c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80053ce:	227b      	movs	r2, #123	; 0x7b
 80053d0:	2194      	movs	r1, #148	; 0x94
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fc faf2 	bl	80019bc <VL53L0X_WrByte>
 80053d8:	4603      	mov	r3, r0
 80053da:	461a      	mov	r2, r3
 80053dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff fdf4 	bl	8004fd4 <VL53L0X_device_read_strobe>
 80053ec:	4603      	mov	r3, r0
 80053ee:	461a      	mov	r2, r3
 80053f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80053fa:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80053fe:	461a      	mov	r2, r3
 8005400:	2190      	movs	r1, #144	; 0x90
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fc fb5c 	bl	8001ac0 <VL53L0X_RdByte>
 8005408:	4603      	mov	r3, r0
 800540a:	461a      	mov	r2, r3
 800540c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005410:	4313      	orrs	r3, r2
 8005412:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8005416:	2277      	movs	r2, #119	; 0x77
 8005418:	2194      	movs	r1, #148	; 0x94
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fc face 	bl	80019bc <VL53L0X_WrByte>
 8005420:	4603      	mov	r3, r0
 8005422:	461a      	mov	r2, r3
 8005424:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005428:	4313      	orrs	r3, r2
 800542a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff fdd0 	bl	8004fd4 <VL53L0X_device_read_strobe>
 8005434:	4603      	mov	r3, r0
 8005436:	461a      	mov	r2, r3
 8005438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800543c:	4313      	orrs	r3, r2
 800543e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005442:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005446:	461a      	mov	r2, r3
 8005448:	2190      	movs	r1, #144	; 0x90
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fc fb9a 	bl	8001b84 <VL53L0X_RdDWord>
 8005450:	4603      	mov	r3, r0
 8005452:	461a      	mov	r2, r3
 8005454:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005458:	4313      	orrs	r3, r2
 800545a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	0e5b      	lsrs	r3, r3, #25
 8005462:	b2db      	uxtb	r3, r3
 8005464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005468:	b2db      	uxtb	r3, r3
 800546a:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	0c9b      	lsrs	r3, r3, #18
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005476:	b2db      	uxtb	r3, r3
 8005478:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	0adb      	lsrs	r3, r3, #11
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005484:	b2db      	uxtb	r3, r3
 8005486:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	091b      	lsrs	r3, r3, #4
 800548c:	b2db      	uxtb	r3, r3
 800548e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005492:	b2db      	uxtb	r3, r3
 8005494:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	b2db      	uxtb	r3, r3
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80054a8:	2278      	movs	r2, #120	; 0x78
 80054aa:	2194      	movs	r1, #148	; 0x94
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7fc fa85 	bl	80019bc <VL53L0X_WrByte>
 80054b2:	4603      	mov	r3, r0
 80054b4:	461a      	mov	r2, r3
 80054b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7ff fd87 	bl	8004fd4 <VL53L0X_device_read_strobe>
 80054c6:	4603      	mov	r3, r0
 80054c8:	461a      	mov	r2, r3
 80054ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80054d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054d8:	461a      	mov	r2, r3
 80054da:	2190      	movs	r1, #144	; 0x90
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7fc fb51 	bl	8001b84 <VL53L0X_RdDWord>
 80054e2:	4603      	mov	r3, r0
 80054e4:	461a      	mov	r2, r3
 80054e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	0f5b      	lsrs	r3, r3, #29
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054fa:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80054fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005500:	4413      	add	r3, r2
 8005502:	b2db      	uxtb	r3, r3
 8005504:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	0d9b      	lsrs	r3, r3, #22
 800550a:	b2db      	uxtb	r3, r3
 800550c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005510:	b2db      	uxtb	r3, r3
 8005512:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8005514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005516:	0bdb      	lsrs	r3, r3, #15
 8005518:	b2db      	uxtb	r3, r3
 800551a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551e:	b2db      	uxtb	r3, r3
 8005520:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	0a1b      	lsrs	r3, r3, #8
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800552c:	b2db      	uxtb	r3, r3
 800552e:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	085b      	lsrs	r3, r3, #1
 8005534:	b2db      	uxtb	r3, r3
 8005536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800553a:	b2db      	uxtb	r3, r3
 800553c:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	b2db      	uxtb	r3, r3
 8005542:	019b      	lsls	r3, r3, #6
 8005544:	b2db      	uxtb	r3, r3
 8005546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554a:	b2db      	uxtb	r3, r3
 800554c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8005550:	2279      	movs	r2, #121	; 0x79
 8005552:	2194      	movs	r1, #148	; 0x94
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7fc fa31 	bl	80019bc <VL53L0X_WrByte>
 800555a:	4603      	mov	r3, r0
 800555c:	461a      	mov	r2, r3
 800555e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005562:	4313      	orrs	r3, r2
 8005564:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff fd33 	bl	8004fd4 <VL53L0X_device_read_strobe>
 800556e:	4603      	mov	r3, r0
 8005570:	461a      	mov	r2, r3
 8005572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005576:	4313      	orrs	r3, r2
 8005578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800557c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005580:	461a      	mov	r2, r3
 8005582:	2190      	movs	r1, #144	; 0x90
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7fc fafd 	bl	8001b84 <VL53L0X_RdDWord>
 800558a:	4603      	mov	r3, r0
 800558c:	461a      	mov	r2, r3
 800558e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005592:	4313      	orrs	r3, r2
 8005594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	0e9b      	lsrs	r3, r3, #26
 800559c:	b2db      	uxtb	r3, r3
 800559e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055a2:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80055a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055a8:	4413      	add	r3, r2
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	0cdb      	lsrs	r3, r3, #19
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	0b1b      	lsrs	r3, r3, #12
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	095b      	lsrs	r3, r3, #5
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80055ea:	227a      	movs	r2, #122	; 0x7a
 80055ec:	2194      	movs	r1, #148	; 0x94
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fc f9e4 	bl	80019bc <VL53L0X_WrByte>
 80055f4:	4603      	mov	r3, r0
 80055f6:	461a      	mov	r2, r3
 80055f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff fce6 	bl	8004fd4 <VL53L0X_device_read_strobe>
 8005608:	4603      	mov	r3, r0
 800560a:	461a      	mov	r2, r3
 800560c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005610:	4313      	orrs	r3, r2
 8005612:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005616:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800561a:	461a      	mov	r2, r3
 800561c:	2190      	movs	r1, #144	; 0x90
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fc fab0 	bl	8001b84 <VL53L0X_RdDWord>
 8005624:	4603      	mov	r3, r0
 8005626:	461a      	mov	r2, r3
 8005628:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800562c:	4313      	orrs	r3, r2
 800562e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	0f9b      	lsrs	r3, r3, #30
 8005636:	b2db      	uxtb	r3, r3
 8005638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800563c:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800563e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005642:	4413      	add	r3, r2
 8005644:	b2db      	uxtb	r3, r3
 8005646:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	0ddb      	lsrs	r3, r3, #23
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005652:	b2db      	uxtb	r3, r3
 8005654:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	0c1b      	lsrs	r3, r3, #16
 800565a:	b2db      	uxtb	r3, r3
 800565c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005660:	b2db      	uxtb	r3, r3
 8005662:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8005664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005666:	0a5b      	lsrs	r3, r3, #9
 8005668:	b2db      	uxtb	r3, r3
 800566a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800566e:	b2db      	uxtb	r3, r3
 8005670:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	089b      	lsrs	r3, r3, #2
 8005678:	b2db      	uxtb	r3, r3
 800567a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567e:	b2db      	uxtb	r3, r3
 8005680:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8005684:	2300      	movs	r3, #0
 8005686:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80f1 	beq.w	8005878 <VL53L0X_get_info_from_device+0x7c8>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005696:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800569a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f040 80ea 	bne.w	8005878 <VL53L0X_get_info_from_device+0x7c8>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80056a4:	227b      	movs	r2, #123	; 0x7b
 80056a6:	2194      	movs	r1, #148	; 0x94
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7fc f987 	bl	80019bc <VL53L0X_WrByte>
 80056ae:	4603      	mov	r3, r0
 80056b0:	461a      	mov	r2, r3
 80056b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff fc89 	bl	8004fd4 <VL53L0X_device_read_strobe>
 80056c2:	4603      	mov	r3, r0
 80056c4:	461a      	mov	r2, r3
 80056c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80056d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056d4:	461a      	mov	r2, r3
 80056d6:	2190      	movs	r1, #144	; 0x90
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7fc fa53 	bl	8001b84 <VL53L0X_RdDWord>
 80056de:	4603      	mov	r3, r0
 80056e0:	461a      	mov	r2, r3
 80056e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80056ec:	227c      	movs	r2, #124	; 0x7c
 80056ee:	2194      	movs	r1, #148	; 0x94
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7fc f963 	bl	80019bc <VL53L0X_WrByte>
 80056f6:	4603      	mov	r3, r0
 80056f8:	461a      	mov	r2, r3
 80056fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056fe:	4313      	orrs	r3, r2
 8005700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff fc65 	bl	8004fd4 <VL53L0X_device_read_strobe>
 800570a:	4603      	mov	r3, r0
 800570c:	461a      	mov	r2, r3
 800570e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005712:	4313      	orrs	r3, r2
 8005714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8005718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800571c:	461a      	mov	r2, r3
 800571e:	2190      	movs	r1, #144	; 0x90
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7fc fa2f 	bl	8001b84 <VL53L0X_RdDWord>
 8005726:	4603      	mov	r3, r0
 8005728:	461a      	mov	r2, r3
 800572a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800572e:	4313      	orrs	r3, r2
 8005730:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8005734:	2273      	movs	r2, #115	; 0x73
 8005736:	2194      	movs	r1, #148	; 0x94
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7fc f93f 	bl	80019bc <VL53L0X_WrByte>
 800573e:	4603      	mov	r3, r0
 8005740:	461a      	mov	r2, r3
 8005742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005746:	4313      	orrs	r3, r2
 8005748:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff fc41 	bl	8004fd4 <VL53L0X_device_read_strobe>
 8005752:	4603      	mov	r3, r0
 8005754:	461a      	mov	r2, r3
 8005756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800575a:	4313      	orrs	r3, r2
 800575c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005764:	461a      	mov	r2, r3
 8005766:	2190      	movs	r1, #144	; 0x90
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7fc fa0b 	bl	8001b84 <VL53L0X_RdDWord>
 800576e:	4603      	mov	r3, r0
 8005770:	461a      	mov	r2, r3
 8005772:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005776:	4313      	orrs	r3, r2
 8005778:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8005780:	b29b      	uxth	r3, r3
 8005782:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8005784:	2274      	movs	r2, #116	; 0x74
 8005786:	2194      	movs	r1, #148	; 0x94
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7fc f917 	bl	80019bc <VL53L0X_WrByte>
 800578e:	4603      	mov	r3, r0
 8005790:	461a      	mov	r2, r3
 8005792:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005796:	4313      	orrs	r3, r2
 8005798:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff fc19 	bl	8004fd4 <VL53L0X_device_read_strobe>
 80057a2:	4603      	mov	r3, r0
 80057a4:	461a      	mov	r2, r3
 80057a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80057b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057b4:	461a      	mov	r2, r3
 80057b6:	2190      	movs	r1, #144	; 0x90
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7fc f9e3 	bl	8001b84 <VL53L0X_RdDWord>
 80057be:	4603      	mov	r3, r0
 80057c0:	461a      	mov	r2, r3
 80057c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80057d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057d2:	4313      	orrs	r3, r2
 80057d4:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80057d6:	2275      	movs	r2, #117	; 0x75
 80057d8:	2194      	movs	r1, #148	; 0x94
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fc f8ee 	bl	80019bc <VL53L0X_WrByte>
 80057e0:	4603      	mov	r3, r0
 80057e2:	461a      	mov	r2, r3
 80057e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff fbf0 	bl	8004fd4 <VL53L0X_device_read_strobe>
 80057f4:	4603      	mov	r3, r0
 80057f6:	461a      	mov	r2, r3
 80057f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005802:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005806:	461a      	mov	r2, r3
 8005808:	2190      	movs	r1, #144	; 0x90
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fc f9ba 	bl	8001b84 <VL53L0X_RdDWord>
 8005810:	4603      	mov	r3, r0
 8005812:	461a      	mov	r2, r3
 8005814:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005818:	4313      	orrs	r3, r2
 800581a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8005822:	b29b      	uxth	r3, r3
 8005824:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8005826:	2276      	movs	r2, #118	; 0x76
 8005828:	2194      	movs	r1, #148	; 0x94
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7fc f8c6 	bl	80019bc <VL53L0X_WrByte>
 8005830:	4603      	mov	r3, r0
 8005832:	461a      	mov	r2, r3
 8005834:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005838:	4313      	orrs	r3, r2
 800583a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff fbc8 	bl	8004fd4 <VL53L0X_device_read_strobe>
 8005844:	4603      	mov	r3, r0
 8005846:	461a      	mov	r2, r3
 8005848:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800584c:	4313      	orrs	r3, r2
 800584e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005856:	461a      	mov	r2, r3
 8005858:	2190      	movs	r1, #144	; 0x90
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fc f992 	bl	8001b84 <VL53L0X_RdDWord>
 8005860:	4603      	mov	r3, r0
 8005862:	461a      	mov	r2, r3
 8005864:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005868:	4313      	orrs	r3, r2
 800586a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8005872:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005874:	4313      	orrs	r3, r2
 8005876:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8005878:	2200      	movs	r2, #0
 800587a:	2181      	movs	r1, #129	; 0x81
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7fc f89d 	bl	80019bc <VL53L0X_WrByte>
 8005882:	4603      	mov	r3, r0
 8005884:	461a      	mov	r2, r3
 8005886:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800588a:	4313      	orrs	r3, r2
 800588c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005890:	2206      	movs	r2, #6
 8005892:	21ff      	movs	r1, #255	; 0xff
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7fc f891 	bl	80019bc <VL53L0X_WrByte>
 800589a:	4603      	mov	r3, r0
 800589c:	461a      	mov	r2, r3
 800589e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80058a8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80058ac:	461a      	mov	r2, r3
 80058ae:	2183      	movs	r1, #131	; 0x83
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fc f905 	bl	8001ac0 <VL53L0X_RdByte>
 80058b6:	4603      	mov	r3, r0
 80058b8:	461a      	mov	r2, r3
 80058ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058be:	4313      	orrs	r3, r2
 80058c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80058c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80058c8:	f023 0304 	bic.w	r3, r3, #4
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	461a      	mov	r2, r3
 80058d0:	2183      	movs	r1, #131	; 0x83
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fc f872 	bl	80019bc <VL53L0X_WrByte>
 80058d8:	4603      	mov	r3, r0
 80058da:	461a      	mov	r2, r3
 80058dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80058e6:	2201      	movs	r2, #1
 80058e8:	21ff      	movs	r1, #255	; 0xff
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fc f866 	bl	80019bc <VL53L0X_WrByte>
 80058f0:	4603      	mov	r3, r0
 80058f2:	461a      	mov	r2, r3
 80058f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80058fe:	2201      	movs	r2, #1
 8005900:	2100      	movs	r1, #0
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7fc f85a 	bl	80019bc <VL53L0X_WrByte>
 8005908:	4603      	mov	r3, r0
 800590a:	461a      	mov	r2, r3
 800590c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005910:	4313      	orrs	r3, r2
 8005912:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005916:	2200      	movs	r2, #0
 8005918:	21ff      	movs	r1, #255	; 0xff
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fc f84e 	bl	80019bc <VL53L0X_WrByte>
 8005920:	4603      	mov	r3, r0
 8005922:	461a      	mov	r2, r3
 8005924:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005928:	4313      	orrs	r3, r2
 800592a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800592e:	2200      	movs	r2, #0
 8005930:	2180      	movs	r1, #128	; 0x80
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fc f842 	bl	80019bc <VL53L0X_WrByte>
 8005938:	4603      	mov	r3, r0
 800593a:	461a      	mov	r2, r3
 800593c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005940:	4313      	orrs	r3, r2
 8005942:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005946:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800594a:	2b00      	cmp	r3, #0
 800594c:	f040 808f 	bne.w	8005a6e <VL53L0X_get_info_from_device+0x9be>
 8005950:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005954:	2b07      	cmp	r3, #7
 8005956:	f000 808a 	beq.w	8005a6e <VL53L0X_get_info_from_device+0x9be>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d024      	beq.n	80059ae <VL53L0X_get_info_from_device+0x8fe>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005964:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005968:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800596c:	2b00      	cmp	r3, #0
 800596e:	d11e      	bne.n	80059ae <VL53L0X_get_info_from_device+0x8fe>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8005976:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8005980:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005984:	2300      	movs	r3, #0
 8005986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005988:	e00e      	b.n	80059a8 <VL53L0X_get_info_from_device+0x8f8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800598a:	f107 0208 	add.w	r2, r7, #8
 800598e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005990:	4413      	add	r3, r2
 8005992:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005998:	4413      	add	r3, r2
 800599a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800599e:	460a      	mov	r2, r1
 80059a0:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80059a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a4:	3301      	adds	r3, #1
 80059a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059aa:	2b05      	cmp	r3, #5
 80059ac:	dded      	ble.n	800598a <VL53L0X_get_info_from_device+0x8da>
			}
		}

		if (((option & 2) == 2) &&
 80059ae:	78fb      	ldrb	r3, [r7, #3]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d018      	beq.n	80059ea <VL53L0X_get_info_from_device+0x93a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80059b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059bc:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d112      	bne.n	80059ea <VL53L0X_get_info_from_device+0x93a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80059c4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80059ce:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	33f3      	adds	r3, #243	; 0xf3
 80059dc:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80059de:	f107 0310 	add.w	r3, r7, #16
 80059e2:	4619      	mov	r1, r3
 80059e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059e6:	f005 faf1 	bl	800afcc <strcpy>

		}

		if (((option & 4) == 4) &&
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d030      	beq.n	8005a56 <VL53L0X_get_info_from_device+0x9a6>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80059f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059f8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d12a      	bne.n	8005a56 <VL53L0X_get_info_from_device+0x9a6>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8005a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a12:	025b      	lsls	r3, r3, #9
 8005a14:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a1a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8005a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d011      	beq.n	8005a4e <VL53L0X_get_info_from_device+0x99e>
					OffsetFixed1104_mm =
 8005a2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8005a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a38:	fb02 f303 	mul.w	r3, r2, r3
 8005a3c:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8005a3e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8005a42:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005a46:	425b      	negs	r3, r3
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8005a4e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8005a56:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005a5a:	78fb      	ldrb	r3, [r7, #3]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8005a64:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
 8005a6e:	4b0c      	ldr	r3, [pc, #48]	; (8005aa0 <VL53L0X_get_info_from_device+0x9f0>)
 8005a70:	681c      	ldr	r4, [r3, #0]
 8005a72:	f001 ffe9 	bl	8007a48 <HAL_GetTick>
 8005a76:	4603      	mov	r3, r0
 8005a78:	461a      	mov	r2, r3
 8005a7a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8005a7e:	9302      	str	r3, [sp, #8]
 8005a80:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <VL53L0X_get_info_from_device+0x9f4>)
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	9200      	str	r2, [sp, #0]
 8005a86:	4b08      	ldr	r3, [pc, #32]	; (8005aa8 <VL53L0X_get_info_from_device+0x9f8>)
 8005a88:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	2001      	movs	r0, #1
 8005a90:	f001 ff2c 	bl	80078ec <trace_print_module_function>
	return Status;
 8005a94:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3764      	adds	r7, #100	; 0x64
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd90      	pop	{r4, r7, pc}
 8005aa0:	200007c8 	.word	0x200007c8
 8005aa4:	0800c9e0 	.word	0x0800c9e0
 8005aa8:	0800c988 	.word	0x0800c988

08005aac <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8005aac:	b590      	push	{r4, r7, lr}
 8005aae:	b08b      	sub	sp, #44	; 0x2c
 8005ab0:	af04      	add	r7, sp, #16
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
	uint64_t PLL_period_ps;
	uint32_t macro_period_vclks;
	uint32_t macro_period_ps;

	LOG_FUNCTION_START("");
 8005ab8:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <VL53L0X_calc_macro_period_ps+0x7c>)
 8005aba:	681c      	ldr	r4, [r3, #0]
 8005abc:	f001 ffc4 	bl	8007a48 <HAL_GetTick>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	4b19      	ldr	r3, [pc, #100]	; (8005b2c <VL53L0X_calc_macro_period_ps+0x80>)
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	9200      	str	r2, [sp, #0]
 8005aca:	4b19      	ldr	r3, [pc, #100]	; (8005b30 <VL53L0X_calc_macro_period_ps+0x84>)
 8005acc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	2001      	movs	r0, #1
 8005ad4:	f001 ff0a 	bl	80078ec <trace_print_module_function>

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8005ad8:	f240 6377 	movw	r3, #1655	; 0x677
 8005adc:	f04f 0400 	mov.w	r4, #0
 8005ae0:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8005ae4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005ae8:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8005aea:	78fb      	ldrb	r3, [r7, #3]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	fb02 f303 	mul.w	r3, r2, r3
 8005af8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
 8005afa:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <VL53L0X_calc_macro_period_ps+0x7c>)
 8005afc:	681c      	ldr	r4, [r3, #0]
 8005afe:	f001 ffa3 	bl	8007a48 <HAL_GetTick>
 8005b02:	4603      	mov	r3, r0
 8005b04:	461a      	mov	r2, r3
 8005b06:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <VL53L0X_calc_macro_period_ps+0x88>)
 8005b08:	9302      	str	r3, [sp, #8]
 8005b0a:	4b08      	ldr	r3, [pc, #32]	; (8005b2c <VL53L0X_calc_macro_period_ps+0x80>)
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	9200      	str	r2, [sp, #0]
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <VL53L0X_calc_macro_period_ps+0x8c>)
 8005b12:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005b16:	4621      	mov	r1, r4
 8005b18:	2001      	movs	r0, #1
 8005b1a:	f001 fee7 	bl	80078ec <trace_print_module_function>
	return macro_period_ps;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd90      	pop	{r4, r7, pc}
 8005b28:	200007c8 	.word	0x200007c8
 8005b2c:	0800ca00 	.word	0x0800ca00
 8005b30:	0800c974 	.word	0x0800c974
 8005b34:	0800c998 	.word	0x0800c998
 8005b38:	0800c988 	.word	0x0800c988

08005b3c <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d017      	beq.n	8005b86 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005b5c:	e005      	b.n	8005b6a <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	085b      	lsrs	r3, r3, #1
 8005b62:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8005b64:	89fb      	ldrh	r3, [r7, #14]
 8005b66:	3301      	adds	r3, #1
 8005b68:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1f4      	bne.n	8005b5e <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005b74:	89fb      	ldrh	r3, [r7, #14]
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8005b82:	4413      	add	r3, r2
 8005b84:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8005b86:	8afb      	ldrh	r3, [r7, #22]

}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	371c      	adds	r7, #28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005ba2:	88fb      	ldrh	r3, [r7, #6]
 8005ba4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005ba6:	88fa      	ldrh	r2, [r7, #6]
 8005ba8:	0a12      	lsrs	r2, r2, #8
 8005baa:	b292      	uxth	r2, r2
 8005bac:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005bae:	3301      	adds	r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005bd2:	79fb      	ldrb	r3, [r7, #7]
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f7ff ff68 	bl	8005aac <VL53L0X_calc_macro_period_ps>
 8005bdc:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005be4:	4a0a      	ldr	r2, [pc, #40]	; (8005c10 <VL53L0X_calc_timeout_mclks+0x50>)
 8005be6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bea:	099b      	lsrs	r3, r3, #6
 8005bec:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bf4:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	441a      	add	r2, r3
	timeout_period_mclks =
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c04:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8005c06:	69fb      	ldr	r3, [r7, #28]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	10624dd3 	.word	0x10624dd3

08005c14 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	807b      	strh	r3, [r7, #2]
 8005c20:	4613      	mov	r3, r2
 8005c22:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005c28:	787b      	ldrb	r3, [r7, #1]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff ff3d 	bl	8005aac <VL53L0X_calc_macro_period_ps>
 8005c32:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005c3a:	4a0a      	ldr	r2, [pc, #40]	; (8005c64 <VL53L0X_calc_timeout_us+0x50>)
 8005c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c40:	099b      	lsrs	r3, r3, #6
 8005c42:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005c44:	887b      	ldrh	r3, [r7, #2]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	fb02 f303 	mul.w	r3, r2, r3
 8005c4c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8005c50:	4a04      	ldr	r2, [pc, #16]	; (8005c64 <VL53L0X_calc_timeout_us+0x50>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	099b      	lsrs	r3, r3, #6
 8005c58:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8005c5a:	697b      	ldr	r3, [r7, #20]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	10624dd3 	.word	0x10624dd3

08005c68 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08c      	sub	sp, #48	; 0x30
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	460b      	mov	r3, r1
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c76:	2300      	movs	r3, #0
 8005c78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005c8e:	7afb      	ldrb	r3, [r7, #11]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <get_sequence_step_timeout+0x38>
 8005c94:	7afb      	ldrb	r3, [r7, #11]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d002      	beq.n	8005ca0 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005c9a:	7afb      	ldrb	r3, [r7, #11]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d128      	bne.n	8005cf2 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005ca0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f7fc fde9 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8005cb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005cbc:	f107 0320 	add.w	r3, r7, #32
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	2146      	movs	r1, #70	; 0x46
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f7fb fefb 	bl	8001ac0 <VL53L0X_RdByte>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005cd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff ff5c 	bl	8005b94 <VL53L0X_decode_timeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005ce0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005ce4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f7ff ff93 	bl	8005c14 <VL53L0X_calc_timeout_us>
 8005cee:	62b8      	str	r0, [r7, #40]	; 0x28
 8005cf0:	e092      	b.n	8005e18 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005cf2:	7afb      	ldrb	r3, [r7, #11]
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d135      	bne.n	8005d64 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005cf8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	2100      	movs	r1, #0
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f7fc fdbd 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005d0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f040 8081 	bne.w	8005e18 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005d16:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7fc fdae 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8005d2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8005d32:	f107 031e 	add.w	r3, r7, #30
 8005d36:	461a      	mov	r2, r3
 8005d38:	2151      	movs	r1, #81	; 0x51
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f7fb feea 	bl	8001b14 <VL53L0X_RdWord>
 8005d40:	4603      	mov	r3, r0
 8005d42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005d46:	8bfb      	ldrh	r3, [r7, #30]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff ff23 	bl	8005b94 <VL53L0X_decode_timeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005d52:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005d56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d58:	4619      	mov	r1, r3
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f7ff ff5a 	bl	8005c14 <VL53L0X_calc_timeout_us>
 8005d60:	62b8      	str	r0, [r7, #40]	; 0x28
 8005d62:	e059      	b.n	8005e18 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005d64:	7afb      	ldrb	r3, [r7, #11]
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d156      	bne.n	8005e18 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005d6a:	f107 0314 	add.w	r3, r7, #20
 8005d6e:	4619      	mov	r1, r3
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f7fc ff11 	bl	8002b98 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01d      	beq.n	8005dbc <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005d80:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005d84:	461a      	mov	r2, r3
 8005d86:	2100      	movs	r1, #0
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f7fc fd79 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8005d94:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10f      	bne.n	8005dbc <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8005d9c:	f107 031e 	add.w	r3, r7, #30
 8005da0:	461a      	mov	r2, r3
 8005da2:	2151      	movs	r1, #81	; 0x51
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f7fb feb5 	bl	8001b14 <VL53L0X_RdWord>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005db0:	8bfb      	ldrh	r3, [r7, #30]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff feee 	bl	8005b94 <VL53L0X_decode_timeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005dbc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d109      	bne.n	8005dd8 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005dc4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005dc8:	461a      	mov	r2, r3
 8005dca:	2101      	movs	r1, #1
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f7fc fd57 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005dd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10f      	bne.n	8005e00 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8005de0:	f107 031c 	add.w	r3, r7, #28
 8005de4:	461a      	mov	r2, r3
 8005de6:	2171      	movs	r1, #113	; 0x71
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7fb fe93 	bl	8001b14 <VL53L0X_RdWord>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005df4:	8bbb      	ldrh	r3, [r7, #28]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff fecc 	bl	8005b94 <VL53L0X_decode_timeout>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8005e00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005e08:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005e0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e0e:	4619      	mov	r1, r3
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f7ff feff 	bl	8005c14 <VL53L0X_calc_timeout_us>
 8005e16:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e1c:	601a      	str	r2, [r3, #0]

	return Status;
 8005e1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3730      	adds	r7, #48	; 0x30
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b08a      	sub	sp, #40	; 0x28
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	460b      	mov	r3, r1
 8005e34:	607a      	str	r2, [r7, #4]
 8005e36:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005e3e:	7afb      	ldrb	r3, [r7, #11]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d005      	beq.n	8005e50 <set_sequence_step_timeout+0x26>
 8005e44:	7afb      	ldrb	r3, [r7, #11]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d002      	beq.n	8005e50 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005e4a:	7afb      	ldrb	r3, [r7, #11]
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d138      	bne.n	8005ec2 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005e50:	f107 031b 	add.w	r3, r7, #27
 8005e54:	461a      	mov	r2, r3
 8005e56:	2100      	movs	r1, #0
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7fc fd11 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8005e64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d11a      	bne.n	8005ea2 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8005e6c:	7efb      	ldrb	r3, [r7, #27]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f7ff fea4 	bl	8005bc0 <VL53L0X_calc_timeout_mclks>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8005e7c:	8bbb      	ldrh	r3, [r7, #28]
 8005e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e82:	d903      	bls.n	8005e8c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8005e84:	23ff      	movs	r3, #255	; 0xff
 8005e86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e8a:	e004      	b.n	8005e96 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8005e8c:	8bbb      	ldrh	r3, [r7, #28]
 8005e8e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8005e90:	3b01      	subs	r3, #1
 8005e92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005e96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005ea2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f040 80ab 	bne.w	8006002 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8005eac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	2146      	movs	r1, #70	; 0x46
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7fb fd81 	bl	80019bc <VL53L0X_WrByte>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8005ec0:	e09f      	b.n	8006002 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005ec2:	7afb      	ldrb	r3, [r7, #11]
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d135      	bne.n	8005f34 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8005ec8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d11b      	bne.n	8005f08 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005ed0:	f107 031b 	add.w	r3, r7, #27
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f7fc fcd1 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005ee4:	7efb      	ldrb	r3, [r7, #27]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f7ff fe68 	bl	8005bc0 <VL53L0X_calc_timeout_mclks>
 8005ef0:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8005ef2:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8005ef4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff fe20 	bl	8005b3c <VL53L0X_encode_timeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005f00:	8b3a      	ldrh	r2, [r7, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005f08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d108      	bne.n	8005f22 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8005f10:	8b3b      	ldrh	r3, [r7, #24]
 8005f12:	461a      	mov	r2, r3
 8005f14:	2151      	movs	r1, #81	; 0x51
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f7fb fd74 	bl	8001a04 <VL53L0X_WrWord>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005f22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d16b      	bne.n	8006002 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005f32:	e066      	b.n	8006002 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005f34:	7afb      	ldrb	r3, [r7, #11]
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d160      	bne.n	8005ffc <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8005f3a:	f107 0310 	add.w	r3, r7, #16
 8005f3e:	4619      	mov	r1, r3
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7fc fe29 	bl	8002b98 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8005f4a:	7cfb      	ldrb	r3, [r7, #19]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01d      	beq.n	8005f8c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f50:	f107 031b 	add.w	r3, r7, #27
 8005f54:	461a      	mov	r2, r3
 8005f56:	2100      	movs	r1, #0
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f7fc fc91 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8005f64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10f      	bne.n	8005f8c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8005f6c:	f107 0318 	add.w	r3, r7, #24
 8005f70:	461a      	mov	r2, r3
 8005f72:	2151      	movs	r1, #81	; 0x51
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f7fb fdcd 	bl	8001b14 <VL53L0X_RdWord>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8005f80:	8b3b      	ldrh	r3, [r7, #24]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff fe06 	bl	8005b94 <VL53L0X_decode_timeout>
 8005f88:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8005f8a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005f8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d109      	bne.n	8005fa8 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f94:	f107 031b 	add.w	r3, r7, #27
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f7fc fc6f 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005fa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d128      	bne.n	8006002 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005fb0:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f7ff fe02 	bl	8005bc0 <VL53L0X_calc_timeout_mclks>
 8005fbc:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8005fbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fc0:	6a3a      	ldr	r2, [r7, #32]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 8005fc6:	6a38      	ldr	r0, [r7, #32]
 8005fc8:	f7ff fdb8 	bl	8005b3c <VL53L0X_encode_timeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8005fd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d108      	bne.n	8005fea <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8005fd8:	8bfb      	ldrh	r3, [r7, #30]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	2171      	movs	r1, #113	; 0x71
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f7fb fd10 	bl	8001a04 <VL53L0X_WrWord>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8005fea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d107      	bne.n	8006002 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8005ffa:	e002      	b.n	8006002 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005ffc:	23fc      	movs	r3, #252	; 0xfc
 8005ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8006002:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006006:	4618      	mov	r0, r3
 8006008:	3728      	adds	r7, #40	; 0x28
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b08a      	sub	sp, #40	; 0x28
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	460b      	mov	r3, r1
 8006018:	70fb      	strb	r3, [r7, #3]
 800601a:	4613      	mov	r3, r2
 800601c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800601e:	2300      	movs	r3, #0
 8006020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8006024:	230c      	movs	r3, #12
 8006026:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800602a:	2312      	movs	r3, #18
 800602c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8006030:	2308      	movs	r3, #8
 8006032:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8006036:	230e      	movs	r3, #14
 8006038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800603c:	2300      	movs	r3, #0
 800603e:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006040:	78bb      	ldrb	r3, [r7, #2]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800604c:	23fc      	movs	r3, #252	; 0xfc
 800604e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006052:	e020      	b.n	8006096 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10d      	bne.n	8006076 <VL53L0X_set_vcsel_pulse_period+0x68>
 800605a:	78ba      	ldrb	r2, [r7, #2]
 800605c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006060:	429a      	cmp	r2, r3
 8006062:	d304      	bcc.n	800606e <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8006064:	78ba      	ldrb	r2, [r7, #2]
 8006066:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800606a:	429a      	cmp	r2, r3
 800606c:	d903      	bls.n	8006076 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800606e:	23fc      	movs	r3, #252	; 0xfc
 8006070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006074:	e00f      	b.n	8006096 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d10c      	bne.n	8006096 <VL53L0X_set_vcsel_pulse_period+0x88>
 800607c:	78ba      	ldrb	r2, [r7, #2]
 800607e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006082:	429a      	cmp	r2, r3
 8006084:	d304      	bcc.n	8006090 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8006086:	78ba      	ldrb	r2, [r7, #2]
 8006088:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800608c:	429a      	cmp	r2, r3
 800608e:	d902      	bls.n	8006096 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006090:	23fc      	movs	r3, #252	; 0xfc
 8006092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8006096:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800609e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060a2:	e239      	b.n	8006518 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80060a4:	78fb      	ldrb	r3, [r7, #3]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d150      	bne.n	800614c <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80060aa:	78bb      	ldrb	r3, [r7, #2]
 80060ac:	2b0c      	cmp	r3, #12
 80060ae:	d110      	bne.n	80060d2 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80060b0:	2218      	movs	r2, #24
 80060b2:	2157      	movs	r1, #87	; 0x57
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7fb fc81 	bl	80019bc <VL53L0X_WrByte>
 80060ba:	4603      	mov	r3, r0
 80060bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80060c0:	2208      	movs	r2, #8
 80060c2:	2156      	movs	r1, #86	; 0x56
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7fb fc79 	bl	80019bc <VL53L0X_WrByte>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80060d0:	e17f      	b.n	80063d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80060d2:	78bb      	ldrb	r3, [r7, #2]
 80060d4:	2b0e      	cmp	r3, #14
 80060d6:	d110      	bne.n	80060fa <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80060d8:	2230      	movs	r2, #48	; 0x30
 80060da:	2157      	movs	r1, #87	; 0x57
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7fb fc6d 	bl	80019bc <VL53L0X_WrByte>
 80060e2:	4603      	mov	r3, r0
 80060e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80060e8:	2208      	movs	r2, #8
 80060ea:	2156      	movs	r1, #86	; 0x56
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7fb fc65 	bl	80019bc <VL53L0X_WrByte>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80060f8:	e16b      	b.n	80063d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80060fa:	78bb      	ldrb	r3, [r7, #2]
 80060fc:	2b10      	cmp	r3, #16
 80060fe:	d110      	bne.n	8006122 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8006100:	2240      	movs	r2, #64	; 0x40
 8006102:	2157      	movs	r1, #87	; 0x57
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7fb fc59 	bl	80019bc <VL53L0X_WrByte>
 800610a:	4603      	mov	r3, r0
 800610c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8006110:	2208      	movs	r2, #8
 8006112:	2156      	movs	r1, #86	; 0x56
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7fb fc51 	bl	80019bc <VL53L0X_WrByte>
 800611a:	4603      	mov	r3, r0
 800611c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006120:	e157      	b.n	80063d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8006122:	78bb      	ldrb	r3, [r7, #2]
 8006124:	2b12      	cmp	r3, #18
 8006126:	f040 8154 	bne.w	80063d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800612a:	2250      	movs	r2, #80	; 0x50
 800612c:	2157      	movs	r1, #87	; 0x57
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7fb fc44 	bl	80019bc <VL53L0X_WrByte>
 8006134:	4603      	mov	r3, r0
 8006136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800613a:	2208      	movs	r2, #8
 800613c:	2156      	movs	r1, #86	; 0x56
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fb fc3c 	bl	80019bc <VL53L0X_WrByte>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800614a:	e142      	b.n	80063d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	2b01      	cmp	r3, #1
 8006150:	f040 813f 	bne.w	80063d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8006154:	78bb      	ldrb	r3, [r7, #2]
 8006156:	2b08      	cmp	r3, #8
 8006158:	d14c      	bne.n	80061f4 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800615a:	2210      	movs	r2, #16
 800615c:	2148      	movs	r1, #72	; 0x48
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fb fc2c 	bl	80019bc <VL53L0X_WrByte>
 8006164:	4603      	mov	r3, r0
 8006166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800616a:	2208      	movs	r2, #8
 800616c:	2147      	movs	r1, #71	; 0x47
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fb fc24 	bl	80019bc <VL53L0X_WrByte>
 8006174:	4603      	mov	r3, r0
 8006176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800617a:	2202      	movs	r2, #2
 800617c:	2132      	movs	r1, #50	; 0x32
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fb fc1c 	bl	80019bc <VL53L0X_WrByte>
 8006184:	4603      	mov	r3, r0
 8006186:	461a      	mov	r2, r3
 8006188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800618c:	4313      	orrs	r3, r2
 800618e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8006192:	220c      	movs	r2, #12
 8006194:	2130      	movs	r1, #48	; 0x30
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fb fc10 	bl	80019bc <VL53L0X_WrByte>
 800619c:	4603      	mov	r3, r0
 800619e:	461a      	mov	r2, r3
 80061a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80061aa:	2201      	movs	r2, #1
 80061ac:	21ff      	movs	r1, #255	; 0xff
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fb fc04 	bl	80019bc <VL53L0X_WrByte>
 80061b4:	4603      	mov	r3, r0
 80061b6:	461a      	mov	r2, r3
 80061b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061bc:	4313      	orrs	r3, r2
 80061be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80061c2:	2230      	movs	r2, #48	; 0x30
 80061c4:	2130      	movs	r1, #48	; 0x30
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fb fbf8 	bl	80019bc <VL53L0X_WrByte>
 80061cc:	4603      	mov	r3, r0
 80061ce:	461a      	mov	r2, r3
 80061d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061d4:	4313      	orrs	r3, r2
 80061d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80061da:	2200      	movs	r2, #0
 80061dc:	21ff      	movs	r1, #255	; 0xff
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7fb fbec 	bl	80019bc <VL53L0X_WrByte>
 80061e4:	4603      	mov	r3, r0
 80061e6:	461a      	mov	r2, r3
 80061e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061f2:	e0ee      	b.n	80063d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80061f4:	78bb      	ldrb	r3, [r7, #2]
 80061f6:	2b0a      	cmp	r3, #10
 80061f8:	d14c      	bne.n	8006294 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80061fa:	2228      	movs	r2, #40	; 0x28
 80061fc:	2148      	movs	r1, #72	; 0x48
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7fb fbdc 	bl	80019bc <VL53L0X_WrByte>
 8006204:	4603      	mov	r3, r0
 8006206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800620a:	2208      	movs	r2, #8
 800620c:	2147      	movs	r1, #71	; 0x47
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fb fbd4 	bl	80019bc <VL53L0X_WrByte>
 8006214:	4603      	mov	r3, r0
 8006216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800621a:	2203      	movs	r2, #3
 800621c:	2132      	movs	r1, #50	; 0x32
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fb fbcc 	bl	80019bc <VL53L0X_WrByte>
 8006224:	4603      	mov	r3, r0
 8006226:	461a      	mov	r2, r3
 8006228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800622c:	4313      	orrs	r3, r2
 800622e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006232:	2209      	movs	r2, #9
 8006234:	2130      	movs	r1, #48	; 0x30
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fb fbc0 	bl	80019bc <VL53L0X_WrByte>
 800623c:	4603      	mov	r3, r0
 800623e:	461a      	mov	r2, r3
 8006240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006244:	4313      	orrs	r3, r2
 8006246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800624a:	2201      	movs	r2, #1
 800624c:	21ff      	movs	r1, #255	; 0xff
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fb fbb4 	bl	80019bc <VL53L0X_WrByte>
 8006254:	4603      	mov	r3, r0
 8006256:	461a      	mov	r2, r3
 8006258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800625c:	4313      	orrs	r3, r2
 800625e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006262:	2220      	movs	r2, #32
 8006264:	2130      	movs	r1, #48	; 0x30
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fb fba8 	bl	80019bc <VL53L0X_WrByte>
 800626c:	4603      	mov	r3, r0
 800626e:	461a      	mov	r2, r3
 8006270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006274:	4313      	orrs	r3, r2
 8006276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800627a:	2200      	movs	r2, #0
 800627c:	21ff      	movs	r1, #255	; 0xff
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fb fb9c 	bl	80019bc <VL53L0X_WrByte>
 8006284:	4603      	mov	r3, r0
 8006286:	461a      	mov	r2, r3
 8006288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800628c:	4313      	orrs	r3, r2
 800628e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006292:	e09e      	b.n	80063d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8006294:	78bb      	ldrb	r3, [r7, #2]
 8006296:	2b0c      	cmp	r3, #12
 8006298:	d14c      	bne.n	8006334 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800629a:	2238      	movs	r2, #56	; 0x38
 800629c:	2148      	movs	r1, #72	; 0x48
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fb fb8c 	bl	80019bc <VL53L0X_WrByte>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80062aa:	2208      	movs	r2, #8
 80062ac:	2147      	movs	r1, #71	; 0x47
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fb fb84 	bl	80019bc <VL53L0X_WrByte>
 80062b4:	4603      	mov	r3, r0
 80062b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80062ba:	2203      	movs	r2, #3
 80062bc:	2132      	movs	r1, #50	; 0x32
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7fb fb7c 	bl	80019bc <VL53L0X_WrByte>
 80062c4:	4603      	mov	r3, r0
 80062c6:	461a      	mov	r2, r3
 80062c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80062d2:	2208      	movs	r2, #8
 80062d4:	2130      	movs	r1, #48	; 0x30
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7fb fb70 	bl	80019bc <VL53L0X_WrByte>
 80062dc:	4603      	mov	r3, r0
 80062de:	461a      	mov	r2, r3
 80062e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062e4:	4313      	orrs	r3, r2
 80062e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80062ea:	2201      	movs	r2, #1
 80062ec:	21ff      	movs	r1, #255	; 0xff
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fb fb64 	bl	80019bc <VL53L0X_WrByte>
 80062f4:	4603      	mov	r3, r0
 80062f6:	461a      	mov	r2, r3
 80062f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062fc:	4313      	orrs	r3, r2
 80062fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006302:	2220      	movs	r2, #32
 8006304:	2130      	movs	r1, #48	; 0x30
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fb fb58 	bl	80019bc <VL53L0X_WrByte>
 800630c:	4603      	mov	r3, r0
 800630e:	461a      	mov	r2, r3
 8006310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006314:	4313      	orrs	r3, r2
 8006316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800631a:	2200      	movs	r2, #0
 800631c:	21ff      	movs	r1, #255	; 0xff
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7fb fb4c 	bl	80019bc <VL53L0X_WrByte>
 8006324:	4603      	mov	r3, r0
 8006326:	461a      	mov	r2, r3
 8006328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800632c:	4313      	orrs	r3, r2
 800632e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006332:	e04e      	b.n	80063d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006334:	78bb      	ldrb	r3, [r7, #2]
 8006336:	2b0e      	cmp	r3, #14
 8006338:	d14b      	bne.n	80063d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800633a:	2248      	movs	r2, #72	; 0x48
 800633c:	2148      	movs	r1, #72	; 0x48
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fb fb3c 	bl	80019bc <VL53L0X_WrByte>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800634a:	2208      	movs	r2, #8
 800634c:	2147      	movs	r1, #71	; 0x47
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fb fb34 	bl	80019bc <VL53L0X_WrByte>
 8006354:	4603      	mov	r3, r0
 8006356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800635a:	2203      	movs	r2, #3
 800635c:	2132      	movs	r1, #50	; 0x32
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fb fb2c 	bl	80019bc <VL53L0X_WrByte>
 8006364:	4603      	mov	r3, r0
 8006366:	461a      	mov	r2, r3
 8006368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800636c:	4313      	orrs	r3, r2
 800636e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006372:	2207      	movs	r2, #7
 8006374:	2130      	movs	r1, #48	; 0x30
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fb fb20 	bl	80019bc <VL53L0X_WrByte>
 800637c:	4603      	mov	r3, r0
 800637e:	461a      	mov	r2, r3
 8006380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006384:	4313      	orrs	r3, r2
 8006386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800638a:	2201      	movs	r2, #1
 800638c:	21ff      	movs	r1, #255	; 0xff
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fb fb14 	bl	80019bc <VL53L0X_WrByte>
 8006394:	4603      	mov	r3, r0
 8006396:	461a      	mov	r2, r3
 8006398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800639c:	4313      	orrs	r3, r2
 800639e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80063a2:	2220      	movs	r2, #32
 80063a4:	2130      	movs	r1, #48	; 0x30
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7fb fb08 	bl	80019bc <VL53L0X_WrByte>
 80063ac:	4603      	mov	r3, r0
 80063ae:	461a      	mov	r2, r3
 80063b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80063ba:	2200      	movs	r2, #0
 80063bc:	21ff      	movs	r1, #255	; 0xff
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7fb fafc 	bl	80019bc <VL53L0X_WrByte>
 80063c4:	4603      	mov	r3, r0
 80063c6:	461a      	mov	r2, r3
 80063c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80063d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d17f      	bne.n	80064da <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80063da:	78bb      	ldrb	r3, [r7, #2]
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fe fdb2 	bl	8004f46 <VL53L0X_encode_vcsel_period>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d045      	beq.n	800647e <VL53L0X_set_vcsel_pulse_period+0x470>
 80063f2:	e06e      	b.n	80064d2 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80063f4:	f107 0314 	add.w	r3, r7, #20
 80063f8:	461a      	mov	r2, r3
 80063fa:	2103      	movs	r1, #3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff fc33 	bl	8005c68 <get_sequence_step_timeout>
 8006402:	4603      	mov	r3, r0
 8006404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006408:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8006410:	f107 0310 	add.w	r3, r7, #16
 8006414:	461a      	mov	r2, r3
 8006416:	2102      	movs	r1, #2
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff fc25 	bl	8005c68 <get_sequence_step_timeout>
 800641e:	4603      	mov	r3, r0
 8006420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006424:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006428:	2b00      	cmp	r3, #0
 800642a:	d109      	bne.n	8006440 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800642c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006430:	461a      	mov	r2, r3
 8006432:	2150      	movs	r1, #80	; 0x50
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7fb fac1 	bl	80019bc <VL53L0X_WrByte>
 800643a:	4603      	mov	r3, r0
 800643c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006440:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006444:	2b00      	cmp	r3, #0
 8006446:	d108      	bne.n	800645a <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	461a      	mov	r2, r3
 800644c:	2103      	movs	r1, #3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff fceb 	bl	8005e2a <set_sequence_step_timeout>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800645a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800645e:	2b00      	cmp	r3, #0
 8006460:	d108      	bne.n	8006474 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	461a      	mov	r2, r3
 8006466:	2102      	movs	r1, #2
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7ff fcde 	bl	8005e2a <set_sequence_step_timeout>
 800646e:	4603      	mov	r3, r0
 8006470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	78ba      	ldrb	r2, [r7, #2]
 8006478:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800647c:	e02e      	b.n	80064dc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800647e:	f107 0318 	add.w	r3, r7, #24
 8006482:	461a      	mov	r2, r3
 8006484:	2104      	movs	r1, #4
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff fbee 	bl	8005c68 <get_sequence_step_timeout>
 800648c:	4603      	mov	r3, r0
 800648e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006492:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006496:	2b00      	cmp	r3, #0
 8006498:	d109      	bne.n	80064ae <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800649a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800649e:	461a      	mov	r2, r3
 80064a0:	2170      	movs	r1, #112	; 0x70
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fb fa8a 	bl	80019bc <VL53L0X_WrByte>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80064ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d108      	bne.n	80064c8 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	461a      	mov	r2, r3
 80064ba:	2104      	movs	r1, #4
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff fcb4 	bl	8005e2a <set_sequence_step_timeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	78ba      	ldrb	r2, [r7, #2]
 80064cc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80064d0:	e004      	b.n	80064dc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80064d2:	23fc      	movs	r3, #252	; 0xfc
 80064d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80064d8:	e000      	b.n	80064dc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80064da:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80064dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d109      	bne.n	80064f8 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80064ea:	69f9      	ldr	r1, [r7, #28]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7fc f907 	bl	8002700 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80064f2:	4603      	mov	r3, r0
 80064f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80064f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d109      	bne.n	8006514 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8006500:	f107 010f 	add.w	r1, r7, #15
 8006504:	2301      	movs	r3, #1
 8006506:	2200      	movs	r2, #0
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7fe fc0b 	bl	8004d24 <VL53L0X_perform_phase_calibration>
 800650e:	4603      	mov	r3, r0
 8006510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8006514:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006518:	4618      	mov	r0, r3
 800651a:	3728      	adds	r7, #40	; 0x28
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	460b      	mov	r3, r1
 800652a:	607a      	str	r2, [r7, #4]
 800652c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800652e:	2300      	movs	r3, #0
 8006530:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8006532:	7afb      	ldrb	r3, [r7, #11]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <VL53L0X_get_vcsel_pulse_period+0x1e>
 8006538:	2b01      	cmp	r3, #1
 800653a:	d00a      	beq.n	8006552 <VL53L0X_get_vcsel_pulse_period+0x32>
 800653c:	e013      	b.n	8006566 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800653e:	f107 0316 	add.w	r3, r7, #22
 8006542:	461a      	mov	r2, r3
 8006544:	2150      	movs	r1, #80	; 0x50
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f7fb faba 	bl	8001ac0 <VL53L0X_RdByte>
 800654c:	4603      	mov	r3, r0
 800654e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006550:	e00b      	b.n	800656a <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006552:	f107 0316 	add.w	r3, r7, #22
 8006556:	461a      	mov	r2, r3
 8006558:	2170      	movs	r1, #112	; 0x70
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f7fb fab0 	bl	8001ac0 <VL53L0X_RdByte>
 8006560:	4603      	mov	r3, r0
 8006562:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006564:	e001      	b.n	800656a <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006566:	23fc      	movs	r3, #252	; 0xfc
 8006568:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800656a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d107      	bne.n	8006582 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8006572:	7dbb      	ldrb	r3, [r7, #22]
 8006574:	4618      	mov	r0, r3
 8006576:	f7fe fcd3 	bl	8004f20 <VL53L0X_decode_vcsel_period>
 800657a:	4603      	mov	r3, r0
 800657c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	701a      	strb	r2, [r3, #0]

	return Status;
 8006582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006590:	b590      	push	{r4, r7, lr}
 8006592:	b097      	sub	sp, #92	; 0x5c
 8006594:	af04      	add	r7, sp, #16
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800659a:	2300      	movs	r3, #0
 800659c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80065a0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80065a4:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80065a6:	f240 7376 	movw	r3, #1910	; 0x776
 80065aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80065ac:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80065b0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80065b2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80065b6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80065b8:	f240 234e 	movw	r3, #590	; 0x24e
 80065bc:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80065be:	f240 23b2 	movw	r3, #690	; 0x2b2
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80065c4:	f44f 7325 	mov.w	r3, #660	; 0x294
 80065c8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80065ca:	f240 2326 	movw	r3, #550	; 0x226
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80065d4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80065d8:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80065da:	2300      	movs	r3, #0
 80065dc:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");
 80065de:	4b81      	ldr	r3, [pc, #516]	; (80067e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 80065e0:	681c      	ldr	r4, [r3, #0]
 80065e2:	f001 fa31 	bl	8007a48 <HAL_GetTick>
 80065e6:	4603      	mov	r3, r0
 80065e8:	461a      	mov	r2, r3
 80065ea:	4b7f      	ldr	r3, [pc, #508]	; (80067e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 80065ec:	9301      	str	r3, [sp, #4]
 80065ee:	9200      	str	r2, [sp, #0]
 80065f0:	4b7e      	ldr	r3, [pc, #504]	; (80067ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x25c>)
 80065f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80065f6:	4621      	mov	r1, r4
 80065f8:	2001      	movs	r0, #1
 80065fa:	f001 f977 	bl	80078ec <trace_print_module_function>

	if (MeasurementTimingBudgetMicroSeconds
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	429a      	cmp	r2, r3
 8006604:	d205      	bcs.n	8006612 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x82>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006606:	23fc      	movs	r3, #252	; 0xfc
 8006608:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800660c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006610:	e0e3      	b.n	80067da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8006612:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800661e:	f107 0314 	add.w	r3, r7, #20
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7fc fab7 	bl	8002b98 <VL53L0X_GetSequenceStepEnables>
 800662a:	4603      	mov	r3, r0
 800662c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8006630:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006634:	2b00      	cmp	r3, #0
 8006636:	d16e      	bne.n	8006716 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
		(SchedulerSequenceSteps.TccOn  ||
 8006638:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800663a:	2b00      	cmp	r3, #0
 800663c:	d105      	bne.n	800664a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xba>
		SchedulerSequenceSteps.MsrcOn ||
 800663e:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8006640:	2b00      	cmp	r3, #0
 8006642:	d102      	bne.n	800664a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xba>
		SchedulerSequenceSteps.DssOn)) {
 8006644:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8006646:	2b00      	cmp	r3, #0
 8006648:	d065      	beq.n	8006716 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800664a:	f107 0310 	add.w	r3, r7, #16
 800664e:	461a      	mov	r2, r3
 8006650:	2102      	movs	r1, #2
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff fb08 	bl	8005c68 <get_sequence_step_timeout>
 8006658:	4603      	mov	r3, r0
 800665a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800665e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
			return Status;
 8006666:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800666a:	e0b6      	b.n	80067da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800666c:	7d3b      	ldrb	r3, [r7, #20]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00f      	beq.n	8006692 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x102>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8006672:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8006674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006676:	4413      	add	r3, r2
 8006678:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667e:	429a      	cmp	r2, r3
 8006680:	d204      	bcs.n	800668c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xfc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8006682:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	643b      	str	r3, [r7, #64]	; 0x40
 800668a:	e002      	b.n	8006692 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x102>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800668c:	23fc      	movs	r3, #252	; 0xfc
 800668e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8006692:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006696:	2b00      	cmp	r3, #0
 8006698:	d015      	beq.n	80066c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x136>
			LOG_FUNCTION_END(Status);
 800669a:	4b52      	ldr	r3, [pc, #328]	; (80067e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 800669c:	681c      	ldr	r4, [r3, #0]
 800669e:	f001 f9d3 	bl	8007a48 <HAL_GetTick>
 80066a2:	4603      	mov	r3, r0
 80066a4:	461a      	mov	r2, r3
 80066a6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80066aa:	9302      	str	r3, [sp, #8]
 80066ac:	4b4e      	ldr	r3, [pc, #312]	; (80067e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	9200      	str	r2, [sp, #0]
 80066b2:	4b4f      	ldr	r3, [pc, #316]	; (80067f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 80066b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80066b8:	4621      	mov	r1, r4
 80066ba:	2001      	movs	r0, #1
 80066bc:	f001 f916 	bl	80078ec <trace_print_module_function>
			return Status;
 80066c0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80066c4:	e089      	b.n	80067da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80066c6:	7dbb      	ldrb	r3, [r7, #22]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d011      	beq.n	80066f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x160>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d0:	4413      	add	r3, r2
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80066d6:	69fa      	ldr	r2, [r7, #28]
 80066d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066da:	429a      	cmp	r2, r3
 80066dc:	d204      	bcs.n	80066e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x158>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80066de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	643b      	str	r3, [r7, #64]	; 0x40
 80066e6:	e016      	b.n	8006716 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80066e8:	23fc      	movs	r3, #252	; 0xfc
 80066ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80066ee:	e012      	b.n	8006716 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80066f0:	7d7b      	ldrb	r3, [r7, #21]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00f      	beq.n	8006716 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066fa:	4413      	add	r3, r2
 80066fc:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006702:	429a      	cmp	r2, r3
 8006704:	d204      	bcs.n	8006710 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x180>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006706:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	643b      	str	r3, [r7, #64]	; 0x40
 800670e:	e002      	b.n	8006716 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006710:	23fc      	movs	r3, #252	; 0xfc
 8006712:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8006716:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800671a:	2b00      	cmp	r3, #0
 800671c:	d015      	beq.n	800674a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1ba>
		LOG_FUNCTION_END(Status);
 800671e:	4b31      	ldr	r3, [pc, #196]	; (80067e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 8006720:	681c      	ldr	r4, [r3, #0]
 8006722:	f001 f991 	bl	8007a48 <HAL_GetTick>
 8006726:	4603      	mov	r3, r0
 8006728:	461a      	mov	r2, r3
 800672a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800672e:	9302      	str	r3, [sp, #8]
 8006730:	4b2d      	ldr	r3, [pc, #180]	; (80067e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 8006732:	9301      	str	r3, [sp, #4]
 8006734:	9200      	str	r2, [sp, #0]
 8006736:	4b2e      	ldr	r3, [pc, #184]	; (80067f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 8006738:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800673c:	4621      	mov	r1, r4
 800673e:	2001      	movs	r0, #1
 8006740:	f001 f8d4 	bl	80078ec <trace_print_module_function>
		return Status;
 8006744:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006748:	e047      	b.n	80067da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800674a:	7dfb      	ldrb	r3, [r7, #23]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d019      	beq.n	8006784 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f4>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8006750:	f107 030c 	add.w	r3, r7, #12
 8006754:	461a      	mov	r2, r3
 8006756:	2103      	movs	r1, #3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff fa85 	bl	8005c68 <get_sequence_step_timeout>
 800675e:	4603      	mov	r3, r0
 8006760:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006768:	4413      	add	r3, r2
 800676a:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800676c:	69fa      	ldr	r2, [r7, #28]
 800676e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006770:	429a      	cmp	r2, r3
 8006772:	d204      	bcs.n	800677e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1ee>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8006774:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	643b      	str	r3, [r7, #64]	; 0x40
 800677c:	e002      	b.n	8006784 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f4>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800677e:	23fc      	movs	r3, #252	; 0xfc
 8006780:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8006784:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006788:	2b00      	cmp	r3, #0
 800678a:	d111      	bne.n	80067b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x220>
		SchedulerSequenceSteps.FinalRangeOn) {
 800678c:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00e      	beq.n	80067b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x220>

		FinalRangeTimingBudgetMicroSeconds -=
 8006792:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800679a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800679c:	2104      	movs	r1, #4
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7ff fb43 	bl	8005e2a <set_sequence_step_timeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
 80067b0:	4b0c      	ldr	r3, [pc, #48]	; (80067e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 80067b2:	681c      	ldr	r4, [r3, #0]
 80067b4:	f001 f948 	bl	8007a48 <HAL_GetTick>
 80067b8:	4603      	mov	r3, r0
 80067ba:	461a      	mov	r2, r3
 80067bc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80067c0:	9302      	str	r3, [sp, #8]
 80067c2:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	9200      	str	r2, [sp, #0]
 80067c8:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 80067ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80067ce:	4621      	mov	r1, r4
 80067d0:	2001      	movs	r0, #1
 80067d2:	f001 f88b 	bl	80078ec <trace_print_module_function>

	return Status;
 80067d6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80067da:	4618      	mov	r0, r3
 80067dc:	374c      	adds	r7, #76	; 0x4c
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd90      	pop	{r4, r7, pc}
 80067e2:	bf00      	nop
 80067e4:	200007c8 	.word	0x200007c8
 80067e8:	0800ca20 	.word	0x0800ca20
 80067ec:	0800c974 	.word	0x0800c974
 80067f0:	0800c988 	.word	0x0800c988

080067f4 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80067f4:	b590      	push	{r4, r7, lr}
 80067f6:	b095      	sub	sp, #84	; 0x54
 80067f8:	af04      	add	r7, sp, #16
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067fe:	2300      	movs	r3, #0
 8006800:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006804:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006808:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800680a:	f240 7376 	movw	r3, #1910	; 0x776
 800680e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8006810:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006814:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006816:	f44f 7325 	mov.w	r3, #660	; 0x294
 800681a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800681c:	f240 234e 	movw	r3, #590	; 0x24e
 8006820:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8006822:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006826:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006828:	f44f 7325 	mov.w	r3, #660	; 0x294
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800682e:	f240 2326 	movw	r3, #550	; 0x226
 8006832:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");
 8006838:	4b62      	ldr	r3, [pc, #392]	; (80069c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 800683a:	681c      	ldr	r4, [r3, #0]
 800683c:	f001 f904 	bl	8007a48 <HAL_GetTick>
 8006840:	4603      	mov	r3, r0
 8006842:	461a      	mov	r2, r3
 8006844:	4b60      	ldr	r3, [pc, #384]	; (80069c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	9200      	str	r2, [sp, #0]
 800684a:	4b60      	ldr	r3, [pc, #384]	; (80069cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d8>)
 800684c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006850:	4621      	mov	r1, r4
 8006852:	2001      	movs	r0, #1
 8006854:	f001 f84a 	bl	80078ec <trace_print_module_function>

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8006858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800685a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685c:	441a      	add	r2, r3
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006862:	f107 0318 	add.w	r3, r7, #24
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7fc f995 	bl	8002b98 <VL53L0X_GetSequenceStepEnables>
 800686e:	4603      	mov	r3, r0
 8006870:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8006874:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006878:	2b00      	cmp	r3, #0
 800687a:	d015      	beq.n	80068a8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb4>
		LOG_FUNCTION_END(Status);
 800687c:	4b51      	ldr	r3, [pc, #324]	; (80069c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 800687e:	681c      	ldr	r4, [r3, #0]
 8006880:	f001 f8e2 	bl	8007a48 <HAL_GetTick>
 8006884:	4603      	mov	r3, r0
 8006886:	461a      	mov	r2, r3
 8006888:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800688c:	9302      	str	r3, [sp, #8]
 800688e:	4b4e      	ldr	r3, [pc, #312]	; (80069c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	9200      	str	r2, [sp, #0]
 8006894:	4b4e      	ldr	r3, [pc, #312]	; (80069d0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1dc>)
 8006896:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800689a:	4621      	mov	r1, r4
 800689c:	2001      	movs	r0, #1
 800689e:	f001 f825 	bl	80078ec <trace_print_module_function>
		return Status;
 80068a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80068a6:	e088      	b.n	80069ba <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c6>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80068a8:	7e3b      	ldrb	r3, [r7, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d105      	bne.n	80068ba <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		SchedulerSequenceSteps.MsrcOn ||
 80068ae:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		SchedulerSequenceSteps.DssOn) {
 80068b4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d030      	beq.n	800691c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>

		Status = get_sequence_step_timeout(Dev,
 80068ba:	f107 0310 	add.w	r3, r7, #16
 80068be:	461a      	mov	r2, r3
 80068c0:	2102      	movs	r1, #2
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff f9d0 	bl	8005c68 <get_sequence_step_timeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80068ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d122      	bne.n	800691c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
			if (SchedulerSequenceSteps.TccOn) {
 80068d6:	7e3b      	ldrb	r3, [r7, #24]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d007      	beq.n	80068ec <VL53L0X_get_measurement_timing_budget_micro_seconds+0xf8>
				*pMeasurementTimingBudgetMicroSeconds +=
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80068e0:	6939      	ldr	r1, [r7, #16]
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80068e6:	441a      	add	r2, r3
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80068ec:	7ebb      	ldrb	r3, [r7, #26]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d009      	beq.n	8006906 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x112>
				*pMeasurementTimingBudgetMicroSeconds +=
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80068f6:	6939      	ldr	r1, [r7, #16]
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	440b      	add	r3, r1
 80068fc:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80068fe:	441a      	add	r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	e00a      	b.n	800691c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8006906:	7e7b      	ldrb	r3, [r7, #25]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d007      	beq.n	800691c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
				*pMeasurementTimingBudgetMicroSeconds +=
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006910:	6939      	ldr	r1, [r7, #16]
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006916:	441a      	add	r2, r3
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800691c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006920:	2b00      	cmp	r3, #0
 8006922:	d114      	bne.n	800694e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8006924:	7efb      	ldrb	r3, [r7, #27]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d011      	beq.n	800694e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
			Status = get_sequence_step_timeout(Dev,
 800692a:	f107 030c 	add.w	r3, r7, #12
 800692e:	461a      	mov	r2, r3
 8006930:	2103      	movs	r1, #3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7ff f998 	bl	8005c68 <get_sequence_step_timeout>
 8006938:	4603      	mov	r3, r0
 800693a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8006942:	68f9      	ldr	r1, [r7, #12]
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006948:	441a      	add	r2, r3
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800694e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006952:	2b00      	cmp	r3, #0
 8006954:	d114      	bne.n	8006980 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x18c>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8006956:	7f3b      	ldrb	r3, [r7, #28]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d011      	beq.n	8006980 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x18c>
			Status = get_sequence_step_timeout(Dev,
 800695c:	f107 0314 	add.w	r3, r7, #20
 8006960:	461a      	mov	r2, r3
 8006962:	2104      	movs	r1, #4
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff f97f 	bl	8005c68 <get_sequence_step_timeout>
 800696a:	4603      	mov	r3, r0
 800696c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8006974:	6979      	ldr	r1, [r7, #20]
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800697a:	441a      	add	r2, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006980:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006984:	2b00      	cmp	r3, #0
 8006986:	d103      	bne.n	8006990 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x19c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
 8006990:	4b0c      	ldr	r3, [pc, #48]	; (80069c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 8006992:	681c      	ldr	r4, [r3, #0]
 8006994:	f001 f858 	bl	8007a48 <HAL_GetTick>
 8006998:	4603      	mov	r3, r0
 800699a:	461a      	mov	r2, r3
 800699c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80069a0:	9302      	str	r3, [sp, #8]
 80069a2:	4b09      	ldr	r3, [pc, #36]	; (80069c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 80069a4:	9301      	str	r3, [sp, #4]
 80069a6:	9200      	str	r2, [sp, #0]
 80069a8:	4b09      	ldr	r3, [pc, #36]	; (80069d0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1dc>)
 80069aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80069ae:	4621      	mov	r1, r4
 80069b0:	2001      	movs	r0, #1
 80069b2:	f000 ff9b 	bl	80078ec <trace_print_module_function>
	return Status;
 80069b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3744      	adds	r7, #68	; 0x44
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd90      	pop	{r4, r7, pc}
 80069c2:	bf00      	nop
 80069c4:	200007c8 	.word	0x200007c8
 80069c8:	0800ca54 	.word	0x0800ca54
 80069cc:	0800c974 	.word	0x0800c974
 80069d0:	0800c988 	.word	0x0800c988

080069d4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80069d4:	b590      	push	{r4, r7, lr}
 80069d6:	b08d      	sub	sp, #52	; 0x34
 80069d8:	af04      	add	r7, sp, #16
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069de:	2300      	movs	r3, #0
 80069e0:	77fb      	strb	r3, [r7, #31]
	uint8_t NumberOfWrites;
	uint8_t Address;
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");
 80069e2:	4b7f      	ldr	r3, [pc, #508]	; (8006be0 <VL53L0X_load_tuning_settings+0x20c>)
 80069e4:	681c      	ldr	r4, [r3, #0]
 80069e6:	f001 f82f 	bl	8007a48 <HAL_GetTick>
 80069ea:	4603      	mov	r3, r0
 80069ec:	461a      	mov	r2, r3
 80069ee:	4b7d      	ldr	r3, [pc, #500]	; (8006be4 <VL53L0X_load_tuning_settings+0x210>)
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	9200      	str	r2, [sp, #0]
 80069f4:	4b7c      	ldr	r3, [pc, #496]	; (8006be8 <VL53L0X_load_tuning_settings+0x214>)
 80069f6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80069fa:	4621      	mov	r1, r4
 80069fc:	2001      	movs	r0, #1
 80069fe:	f000 ff75 	bl	80078ec <trace_print_module_function>

	Index = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006a06:	e0c6      	b.n	8006b96 <VL53L0X_load_tuning_settings+0x1c2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	74fb      	strb	r3, [r7, #19]
		Index++;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	3301      	adds	r3, #1
 8006a16:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8006a18:	7cfb      	ldrb	r3, [r7, #19]
 8006a1a:	2bff      	cmp	r3, #255	; 0xff
 8006a1c:	f040 808d 	bne.w	8006b3a <VL53L0X_load_tuning_settings+0x166>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	4413      	add	r3, r2
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	747b      	strb	r3, [r7, #17]
			Index++;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8006a30:	7c7b      	ldrb	r3, [r7, #17]
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d87e      	bhi.n	8006b34 <VL53L0X_load_tuning_settings+0x160>
 8006a36:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <VL53L0X_load_tuning_settings+0x68>)
 8006a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3c:	08006a4d 	.word	0x08006a4d
 8006a40:	08006a87 	.word	0x08006a87
 8006a44:	08006ac1 	.word	0x08006ac1
 8006a48:	08006afb 	.word	0x08006afb
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	4413      	add	r3, r2
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	743b      	strb	r3, [r7, #16]
				Index++;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	4413      	add	r3, r2
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006a6c:	7c3b      	ldrb	r3, [r7, #16]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	021b      	lsls	r3, r3, #8
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	4413      	add	r3, r2
 8006a7a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	89ba      	ldrh	r2, [r7, #12]
 8006a80:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8006a84:	e087      	b.n	8006b96 <VL53L0X_load_tuning_settings+0x1c2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	743b      	strb	r3, [r7, #16]
				Index++;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	3301      	adds	r3, #1
 8006a94:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006aa6:	7c3b      	ldrb	r3, [r7, #16]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	021b      	lsls	r3, r3, #8
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	4413      	add	r3, r2
 8006ab4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	89ba      	ldrh	r2, [r7, #12]
 8006aba:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8006abe:	e06a      	b.n	8006b96 <VL53L0X_load_tuning_settings+0x1c2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	743b      	strb	r3, [r7, #16]
				Index++;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	3301      	adds	r3, #1
 8006ace:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	3301      	adds	r3, #1
 8006ade:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006ae0:	7c3b      	ldrb	r3, [r7, #16]
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	4413      	add	r3, r2
 8006aee:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	89ba      	ldrh	r2, [r7, #12]
 8006af4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8006af8:	e04d      	b.n	8006b96 <VL53L0X_load_tuning_settings+0x1c2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	4413      	add	r3, r2
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	743b      	strb	r3, [r7, #16]
				Index++;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	3301      	adds	r3, #1
 8006b08:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	4413      	add	r3, r2
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	3301      	adds	r3, #1
 8006b18:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006b1a:	7c3b      	ldrb	r3, [r7, #16]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	021b      	lsls	r3, r3, #8
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	4413      	add	r3, r2
 8006b28:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	89ba      	ldrh	r2, [r7, #12]
 8006b2e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8006b32:	e030      	b.n	8006b96 <VL53L0X_load_tuning_settings+0x1c2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b34:	23fc      	movs	r3, #252	; 0xfc
 8006b36:	77fb      	strb	r3, [r7, #31]
 8006b38:	e02d      	b.n	8006b96 <VL53L0X_load_tuning_settings+0x1c2>
			}

		} else if (NumberOfWrites <= 4) {
 8006b3a:	7cfb      	ldrb	r3, [r7, #19]
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	d828      	bhi.n	8006b92 <VL53L0X_load_tuning_settings+0x1be>
			Address = *(pTuningSettingBuffer + Index);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	4413      	add	r3, r2
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	74bb      	strb	r3, [r7, #18]
			Index++;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8006b50:	2300      	movs	r3, #0
 8006b52:	61bb      	str	r3, [r7, #24]
 8006b54:	e00f      	b.n	8006b76 <VL53L0X_load_tuning_settings+0x1a2>
				localBuffer[i] = *(pTuningSettingBuffer +
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	7819      	ldrb	r1, [r3, #0]
 8006b5e:	f107 0208 	add.w	r2, r7, #8
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	4413      	add	r3, r2
 8006b66:	460a      	mov	r2, r1
 8006b68:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	3301      	adds	r3, #1
 8006b74:	61bb      	str	r3, [r7, #24]
 8006b76:	7cfb      	ldrb	r3, [r7, #19]
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	dbeb      	blt.n	8006b56 <VL53L0X_load_tuning_settings+0x182>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8006b7e:	7cfb      	ldrb	r3, [r7, #19]
 8006b80:	f107 0208 	add.w	r2, r7, #8
 8006b84:	7cb9      	ldrb	r1, [r7, #18]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7fa febc 	bl	8001904 <VL53L0X_WriteMulti>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	77fb      	strb	r3, [r7, #31]
 8006b90:	e001      	b.n	8006b96 <VL53L0X_load_tuning_settings+0x1c2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b92:	23fc      	movs	r3, #252	; 0xfc
 8006b94:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d004      	beq.n	8006bac <VL53L0X_load_tuning_settings+0x1d8>
 8006ba2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f43f af2e 	beq.w	8006a08 <VL53L0X_load_tuning_settings+0x34>
		}
	}

	LOG_FUNCTION_END(Status);
 8006bac:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <VL53L0X_load_tuning_settings+0x20c>)
 8006bae:	681c      	ldr	r4, [r3, #0]
 8006bb0:	f000 ff4a 	bl	8007a48 <HAL_GetTick>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006bbc:	9302      	str	r3, [sp, #8]
 8006bbe:	4b09      	ldr	r3, [pc, #36]	; (8006be4 <VL53L0X_load_tuning_settings+0x210>)
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	9200      	str	r2, [sp, #0]
 8006bc4:	4b09      	ldr	r3, [pc, #36]	; (8006bec <VL53L0X_load_tuning_settings+0x218>)
 8006bc6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006bca:	4621      	mov	r1, r4
 8006bcc:	2001      	movs	r0, #1
 8006bce:	f000 fe8d 	bl	80078ec <trace_print_module_function>
	return Status;
 8006bd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3724      	adds	r7, #36	; 0x24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd90      	pop	{r4, r7, pc}
 8006bde:	bf00      	nop
 8006be0:	200007c8 	.word	0x200007c8
 8006be4:	0800ca88 	.word	0x0800ca88
 8006be8:	0800c974 	.word	0x0800c974
 8006bec:	0800c988 	.word	0x0800c988

08006bf0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8006c06:	f107 0313 	add.w	r3, r7, #19
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f7fc f8a7 	bl	8002d60 <VL53L0X_GetXTalkCompensationEnable>
 8006c12:	4603      	mov	r3, r0
 8006c14:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8006c16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d111      	bne.n	8006c42 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8006c1e:	7cfb      	ldrb	r3, [r7, #19]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00e      	beq.n	8006c42 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	8a9b      	ldrh	r3, [r3, #20]
 8006c2e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	fb02 f303 	mul.w	r3, r2, r3
 8006c36:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	3380      	adds	r3, #128	; 0x80
 8006c3c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8006c42:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3720      	adds	r7, #32
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8006c50:	b590      	push	{r4, r7, lr}
 8006c52:	b089      	sub	sp, #36	; 0x24
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");
 8006c60:	4b16      	ldr	r3, [pc, #88]	; (8006cbc <VL53L0X_get_total_signal_rate+0x6c>)
 8006c62:	681c      	ldr	r4, [r3, #0]
 8006c64:	f000 fef0 	bl	8007a48 <HAL_GetTick>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4b14      	ldr	r3, [pc, #80]	; (8006cc0 <VL53L0X_get_total_signal_rate+0x70>)
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	9200      	str	r2, [sp, #0]
 8006c72:	4b14      	ldr	r3, [pc, #80]	; (8006cc4 <VL53L0X_get_total_signal_rate+0x74>)
 8006c74:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006c78:	4621      	mov	r1, r4
 8006c7a:	2001      	movs	r0, #1
 8006c7c:	f000 fe36 	bl	80078ec <trace_print_module_function>

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8006c88:	f107 0310 	add.w	r3, r7, #16
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68b9      	ldr	r1, [r7, #8]
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f7ff ffad 	bl	8006bf0 <VL53L0X_get_total_xtalk_rate>
 8006c96:	4603      	mov	r3, r0
 8006c98:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8006c9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d105      	bne.n	8006cae <VL53L0X_get_total_signal_rate+0x5e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	441a      	add	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	601a      	str	r2, [r3, #0]

	return Status;
 8006cae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd90      	pop	{r4, r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	200007c8 	.word	0x200007c8
 8006cc0:	0800caa8 	.word	0x0800caa8
 8006cc4:	0800c974 	.word	0x0800c974

08006cc8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8006cc8:	b590      	push	{r4, r7, lr}
 8006cca:	b09f      	sub	sp, #124	; 0x7c
 8006ccc:	af04      	add	r7, sp, #16
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8006cd6:	2312      	movs	r3, #18
 8006cd8:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8006cda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006cde:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8006ce0:	2342      	movs	r3, #66	; 0x42
 8006ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8006ce4:	2306      	movs	r3, #6
 8006ce6:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8006ce8:	2307      	movs	r3, #7
 8006cea:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cec:	2300      	movs	r3, #0
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");
 8006cf2:	4b97      	ldr	r3, [pc, #604]	; (8006f50 <VL53L0X_calc_dmax+0x288>)
 8006cf4:	681c      	ldr	r4, [r3, #0]
 8006cf6:	f000 fea7 	bl	8007a48 <HAL_GetTick>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	4b95      	ldr	r3, [pc, #596]	; (8006f54 <VL53L0X_calc_dmax+0x28c>)
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	9200      	str	r2, [sp, #0]
 8006d04:	4b94      	ldr	r3, [pc, #592]	; (8006f58 <VL53L0X_calc_dmax+0x290>)
 8006d06:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	2001      	movs	r0, #1
 8006d0e:	f000 fded 	bl	80078ec <trace_print_module_function>

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8006d18:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006d20:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8006d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d26:	fb02 f303 	mul.w	r3, r2, r3
 8006d2a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8006d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2e:	3380      	adds	r3, #128	; 0x80
 8006d30:	0a1b      	lsrs	r3, r3, #8
 8006d32:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8006d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d38:	fb02 f303 	mul.w	r3, r2, r3
 8006d3c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01b      	beq.n	8006d80 <VL53L0X_calc_dmax+0xb8>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	029b      	lsls	r3, r3, #10
 8006d4c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8006d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d54:	4413      	add	r3, r2
 8006d56:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8006d58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d60:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8006d62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d64:	4613      	mov	r3, r2
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	4413      	add	r3, r2
 8006d6a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8006d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d70:	fb02 f303 	mul.w	r3, r2, r3
 8006d74:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8006d76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006d7c:	0c1b      	lsrs	r3, r3, #16
 8006d7e:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d84:	fb02 f303 	mul.w	r3, r2, r3
 8006d88:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8006d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006d90:	0c1b      	lsrs	r3, r3, #16
 8006d92:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8006d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d98:	fb02 f303 	mul.w	r3, r2, r3
 8006d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8006d9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006da0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006da4:	0c1b      	lsrs	r3, r3, #16
 8006da6:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8006da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006daa:	085a      	lsrs	r2, r3, #1
 8006dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dae:	441a      	add	r2, r3
 8006db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db6:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dbc:	fb02 f303 	mul.w	r3, r2, r3
 8006dc0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8006dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc8:	d302      	bcc.n	8006dd0 <VL53L0X_calc_dmax+0x108>
		minSignalNeeded_p3 = 0xfff00000;
 8006dca:	4b64      	ldr	r3, [pc, #400]	; (8006f5c <VL53L0X_calc_dmax+0x294>)
 8006dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8006dce:	e016      	b.n	8006dfe <VL53L0X_calc_dmax+0x136>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8006dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dd2:	085a      	lsrs	r2, r3, #1
 8006dd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006dd6:	441a      	add	r2, r3
 8006dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dde:	67fb      	str	r3, [r7, #124]	; 0x7c
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8006de0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006de2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006de4:	fb02 f303 	mul.w	r3, r2, r3
 8006de8:	67fb      	str	r3, [r7, #124]	; 0x7c

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8006dea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006dec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006df0:	0c1b      	lsrs	r3, r3, #16
 8006df2:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8006df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006df6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006df8:	fb02 f303 	mul.w	r3, r2, r3
 8006dfc:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8006dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e00:	039b      	lsls	r3, r3, #14
 8006e02:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006e06:	4a56      	ldr	r2, [pc, #344]	; (8006f60 <VL53L0X_calc_dmax+0x298>)
 8006e08:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0c:	099b      	lsrs	r3, r3, #6
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e14:	fb02 f303 	mul.w	r3, r2, r3
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8006e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	3308      	adds	r3, #8
 8006e28:	091b      	lsrs	r3, r3, #4
 8006e2a:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8006e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8006e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e36:	4613      	mov	r3, r2
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	4413      	add	r3, r2
 8006e3c:	011b      	lsls	r3, r3, #4
 8006e3e:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006e46:	0b9b      	lsrs	r3, r3, #14
 8006e48:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8006e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e4e:	4413      	add	r3, r2
 8006e50:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8006e52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e56:	085b      	lsrs	r3, r3, #1
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e68:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	039b      	lsls	r3, r3, #14
 8006e6e:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	085b      	lsrs	r3, r3, #1
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	4413      	add	r3, r2
 8006e78:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e82:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e88:	fb02 f303 	mul.w	r3, r2, r3
 8006e8c:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006e94:	4a32      	ldr	r2, [pc, #200]	; (8006f60 <VL53L0X_calc_dmax+0x298>)
 8006e96:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9a:	099b      	lsrs	r3, r3, #6
 8006e9c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	011b      	lsls	r3, r3, #4
 8006ea2:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006eaa:	4a2d      	ldr	r2, [pc, #180]	; (8006f60 <VL53L0X_calc_dmax+0x298>)
 8006eac:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb0:	099b      	lsrs	r3, r3, #6
 8006eb2:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8006eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eb6:	3380      	adds	r3, #128	; 0x80
 8006eb8:	0a1b      	lsrs	r3, r3, #8
 8006eba:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d008      	beq.n	8006ed4 <VL53L0X_calc_dmax+0x20c>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	085a      	lsrs	r2, r3, #1
 8006ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec8:	441a      	add	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ed2:	e001      	b.n	8006ed8 <VL53L0X_calc_dmax+0x210>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8006ed8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006eda:	f7fe f847 	bl	8004f6c <VL53L0X_isqrt>
 8006ede:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d008      	beq.n	8006ef8 <VL53L0X_calc_dmax+0x230>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	085a      	lsrs	r2, r3, #1
 8006eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eec:	441a      	add	r2, r3
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ef6:	e001      	b.n	8006efc <VL53L0X_calc_dmax+0x234>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8006efc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006efe:	f7fe f835 	bl	8004f6c <VL53L0X_isqrt>
 8006f02:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8006f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d903      	bls.n	8006f1c <VL53L0X_calc_dmax+0x254>
		*pdmax_mm = dmaxAmbient;
 8006f14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f1a:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 8006f1c:	4b0c      	ldr	r3, [pc, #48]	; (8006f50 <VL53L0X_calc_dmax+0x288>)
 8006f1e:	681c      	ldr	r4, [r3, #0]
 8006f20:	f000 fd92 	bl	8007a48 <HAL_GetTick>
 8006f24:	4603      	mov	r3, r0
 8006f26:	461a      	mov	r2, r3
 8006f28:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8006f2c:	9302      	str	r3, [sp, #8]
 8006f2e:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <VL53L0X_calc_dmax+0x28c>)
 8006f30:	9301      	str	r3, [sp, #4]
 8006f32:	9200      	str	r2, [sp, #0]
 8006f34:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <VL53L0X_calc_dmax+0x29c>)
 8006f36:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	2001      	movs	r0, #1
 8006f3e:	f000 fcd5 	bl	80078ec <trace_print_module_function>

	return Status;
 8006f42:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	376c      	adds	r7, #108	; 0x6c
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd90      	pop	{r4, r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	200007c8 	.word	0x200007c8
 8006f54:	0800cac8 	.word	0x0800cac8
 8006f58:	0800c974 	.word	0x0800c974
 8006f5c:	fff00000 	.word	0xfff00000
 8006f60:	10624dd3 	.word	0x10624dd3
 8006f64:	0800c988 	.word	0x0800c988

08006f68 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8006f68:	b590      	push	{r4, r7, lr}
 8006f6a:	b0b5      	sub	sp, #212	; 0xd4
 8006f6c:	af04      	add	r7, sp, #16
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8006f76:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8006f7e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8006f86:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8006f8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8006f8e:	f241 235c 	movw	r3, #4700	; 0x125c
 8006f92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8006f96:	4baf      	ldr	r3, [pc, #700]	; (8007254 <VL53L0X_calc_sigma_estimate+0x2ec>)
 8006f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8006f9c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8006fa2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8006fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fae:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8006fb0:	4ba9      	ldr	r3, [pc, #676]	; (8007258 <VL53L0X_calc_sigma_estimate+0x2f0>)
 8006fb2:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8006fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fb8:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8006fba:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8006fbe:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8006fc0:	f240 6377 	movw	r3, #1655	; 0x677
 8006fc4:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * @{
	 *
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");
 8006fcc:	4ba3      	ldr	r3, [pc, #652]	; (800725c <VL53L0X_calc_sigma_estimate+0x2f4>)
 8006fce:	681c      	ldr	r4, [r3, #0]
 8006fd0:	f000 fd3a 	bl	8007a48 <HAL_GetTick>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	4ba1      	ldr	r3, [pc, #644]	; (8007260 <VL53L0X_calc_sigma_estimate+0x2f8>)
 8006fda:	9301      	str	r3, [sp, #4]
 8006fdc:	9200      	str	r2, [sp, #0]
 8006fde:	4ba1      	ldr	r3, [pc, #644]	; (8007264 <VL53L0X_calc_sigma_estimate+0x2fc>)
 8006fe0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	2001      	movs	r0, #1
 8006fe8:	f000 fc80 	bl	80078ec <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a1b      	ldr	r3, [r3, #32]
 8006ff0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ffa:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8006ffe:	0c1b      	lsrs	r3, r3, #16
 8007000:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007008:	f107 0310 	add.w	r3, r7, #16
 800700c:	461a      	mov	r2, r3
 800700e:	68b9      	ldr	r1, [r7, #8]
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f7ff fe1d 	bl	8006c50 <VL53L0X_get_total_signal_rate>
 8007016:	4603      	mov	r3, r0
 8007018:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800701c:	f107 0314 	add.w	r3, r7, #20
 8007020:	461a      	mov	r2, r3
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff fde3 	bl	8006bf0 <VL53L0X_get_total_xtalk_rate>
 800702a:	4603      	mov	r3, r0
 800702c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007036:	fb02 f303 	mul.w	r3, r2, r3
 800703a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800703c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800703e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007042:	0c1b      	lsrs	r3, r3, #16
 8007044:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800704c:	fb02 f303 	mul.w	r3, r2, r3
 8007050:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007054:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800705a:	429a      	cmp	r2, r3
 800705c:	d902      	bls.n	8007064 <VL53L0X_calc_sigma_estimate+0xfc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800705e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007060:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8007064:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007068:	2b00      	cmp	r3, #0
 800706a:	d168      	bne.n	800713e <VL53L0X_calc_sigma_estimate+0x1d6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007072:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800707c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007080:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007084:	461a      	mov	r2, r3
 8007086:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f7fe fd98 	bl	8005bc0 <VL53L0X_calc_timeout_mclks>
 8007090:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80070a2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80070a6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80070aa:	461a      	mov	r2, r3
 80070ac:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f7fe fd85 	bl	8005bc0 <VL53L0X_calc_timeout_mclks>
 80070b6:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80070b8:	2303      	movs	r3, #3
 80070ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 80070be:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80070c2:	2b08      	cmp	r3, #8
 80070c4:	d102      	bne.n	80070cc <VL53L0X_calc_sigma_estimate+0x164>
			vcselWidth = 2;
 80070c6:	2302      	movs	r3, #2
 80070c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80070cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070d0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80070d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80070d6:	fb02 f303 	mul.w	r3, r2, r3
 80070da:	02db      	lsls	r3, r3, #11
 80070dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80070e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80070e8:	4a5f      	ldr	r2, [pc, #380]	; (8007268 <VL53L0X_calc_sigma_estimate+0x300>)
 80070ea:	fba2 2303 	umull	r2, r3, r2, r3
 80070ee:	099b      	lsrs	r3, r3, #6
 80070f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80070f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070fa:	fb02 f303 	mul.w	r3, r2, r3
 80070fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007102:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007106:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800710a:	4a57      	ldr	r2, [pc, #348]	; (8007268 <VL53L0X_calc_sigma_estimate+0x300>)
 800710c:	fba2 2303 	umull	r2, r3, r2, r3
 8007110:	099b      	lsrs	r3, r3, #6
 8007112:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	3380      	adds	r3, #128	; 0x80
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007124:	fb02 f303 	mul.w	r3, r2, r3
 8007128:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800712c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007130:	3380      	adds	r3, #128	; 0x80
 8007132:	0a1b      	lsrs	r3, r3, #8
 8007134:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	021b      	lsls	r3, r3, #8
 800713c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800713e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007142:	2b00      	cmp	r3, #0
 8007144:	d015      	beq.n	8007172 <VL53L0X_calc_sigma_estimate+0x20a>
		LOG_FUNCTION_END(Status);
 8007146:	4b45      	ldr	r3, [pc, #276]	; (800725c <VL53L0X_calc_sigma_estimate+0x2f4>)
 8007148:	681c      	ldr	r4, [r3, #0]
 800714a:	f000 fc7d 	bl	8007a48 <HAL_GetTick>
 800714e:	4603      	mov	r3, r0
 8007150:	461a      	mov	r2, r3
 8007152:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007156:	9302      	str	r3, [sp, #8]
 8007158:	4b41      	ldr	r3, [pc, #260]	; (8007260 <VL53L0X_calc_sigma_estimate+0x2f8>)
 800715a:	9301      	str	r3, [sp, #4]
 800715c:	9200      	str	r2, [sp, #0]
 800715e:	4b43      	ldr	r3, [pc, #268]	; (800726c <VL53L0X_calc_sigma_estimate+0x304>)
 8007160:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007164:	4621      	mov	r1, r4
 8007166:	2001      	movs	r0, #1
 8007168:	f000 fbc0 	bl	80078ec <trace_print_module_function>
		return Status;
 800716c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007170:	e17f      	b.n	8007472 <VL53L0X_calc_sigma_estimate+0x50a>
	}

	if (peakSignalRate_kcps == 0) {
 8007172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10c      	bne.n	8007192 <VL53L0X_calc_sigma_estimate+0x22a>
		*pSigmaEstimate = cSigmaEstMax;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800717e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007186:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2200      	movs	r2, #0
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	e15a      	b.n	8007448 <VL53L0X_calc_sigma_estimate+0x4e0>
	} else {
		if (vcselTotalEventsRtn < 1)
 8007192:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007196:	2b00      	cmp	r3, #0
 8007198:	d102      	bne.n	80071a0 <VL53L0X_calc_sigma_estimate+0x238>
			vcselTotalEventsRtn = 1;
 800719a:	2301      	movs	r3, #1
 800719c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 80071a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071a4:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80071a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071a8:	041a      	lsls	r2, r3, #16
 80071aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80071b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d902      	bls.n	80071c4 <VL53L0X_calc_sigma_estimate+0x25c>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80071be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80071c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80071cc:	fb02 f303 	mul.w	r3, r2, r3
 80071d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80071d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80071d8:	4613      	mov	r3, r2
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fd fec3 	bl	8004f6c <VL53L0X_isqrt>
 80071e6:	4603      	mov	r3, r0
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	891b      	ldrh	r3, [r3, #8]
 80071f0:	461a      	mov	r2, r3
 80071f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071f4:	fb02 f303 	mul.w	r3, r2, r3
 80071f8:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80071fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071fc:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80071fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007202:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007204:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007206:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800720a:	4a17      	ldr	r2, [pc, #92]	; (8007268 <VL53L0X_calc_sigma_estimate+0x300>)
 800720c:	fba2 2303 	umull	r2, r3, r2, r3
 8007210:	099b      	lsrs	r3, r3, #6
 8007212:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8007214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007216:	041b      	lsls	r3, r3, #16
 8007218:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800721c:	4a12      	ldr	r2, [pc, #72]	; (8007268 <VL53L0X_calc_sigma_estimate+0x300>)
 800721e:	fba2 2303 	umull	r2, r3, r2, r3
 8007222:	099b      	lsrs	r3, r3, #6
 8007224:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8007226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007228:	021b      	lsls	r3, r3, #8
 800722a:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800722c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800722e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007230:	fbb2 f3f3 	udiv	r3, r2, r3
 8007234:	2b00      	cmp	r3, #0
 8007236:	bfb8      	it	lt
 8007238:	425b      	neglt	r3, r3
 800723a:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800723c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723e:	021b      	lsls	r3, r3, #8
 8007240:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	7e1b      	ldrb	r3, [r3, #24]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d012      	beq.n	8007270 <VL53L0X_calc_sigma_estimate+0x308>
			pwMult = 1 << 16;
 800724a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800724e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007252:	e03c      	b.n	80072ce <VL53L0X_calc_sigma_estimate+0x366>
 8007254:	028f87ae 	.word	0x028f87ae
 8007258:	0006999a 	.word	0x0006999a
 800725c:	200007c8 	.word	0x200007c8
 8007260:	0800cadc 	.word	0x0800cadc
 8007264:	0800c974 	.word	0x0800c974
 8007268:	10624dd3 	.word	0x10624dd3
 800726c:	0800c988 	.word	0x0800c988
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8007270:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007276:	fbb2 f3f3 	udiv	r3, r2, r3
 800727a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800727e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007280:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8007284:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007288:	fb02 f303 	mul.w	r3, r2, r3
 800728c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007290:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007294:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007296:	4413      	add	r3, r2
 8007298:	0c1b      	lsrs	r3, r3, #16
 800729a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800729e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072a2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80072a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 80072aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 80072b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80072bc:	fb02 f303 	mul.w	r3, r2, r3
 80072c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 80072c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072c8:	0b9b      	lsrs	r3, r3, #14
 80072ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 80072ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072d4:	fb02 f303 	mul.w	r3, r2, r3
 80072d8:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80072e0:	0c1b      	lsrs	r3, r3, #16
 80072e2:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e8:	fb02 f303 	mul.w	r3, r2, r3
 80072ec:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80072ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80072f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80072fa:	0c1b      	lsrs	r3, r3, #16
 80072fc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007302:	fb02 f303 	mul.w	r3, r2, r3
 8007306:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8007308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800730a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730c:	4413      	add	r3, r2
 800730e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007312:	f7fd fe2b 	bl	8004f6c <VL53L0X_isqrt>
 8007316:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	041b      	lsls	r3, r3, #16
 800731c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	3332      	adds	r3, #50	; 0x32
 8007322:	4a56      	ldr	r2, [pc, #344]	; (800747c <VL53L0X_calc_sigma_estimate+0x514>)
 8007324:	fba2 2303 	umull	r2, r3, r2, r3
 8007328:	095a      	lsrs	r2, r3, #5
 800732a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800732c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007330:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007334:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007338:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800733c:	fb02 f303 	mul.w	r3, r2, r3
 8007340:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8007344:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007348:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800734c:	3308      	adds	r3, #8
 800734e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8007352:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007356:	4a4a      	ldr	r2, [pc, #296]	; (8007480 <VL53L0X_calc_sigma_estimate+0x518>)
 8007358:	fba2 2303 	umull	r2, r3, r2, r3
 800735c:	0b5b      	lsrs	r3, r3, #13
 800735e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8007362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007366:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007368:	429a      	cmp	r2, r3
 800736a:	d902      	bls.n	8007372 <VL53L0X_calc_sigma_estimate+0x40a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800736c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800736e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8007372:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007376:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800737a:	4413      	add	r3, r2
 800737c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8007380:	4a40      	ldr	r2, [pc, #256]	; (8007484 <VL53L0X_calc_sigma_estimate+0x51c>)
 8007382:	fba2 2303 	umull	r2, r3, r2, r3
 8007386:	099b      	lsrs	r3, r3, #6
 8007388:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800738e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007392:	441a      	add	r2, r3
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800739a:	4618      	mov	r0, r3
 800739c:	f7fd fde6 	bl	8004f6c <VL53L0X_isqrt>
 80073a0:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	021b      	lsls	r3, r3, #8
 80073a6:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80073ae:	4a35      	ldr	r2, [pc, #212]	; (8007484 <VL53L0X_calc_sigma_estimate+0x51c>)
 80073b0:	fba2 2303 	umull	r2, r3, r2, r3
 80073b4:	099b      	lsrs	r3, r3, #6
 80073b6:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 80073b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073bc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073c0:	fb02 f303 	mul.w	r3, r2, r3
 80073c4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	69fa      	ldr	r2, [r7, #28]
 80073ca:	fb02 f303 	mul.w	r3, r2, r3
 80073ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80073d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d4:	4413      	add	r3, r2
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fd fdc8 	bl	8004f6c <VL53L0X_isqrt>
 80073dc:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073e4:	fb02 f303 	mul.w	r3, r2, r3
 80073e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80073ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d009      	beq.n	8007406 <VL53L0X_calc_sigma_estimate+0x49e>
 80073f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d005      	beq.n	8007406 <VL53L0X_calc_sigma_estimate+0x49e>
 80073fa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80073fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007402:	429a      	cmp	r2, r3
 8007404:	d903      	bls.n	800740e <VL53L0X_calc_sigma_estimate+0x4a6>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8007406:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800740a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007414:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8007420:	6939      	ldr	r1, [r7, #16]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	9303      	str	r3, [sp, #12]
 8007426:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800742a:	9302      	str	r3, [sp, #8]
 800742c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007430:	9301      	str	r3, [sp, #4]
 8007432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800743a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f7ff fc43 	bl	8006cc8 <VL53L0X_calc_dmax>
 8007442:	4603      	mov	r3, r0
 8007444:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			sigmaEstimateP2,
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
 8007448:	4b0f      	ldr	r3, [pc, #60]	; (8007488 <VL53L0X_calc_sigma_estimate+0x520>)
 800744a:	681c      	ldr	r4, [r3, #0]
 800744c:	f000 fafc 	bl	8007a48 <HAL_GetTick>
 8007450:	4603      	mov	r3, r0
 8007452:	461a      	mov	r2, r3
 8007454:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007458:	9302      	str	r3, [sp, #8]
 800745a:	4b0c      	ldr	r3, [pc, #48]	; (800748c <VL53L0X_calc_sigma_estimate+0x524>)
 800745c:	9301      	str	r3, [sp, #4]
 800745e:	9200      	str	r2, [sp, #0]
 8007460:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <VL53L0X_calc_sigma_estimate+0x528>)
 8007462:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007466:	4621      	mov	r1, r4
 8007468:	2001      	movs	r0, #1
 800746a:	f000 fa3f 	bl	80078ec <trace_print_module_function>
	return Status;
 800746e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8007472:	4618      	mov	r0, r3
 8007474:	37c4      	adds	r7, #196	; 0xc4
 8007476:	46bd      	mov	sp, r7
 8007478:	bd90      	pop	{r4, r7, pc}
 800747a:	bf00      	nop
 800747c:	51eb851f 	.word	0x51eb851f
 8007480:	d1b71759 	.word	0xd1b71759
 8007484:	10624dd3 	.word	0x10624dd3
 8007488:	200007c8 	.word	0x200007c8
 800748c:	0800cadc 	.word	0x0800cadc
 8007490:	0800c988 	.word	0x0800c988

08007494 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007494:	b590      	push	{r4, r7, lr}
 8007496:	b095      	sub	sp, #84	; 0x54
 8007498:	af04      	add	r7, sp, #16
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	607a      	str	r2, [r7, #4]
 800749e:	461a      	mov	r2, r3
 80074a0:	460b      	mov	r3, r1
 80074a2:	72fb      	strb	r3, [r7, #11]
 80074a4:	4613      	mov	r3, r2
 80074a6:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074a8:	2300      	movs	r3, #0
 80074aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80074b4:	2300      	movs	r3, #0
 80074b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80074c0:	2300      	movs	r3, #0
 80074c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 80074de:	2300      	movs	r3, #0
 80074e0:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	613b      	str	r3, [r7, #16]
	FixPoint1616_t LastSignalRefMcps;

	LOG_FUNCTION_START("");
 80074e6:	4bc6      	ldr	r3, [pc, #792]	; (8007800 <VL53L0X_get_pal_range_status+0x36c>)
 80074e8:	681c      	ldr	r4, [r3, #0]
 80074ea:	f000 faad 	bl	8007a48 <HAL_GetTick>
 80074ee:	4603      	mov	r3, r0
 80074f0:	461a      	mov	r2, r3
 80074f2:	4bc4      	ldr	r3, [pc, #784]	; (8007804 <VL53L0X_get_pal_range_status+0x370>)
 80074f4:	9301      	str	r3, [sp, #4]
 80074f6:	9200      	str	r2, [sp, #0]
 80074f8:	4bc3      	ldr	r3, [pc, #780]	; (8007808 <VL53L0X_get_pal_range_status+0x374>)
 80074fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80074fe:	4621      	mov	r1, r4
 8007500:	2001      	movs	r0, #1
 8007502:	f000 f9f3 	bl	80078ec <trace_print_module_function>
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007506:	7afb      	ldrb	r3, [r7, #11]
 8007508:	10db      	asrs	r3, r3, #3
 800750a:	b2db      	uxtb	r3, r3
 800750c:	f003 030f 	and.w	r3, r3, #15
 8007510:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8007514:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007518:	2b00      	cmp	r3, #0
 800751a:	d017      	beq.n	800754c <VL53L0X_get_pal_range_status+0xb8>
 800751c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007520:	2b05      	cmp	r3, #5
 8007522:	d013      	beq.n	800754c <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 5 ||
 8007524:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007528:	2b07      	cmp	r3, #7
 800752a:	d00f      	beq.n	800754c <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 7 ||
 800752c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007530:	2b0c      	cmp	r3, #12
 8007532:	d00b      	beq.n	800754c <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 12 ||
 8007534:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007538:	2b0d      	cmp	r3, #13
 800753a:	d007      	beq.n	800754c <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 13 ||
 800753c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007540:	2b0e      	cmp	r3, #14
 8007542:	d003      	beq.n	800754c <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 14 ||
 8007544:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007548:	2b0f      	cmp	r3, #15
 800754a:	d103      	bne.n	8007554 <VL53L0X_get_pal_range_status+0xc0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800754c:	2301      	movs	r3, #1
 800754e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007552:	e002      	b.n	800755a <VL53L0X_get_pal_range_status+0xc6>
	} else {
		NoneFlag = 0;
 8007554:	2300      	movs	r3, #0
 8007556:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800755a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800755e:	2b00      	cmp	r3, #0
 8007560:	d109      	bne.n	8007576 <VL53L0X_get_pal_range_status+0xe2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007562:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8007566:	461a      	mov	r2, r3
 8007568:	2100      	movs	r1, #0
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f7fb fd4c 	bl	8003008 <VL53L0X_GetLimitCheckEnable>
 8007570:	4603      	mov	r3, r0
 8007572:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007576:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800757a:	2b00      	cmp	r3, #0
 800757c:	d02e      	beq.n	80075dc <VL53L0X_get_pal_range_status+0x148>
 800757e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007582:	2b00      	cmp	r3, #0
 8007584:	d12a      	bne.n	80075dc <VL53L0X_get_pal_range_status+0x148>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007586:	f107 0310 	add.w	r3, r7, #16
 800758a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800758e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f7ff fce9 	bl	8006f68 <VL53L0X_calc_sigma_estimate>
 8007596:	4603      	mov	r3, r0
 8007598:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800759c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d103      	bne.n	80075ac <VL53L0X_get_pal_range_status+0x118>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075aa:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80075ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d113      	bne.n	80075dc <VL53L0X_get_pal_range_status+0x148>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80075b4:	f107 0320 	add.w	r3, r7, #32
 80075b8:	461a      	mov	r2, r3
 80075ba:	2100      	movs	r1, #0
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7fb fdfb 	bl	80031b8 <VL53L0X_GetLimitCheckValue>
 80075c2:	4603      	mov	r3, r0
 80075c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d006      	beq.n	80075dc <VL53L0X_get_pal_range_status+0x148>
				(SigmaEstimate > SigmaLimitValue))
 80075ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075d0:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d902      	bls.n	80075dc <VL53L0X_get_pal_range_status+0x148>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80075d6:	2301      	movs	r3, #1
 80075d8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80075dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d109      	bne.n	80075f8 <VL53L0X_get_pal_range_status+0x164>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80075e4:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80075e8:	461a      	mov	r2, r3
 80075ea:	2102      	movs	r1, #2
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f7fb fd0b 	bl	8003008 <VL53L0X_GetLimitCheckEnable>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80075f8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d044      	beq.n	800768a <VL53L0X_get_pal_range_status+0x1f6>
 8007600:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007604:	2b00      	cmp	r3, #0
 8007606:	d140      	bne.n	800768a <VL53L0X_get_pal_range_status+0x1f6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007608:	f107 031c 	add.w	r3, r7, #28
 800760c:	461a      	mov	r2, r3
 800760e:	2102      	movs	r1, #2
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f7fb fdd1 	bl	80031b8 <VL53L0X_GetLimitCheckValue>
 8007616:	4603      	mov	r3, r0
 8007618:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800761c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007620:	2b00      	cmp	r3, #0
 8007622:	d107      	bne.n	8007634 <VL53L0X_get_pal_range_status+0x1a0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007624:	2201      	movs	r2, #1
 8007626:	21ff      	movs	r1, #255	; 0xff
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f7fa f9c7 	bl	80019bc <VL53L0X_WrByte>
 800762e:	4603      	mov	r3, r0
 8007630:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8007634:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007638:	2b00      	cmp	r3, #0
 800763a:	d109      	bne.n	8007650 <VL53L0X_get_pal_range_status+0x1bc>
			Status = VL53L0X_RdWord(Dev,
 800763c:	f107 0316 	add.w	r3, r7, #22
 8007640:	461a      	mov	r2, r3
 8007642:	21b6      	movs	r1, #182	; 0xb6
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f7fa fa65 	bl	8001b14 <VL53L0X_RdWord>
 800764a:	4603      	mov	r3, r0
 800764c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8007650:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007654:	2b00      	cmp	r3, #0
 8007656:	d107      	bne.n	8007668 <VL53L0X_get_pal_range_status+0x1d4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007658:	2200      	movs	r2, #0
 800765a:	21ff      	movs	r1, #255	; 0xff
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f7fa f9ad 	bl	80019bc <VL53L0X_WrByte>
 8007662:	4603      	mov	r3, r0
 8007664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007668:	8afb      	ldrh	r3, [r7, #22]
 800766a:	025b      	lsls	r3, r3, #9
 800766c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007672:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d006      	beq.n	800768a <VL53L0X_get_pal_range_status+0x1f6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800767c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800767e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007680:	429a      	cmp	r2, r3
 8007682:	d902      	bls.n	800768a <VL53L0X_get_pal_range_status+0x1f6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007684:	2301      	movs	r3, #1
 8007686:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800768a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800768e:	2b00      	cmp	r3, #0
 8007690:	d109      	bne.n	80076a6 <VL53L0X_get_pal_range_status+0x212>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007692:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007696:	461a      	mov	r2, r3
 8007698:	2103      	movs	r1, #3
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f7fb fcb4 	bl	8003008 <VL53L0X_GetLimitCheckEnable>
 80076a0:	4603      	mov	r3, r0
 80076a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80076a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d023      	beq.n	80076f6 <VL53L0X_get_pal_range_status+0x262>
 80076ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d11f      	bne.n	80076f6 <VL53L0X_get_pal_range_status+0x262>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80076b6:	893b      	ldrh	r3, [r7, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d102      	bne.n	80076c2 <VL53L0X_get_pal_range_status+0x22e>
			SignalRatePerSpad = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	637b      	str	r3, [r7, #52]	; 0x34
 80076c0:	e005      	b.n	80076ce <VL53L0X_get_pal_range_status+0x23a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	021a      	lsls	r2, r3, #8
 80076c6:	893b      	ldrh	r3, [r7, #8]
 80076c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076cc:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80076ce:	f107 0318 	add.w	r3, r7, #24
 80076d2:	461a      	mov	r2, r3
 80076d4:	2103      	movs	r1, #3
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f7fb fd6e 	bl	80031b8 <VL53L0X_GetLimitCheckValue>
 80076dc:	4603      	mov	r3, r0
 80076de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d006      	beq.n	80076f6 <VL53L0X_get_pal_range_status+0x262>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80076e8:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80076ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d202      	bcs.n	80076f6 <VL53L0X_get_pal_range_status+0x262>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 80076f0:	2301      	movs	r3, #1
 80076f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d14a      	bne.n	8007794 <VL53L0X_get_pal_range_status+0x300>
		if (NoneFlag == 1) {
 80076fe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007702:	2b01      	cmp	r3, #1
 8007704:	d103      	bne.n	800770e <VL53L0X_get_pal_range_status+0x27a>
			*pPalRangeStatus = 255;	 /* NONE */
 8007706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007708:	22ff      	movs	r2, #255	; 0xff
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	e042      	b.n	8007794 <VL53L0X_get_pal_range_status+0x300>
		} else if (DeviceRangeStatusInternal == 1 ||
 800770e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007712:	2b01      	cmp	r3, #1
 8007714:	d007      	beq.n	8007726 <VL53L0X_get_pal_range_status+0x292>
 8007716:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800771a:	2b02      	cmp	r3, #2
 800771c:	d003      	beq.n	8007726 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 2 ||
 800771e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007722:	2b03      	cmp	r3, #3
 8007724:	d103      	bne.n	800772e <VL53L0X_get_pal_range_status+0x29a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8007726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007728:	2205      	movs	r2, #5
 800772a:	701a      	strb	r2, [r3, #0]
 800772c:	e032      	b.n	8007794 <VL53L0X_get_pal_range_status+0x300>
		} else if (DeviceRangeStatusInternal == 6 ||
 800772e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007732:	2b06      	cmp	r3, #6
 8007734:	d003      	beq.n	800773e <VL53L0X_get_pal_range_status+0x2aa>
 8007736:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800773a:	2b09      	cmp	r3, #9
 800773c:	d103      	bne.n	8007746 <VL53L0X_get_pal_range_status+0x2b2>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800773e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007740:	2204      	movs	r2, #4
 8007742:	701a      	strb	r2, [r3, #0]
 8007744:	e026      	b.n	8007794 <VL53L0X_get_pal_range_status+0x300>
		} else if (DeviceRangeStatusInternal == 8 ||
 8007746:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800774a:	2b08      	cmp	r3, #8
 800774c:	d007      	beq.n	800775e <VL53L0X_get_pal_range_status+0x2ca>
 800774e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007752:	2b0a      	cmp	r3, #10
 8007754:	d003      	beq.n	800775e <VL53L0X_get_pal_range_status+0x2ca>
					DeviceRangeStatusInternal == 10 ||
 8007756:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800775a:	2b01      	cmp	r3, #1
 800775c:	d103      	bne.n	8007766 <VL53L0X_get_pal_range_status+0x2d2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800775e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007760:	2203      	movs	r2, #3
 8007762:	701a      	strb	r2, [r3, #0]
 8007764:	e016      	b.n	8007794 <VL53L0X_get_pal_range_status+0x300>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007766:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800776a:	2b04      	cmp	r3, #4
 800776c:	d003      	beq.n	8007776 <VL53L0X_get_pal_range_status+0x2e2>
 800776e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007772:	2b01      	cmp	r3, #1
 8007774:	d103      	bne.n	800777e <VL53L0X_get_pal_range_status+0x2ea>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007778:	2202      	movs	r2, #2
 800777a:	701a      	strb	r2, [r3, #0]
 800777c:	e00a      	b.n	8007794 <VL53L0X_get_pal_range_status+0x300>
		} else if (SigmaLimitflag == 1) {
 800777e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007782:	2b01      	cmp	r3, #1
 8007784:	d103      	bne.n	800778e <VL53L0X_get_pal_range_status+0x2fa>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007788:	2201      	movs	r2, #1
 800778a:	701a      	strb	r2, [r3, #0]
 800778c:	e002      	b.n	8007794 <VL53L0X_get_pal_range_status+0x300>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800778e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007790:	2200      	movs	r2, #0
 8007792:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8007794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d102      	bne.n	80077a2 <VL53L0X_get_pal_range_status+0x30e>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800779c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800779e:	2200      	movs	r2, #0
 80077a0:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80077a2:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80077a6:	461a      	mov	r2, r3
 80077a8:	2101      	movs	r1, #1
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f7fb fc2c 	bl	8003008 <VL53L0X_GetLimitCheckEnable>
 80077b0:	4603      	mov	r3, r0
 80077b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80077b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d156      	bne.n	800786c <VL53L0X_get_pal_range_status+0x3d8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80077be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <VL53L0X_get_pal_range_status+0x33a>
 80077c6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d103      	bne.n	80077d6 <VL53L0X_get_pal_range_status+0x342>
			Temp8 = 1;
 80077ce:	2301      	movs	r3, #1
 80077d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077d4:	e002      	b.n	80077dc <VL53L0X_get_pal_range_status+0x348>
		else
			Temp8 = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80077e2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80077e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d003      	beq.n	80077f6 <VL53L0X_get_pal_range_status+0x362>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80077ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10a      	bne.n	800780c <VL53L0X_get_pal_range_status+0x378>
			Temp8 = 1;
 80077f6:	2301      	movs	r3, #1
 80077f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077fc:	e009      	b.n	8007812 <VL53L0X_get_pal_range_status+0x37e>
 80077fe:	bf00      	nop
 8007800:	200007c8 	.word	0x200007c8
 8007804:	0800caf8 	.word	0x0800caf8
 8007808:	0800c974 	.word	0x0800c974
		else
			Temp8 = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007818:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800781c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007820:	2b00      	cmp	r3, #0
 8007822:	d003      	beq.n	800782c <VL53L0X_get_pal_range_status+0x398>
 8007824:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007828:	2b01      	cmp	r3, #1
 800782a:	d103      	bne.n	8007834 <VL53L0X_get_pal_range_status+0x3a0>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800782c:	2301      	movs	r3, #1
 800782e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007832:	e002      	b.n	800783a <VL53L0X_get_pal_range_status+0x3a6>
		else
			Temp8 = 0;
 8007834:	2300      	movs	r3, #0
 8007836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007840:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8007844:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <VL53L0X_get_pal_range_status+0x3c0>
 800784c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007850:	2b01      	cmp	r3, #1
 8007852:	d103      	bne.n	800785c <VL53L0X_get_pal_range_status+0x3c8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8007854:	2301      	movs	r3, #1
 8007856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800785a:	e002      	b.n	8007862 <VL53L0X_get_pal_range_status+0x3ce>
		else
			Temp8 = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007868:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
 800786c:	4b0c      	ldr	r3, [pc, #48]	; (80078a0 <VL53L0X_get_pal_range_status+0x40c>)
 800786e:	681c      	ldr	r4, [r3, #0]
 8007870:	f000 f8ea 	bl	8007a48 <HAL_GetTick>
 8007874:	4603      	mov	r3, r0
 8007876:	461a      	mov	r2, r3
 8007878:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800787c:	9302      	str	r3, [sp, #8]
 800787e:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <VL53L0X_get_pal_range_status+0x410>)
 8007880:	9301      	str	r3, [sp, #4]
 8007882:	9200      	str	r2, [sp, #0]
 8007884:	4b08      	ldr	r3, [pc, #32]	; (80078a8 <VL53L0X_get_pal_range_status+0x414>)
 8007886:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800788a:	4621      	mov	r1, r4
 800788c:	2001      	movs	r0, #1
 800788e:	f000 f82d 	bl	80078ec <trace_print_module_function>
	return Status;
 8007892:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8007896:	4618      	mov	r0, r3
 8007898:	3744      	adds	r7, #68	; 0x44
 800789a:	46bd      	mov	sp, r7
 800789c:	bd90      	pop	{r4, r7, pc}
 800789e:	bf00      	nop
 80078a0:	200007c8 	.word	0x200007c8
 80078a4:	0800caf8 	.word	0x0800caf8
 80078a8:	0800c988 	.word	0x0800c988

080078ac <VL53L0X_trace_config>:
uint32_t _trace_modules = TRACE_MODULE_NONE;
uint32_t _trace_functions = TRACE_FUNCTION_NONE;

#if defined(VL53L0X_LOG_ENABLE) && (TRACE_UART==1)
int32_t VL53L0X_trace_config(char *filename, uint32_t modules, uint32_t level, uint32_t functions)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b087      	sub	sp, #28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
    int STATUS = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	617b      	str	r3, [r7, #20]

    _trace_functions = functions;
 80078be:	4a08      	ldr	r2, [pc, #32]	; (80078e0 <VL53L0X_trace_config+0x34>)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	6013      	str	r3, [r2, #0]
    _trace_level = level;
 80078c4:	4a07      	ldr	r2, [pc, #28]	; (80078e4 <VL53L0X_trace_config+0x38>)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6013      	str	r3, [r2, #0]
    _trace_modules = modules;
 80078ca:	4a07      	ldr	r2, [pc, #28]	; (80078e8 <VL53L0X_trace_config+0x3c>)
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	6013      	str	r3, [r2, #0]

    return STATUS;
 80078d0:	697b      	ldr	r3, [r7, #20]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	371c      	adds	r7, #28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	20000964 	.word	0x20000964
 80078e4:	200007c8 	.word	0x200007c8
 80078e8:	20000960 	.word	0x20000960

080078ec <trace_print_module_function>:


void trace_print_module_function(uint32_t module, uint32_t level, uint32_t function, const char *format, ...)
{
 80078ec:	b408      	push	{r3}
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b087      	sub	sp, #28
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	60f8      	str	r0, [r7, #12]
 80078f6:	60b9      	str	r1, [r7, #8]
 80078f8:	607a      	str	r2, [r7, #4]
    if ( ((level <=_trace_level) && ((module & _trace_modules) > 0))
 80078fa:	4b0f      	ldr	r3, [pc, #60]	; (8007938 <trace_print_module_function+0x4c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	429a      	cmp	r2, r3
 8007902:	d805      	bhi.n	8007910 <trace_print_module_function+0x24>
 8007904:	4b0d      	ldr	r3, [pc, #52]	; (800793c <trace_print_module_function+0x50>)
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4013      	ands	r3, r2
 800790c:	2b00      	cmp	r3, #0
 800790e:	d105      	bne.n	800791c <trace_print_module_function+0x30>
        || ((function & _trace_functions) > 0) )
 8007910:	4b0b      	ldr	r3, [pc, #44]	; (8007940 <trace_print_module_function+0x54>)
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4013      	ands	r3, r2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d006      	beq.n	800792a <trace_print_module_function+0x3e>
    {
    	va_list arg_list;
        va_start(arg_list, format);
 800791c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007920:	617b      	str	r3, [r7, #20]
        trace_vprintf( format, arg_list);
 8007922:	6979      	ldr	r1, [r7, #20]
 8007924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007926:	f7f9 fe4f 	bl	80015c8 <uart_vprintf>
        va_end(arg_list);
    }
}
 800792a:	bf00      	nop
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007934:	b001      	add	sp, #4
 8007936:	4770      	bx	lr
 8007938:	200007c8 	.word	0x200007c8
 800793c:	20000960 	.word	0x20000960
 8007940:	20000964 	.word	0x20000964

08007944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007944:	b480      	push	{r7}
 8007946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007948:	4b16      	ldr	r3, [pc, #88]	; (80079a4 <SystemInit+0x60>)
 800794a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800794e:	4a15      	ldr	r2, [pc, #84]	; (80079a4 <SystemInit+0x60>)
 8007950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007958:	4b13      	ldr	r3, [pc, #76]	; (80079a8 <SystemInit+0x64>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a12      	ldr	r2, [pc, #72]	; (80079a8 <SystemInit+0x64>)
 800795e:	f043 0301 	orr.w	r3, r3, #1
 8007962:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007964:	4b10      	ldr	r3, [pc, #64]	; (80079a8 <SystemInit+0x64>)
 8007966:	2200      	movs	r2, #0
 8007968:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800796a:	4b0f      	ldr	r3, [pc, #60]	; (80079a8 <SystemInit+0x64>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a0e      	ldr	r2, [pc, #56]	; (80079a8 <SystemInit+0x64>)
 8007970:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007978:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800797a:	4b0b      	ldr	r3, [pc, #44]	; (80079a8 <SystemInit+0x64>)
 800797c:	4a0b      	ldr	r2, [pc, #44]	; (80079ac <SystemInit+0x68>)
 800797e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007980:	4b09      	ldr	r3, [pc, #36]	; (80079a8 <SystemInit+0x64>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a08      	ldr	r2, [pc, #32]	; (80079a8 <SystemInit+0x64>)
 8007986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800798a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800798c:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <SystemInit+0x64>)
 800798e:	2200      	movs	r2, #0
 8007990:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007992:	4b04      	ldr	r3, [pc, #16]	; (80079a4 <SystemInit+0x60>)
 8007994:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007998:	609a      	str	r2, [r3, #8]
#endif
}
 800799a:	bf00      	nop
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	e000ed00 	.word	0xe000ed00
 80079a8:	40023800 	.word	0x40023800
 80079ac:	24003010 	.word	0x24003010

080079b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80079b4:	4b0e      	ldr	r3, [pc, #56]	; (80079f0 <HAL_Init+0x40>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a0d      	ldr	r2, [pc, #52]	; (80079f0 <HAL_Init+0x40>)
 80079ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80079c0:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <HAL_Init+0x40>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a0a      	ldr	r2, [pc, #40]	; (80079f0 <HAL_Init+0x40>)
 80079c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80079cc:	4b08      	ldr	r3, [pc, #32]	; (80079f0 <HAL_Init+0x40>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a07      	ldr	r2, [pc, #28]	; (80079f0 <HAL_Init+0x40>)
 80079d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80079d8:	2003      	movs	r0, #3
 80079da:	f000 f923 	bl	8007c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80079de:	200f      	movs	r0, #15
 80079e0:	f000 f808 	bl	80079f4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80079e4:	f7f9 fa9a 	bl	8000f1c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	40023c00 	.word	0x40023c00

080079f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80079fc:	4b09      	ldr	r3, [pc, #36]	; (8007a24 <HAL_InitTick+0x30>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a09      	ldr	r2, [pc, #36]	; (8007a28 <HAL_InitTick+0x34>)
 8007a02:	fba2 2303 	umull	r2, r3, r2, r3
 8007a06:	099b      	lsrs	r3, r3, #6
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 f940 	bl	8007c8e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8007a0e:	2200      	movs	r2, #0
 8007a10:	6879      	ldr	r1, [r7, #4]
 8007a12:	f04f 30ff 	mov.w	r0, #4294967295
 8007a16:	f000 f910 	bl	8007c3a <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	200007cc 	.word	0x200007cc
 8007a28:	10624dd3 	.word	0x10624dd3

08007a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
  uwTick++;
 8007a30:	4b04      	ldr	r3, [pc, #16]	; (8007a44 <HAL_IncTick+0x18>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	3301      	adds	r3, #1
 8007a36:	4a03      	ldr	r2, [pc, #12]	; (8007a44 <HAL_IncTick+0x18>)
 8007a38:	6013      	str	r3, [r2, #0]
}
 8007a3a:	bf00      	nop
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	20000b04 	.word	0x20000b04

08007a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8007a4c:	4b03      	ldr	r3, [pc, #12]	; (8007a5c <HAL_GetTick+0x14>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	20000b04 	.word	0x20000b04

08007a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8007a6c:	f7ff ffec 	bl	8007a48 <HAL_GetTick>
 8007a70:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8007a72:	bf00      	nop
 8007a74:	f7ff ffe8 	bl	8007a48 <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	1ad2      	subs	r2, r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d3f7      	bcc.n	8007a74 <HAL_Delay+0x14>
  {
  }
}
 8007a84:	bf00      	nop
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a9c:	4b0c      	ldr	r3, [pc, #48]	; (8007ad0 <NVIC_SetPriorityGrouping+0x44>)
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007abe:	4a04      	ldr	r2, [pc, #16]	; (8007ad0 <NVIC_SetPriorityGrouping+0x44>)
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	60d3      	str	r3, [r2, #12]
}
 8007ac4:	bf00      	nop
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	e000ed00 	.word	0xe000ed00

08007ad4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ad8:	4b04      	ldr	r3, [pc, #16]	; (8007aec <NVIC_GetPriorityGrouping+0x18>)
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	0a1b      	lsrs	r3, r3, #8
 8007ade:	f003 0307 	and.w	r3, r3, #7
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	e000ed00 	.word	0xe000ed00

08007af0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	f003 021f 	and.w	r2, r3, #31
 8007b00:	4907      	ldr	r1, [pc, #28]	; (8007b20 <NVIC_EnableIRQ+0x30>)
 8007b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b06:	095b      	lsrs	r3, r3, #5
 8007b08:	2001      	movs	r0, #1
 8007b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8007b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	e000e100 	.word	0xe000e100

08007b24 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	6039      	str	r1, [r7, #0]
 8007b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8007b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	da0b      	bge.n	8007b50 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	490c      	ldr	r1, [pc, #48]	; (8007b70 <NVIC_SetPriority+0x4c>)
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	f003 030f 	and.w	r3, r3, #15
 8007b44:	3b04      	subs	r3, #4
 8007b46:	0112      	lsls	r2, r2, #4
 8007b48:	b2d2      	uxtb	r2, r2
 8007b4a:	440b      	add	r3, r1
 8007b4c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b4e:	e009      	b.n	8007b64 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	4907      	ldr	r1, [pc, #28]	; (8007b74 <NVIC_SetPriority+0x50>)
 8007b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b5a:	0112      	lsls	r2, r2, #4
 8007b5c:	b2d2      	uxtb	r2, r2
 8007b5e:	440b      	add	r3, r1
 8007b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	e000ed00 	.word	0xe000ed00
 8007b74:	e000e100 	.word	0xe000e100

08007b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b089      	sub	sp, #36	; 0x24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	f1c3 0307 	rsb	r3, r3, #7
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	bf28      	it	cs
 8007b96:	2304      	movcs	r3, #4
 8007b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	2b06      	cmp	r3, #6
 8007ba0:	d902      	bls.n	8007ba8 <NVIC_EncodePriority+0x30>
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	3b03      	subs	r3, #3
 8007ba6:	e000      	b.n	8007baa <NVIC_EncodePriority+0x32>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bac:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb6:	43da      	mvns	r2, r3
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	401a      	ands	r2, r3
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bca:	43d9      	mvns	r1, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bd0:	4313      	orrs	r3, r2
         );
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3724      	adds	r7, #36	; 0x24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
	...

08007be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bf0:	d301      	bcc.n	8007bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e00f      	b.n	8007c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007bf6:	4a0a      	ldr	r2, [pc, #40]	; (8007c20 <SysTick_Config+0x40>)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007bfe:	210f      	movs	r1, #15
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295
 8007c04:	f7ff ff8e 	bl	8007b24 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c08:	4b05      	ldr	r3, [pc, #20]	; (8007c20 <SysTick_Config+0x40>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c0e:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <SysTick_Config+0x40>)
 8007c10:	2207      	movs	r2, #7
 8007c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	e000e010 	.word	0xe000e010

08007c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff ff2d 	bl	8007a8c <NVIC_SetPriorityGrouping>
}
 8007c32:	bf00      	nop
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b086      	sub	sp, #24
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	4603      	mov	r3, r0
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	607a      	str	r2, [r7, #4]
 8007c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c4c:	f7ff ff42 	bl	8007ad4 <NVIC_GetPriorityGrouping>
 8007c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	68b9      	ldr	r1, [r7, #8]
 8007c56:	6978      	ldr	r0, [r7, #20]
 8007c58:	f7ff ff8e 	bl	8007b78 <NVIC_EncodePriority>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c62:	4611      	mov	r1, r2
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7ff ff5d 	bl	8007b24 <NVIC_SetPriority>
}
 8007c6a:	bf00      	nop
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b082      	sub	sp, #8
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	4603      	mov	r3, r0
 8007c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff ff35 	bl	8007af0 <NVIC_EnableIRQ>
}
 8007c86:	bf00      	nop
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7ff ffa2 	bl	8007be0 <SysTick_Config>
 8007c9c:	4603      	mov	r3, r0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8007caa:	f000 f802 	bl	8007cb2 <HAL_SYSTICK_Callback>
}
 8007cae:	bf00      	nop
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8007cb6:	bf00      	nop
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007ccc:	f7ff febc 	bl	8007a48 <HAL_GetTick>
 8007cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e095      	b.n	8007e08 <HAL_DMA_Init+0x148>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0201 	bic.w	r2, r2, #1
 8007cfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007cfc:	e00f      	b.n	8007d1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007cfe:	f7ff fea3 	bl	8007a48 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b05      	cmp	r3, #5
 8007d0a:	d908      	bls.n	8007d1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2203      	movs	r2, #3
 8007d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e074      	b.n	8007e08 <HAL_DMA_Init+0x148>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e8      	bne.n	8007cfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	4b36      	ldr	r3, [pc, #216]	; (8007e10 <HAL_DMA_Init+0x150>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d107      	bne.n	8007d88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d80:	4313      	orrs	r3, r2
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f023 0307 	bic.w	r3, r3, #7
 8007d9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	617b      	str	r3, [r7, #20]

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d113      	bne.n	8007dda <HAL_DMA_Init+0x11a>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	617b      	str	r3, [r7, #20]
    
    if(DMA_CheckFifoParam(hdma) != HAL_OK)
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fa9f 	bl	8008300 <DMA_CheckFifoParam>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d008      	beq.n	8007dda <HAL_DMA_Init+0x11a>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2240      	movs	r2, #64	; 0x40
 8007dcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_ERROR; 
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e016      	b.n	8007e08 <HAL_DMA_Init+0x148>
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa56 	bl	8008294 <DMA_CalcBaseAndBitshift>
 8007de8:	4603      	mov	r3, r0
 8007dea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df0:	223f      	movs	r2, #63	; 0x3f
 8007df2:	409a      	lsls	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	f010803f 	.word	0xf010803f

08007e14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d101      	bne.n	8007e3a <HAL_DMA_Start_IT+0x26>
 8007e36:	2302      	movs	r3, #2
 8007e38:	e048      	b.n	8007ecc <HAL_DMA_Start_IT+0xb8>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d137      	bne.n	8007ebe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2202      	movs	r2, #2
 8007e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	68b9      	ldr	r1, [r7, #8]
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 f9e8 	bl	8008238 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e6c:	223f      	movs	r2, #63	; 0x3f
 8007e6e:	409a      	lsls	r2, r3
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0216 	orr.w	r2, r2, #22
 8007e82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695a      	ldr	r2, [r3, #20]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e92:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d007      	beq.n	8007eac <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0208 	orr.w	r2, r2, #8
 8007eaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0201 	orr.w	r2, r2, #1
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	e005      	b.n	8007eca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d004      	beq.n	8007ef2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2280      	movs	r2, #128	; 0x80
 8007eec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e00c      	b.n	8007f0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2205      	movs	r2, #5
 8007ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0201 	bic.w	r2, r2, #1
 8007f08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007f24:	4b93      	ldr	r3, [pc, #588]	; (8008174 <HAL_DMA_IRQHandler+0x25c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a93      	ldr	r2, [pc, #588]	; (8008178 <HAL_DMA_IRQHandler+0x260>)
 8007f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f2e:	0a9b      	lsrs	r3, r3, #10
 8007f30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f42:	2208      	movs	r2, #8
 8007f44:	409a      	lsls	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4013      	ands	r3, r2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d01a      	beq.n	8007f84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0304 	and.w	r3, r3, #4
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d013      	beq.n	8007f84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 0204 	bic.w	r2, r2, #4
 8007f6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f70:	2208      	movs	r2, #8
 8007f72:	409a      	lsls	r2, r3
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f7c:	f043 0201 	orr.w	r2, r3, #1
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f88:	4a7c      	ldr	r2, [pc, #496]	; (800817c <HAL_DMA_IRQHandler+0x264>)
 8007f8a:	409a      	lsls	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4013      	ands	r3, r2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d012      	beq.n	8007fba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00b      	beq.n	8007fba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa6:	4a75      	ldr	r2, [pc, #468]	; (800817c <HAL_DMA_IRQHandler+0x264>)
 8007fa8:	409a      	lsls	r2, r3
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb2:	f043 0202 	orr.w	r2, r3, #2
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fbe:	4a70      	ldr	r2, [pc, #448]	; (8008180 <HAL_DMA_IRQHandler+0x268>)
 8007fc0:	409a      	lsls	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d012      	beq.n	8007ff0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00b      	beq.n	8007ff0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fdc:	4a68      	ldr	r2, [pc, #416]	; (8008180 <HAL_DMA_IRQHandler+0x268>)
 8007fde:	409a      	lsls	r2, r3
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe8:	f043 0204 	orr.w	r2, r3, #4
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff4:	2210      	movs	r2, #16
 8007ff6:	409a      	lsls	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d043      	beq.n	8008088 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0308 	and.w	r3, r3, #8
 800800a:	2b00      	cmp	r3, #0
 800800c:	d03c      	beq.n	8008088 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008012:	2210      	movs	r2, #16
 8008014:	409a      	lsls	r2, r3
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d018      	beq.n	800805a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d108      	bne.n	8008048 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d024      	beq.n	8008088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
 8008046:	e01f      	b.n	8008088 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01b      	beq.n	8008088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	4798      	blx	r3
 8008058:	e016      	b.n	8008088 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008064:	2b00      	cmp	r3, #0
 8008066:	d107      	bne.n	8008078 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0208 	bic.w	r2, r2, #8
 8008076:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807c:	2b00      	cmp	r3, #0
 800807e:	d003      	beq.n	8008088 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808c:	2220      	movs	r2, #32
 800808e:	409a      	lsls	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4013      	ands	r3, r2
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 8094 	beq.w	80081c2 <HAL_DMA_IRQHandler+0x2aa>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0310 	and.w	r3, r3, #16
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 808c 	beq.w	80081c2 <HAL_DMA_IRQHandler+0x2aa>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ae:	2220      	movs	r2, #32
 80080b0:	409a      	lsls	r2, r3
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b05      	cmp	r3, #5
 80080c0:	d137      	bne.n	8008132 <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f022 0216 	bic.w	r2, r2, #22
 80080d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	695a      	ldr	r2, [r3, #20]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d103      	bne.n	80080f2 <HAL_DMA_IRQHandler+0x1da>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d007      	beq.n	8008102 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f022 0208 	bic.w	r2, r2, #8
 8008100:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008106:	223f      	movs	r2, #63	; 0x3f
 8008108:	409a      	lsls	r2, r3
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 8083 	beq.w	800822e <HAL_DMA_IRQHandler+0x316>
        {
          hdma->XferAbortCallback(hdma);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	4798      	blx	r3
        }
        return;
 8008130:	e07d      	b.n	800822e <HAL_DMA_IRQHandler+0x316>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d021      	beq.n	8008184 <HAL_DMA_IRQHandler+0x26c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d108      	bne.n	8008160 <HAL_DMA_IRQHandler+0x248>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008152:	2b00      	cmp	r3, #0
 8008154:	d035      	beq.n	80081c2 <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
 800815e:	e030      	b.n	80081c2 <HAL_DMA_IRQHandler+0x2aa>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008164:	2b00      	cmp	r3, #0
 8008166:	d02c      	beq.n	80081c2 <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	4798      	blx	r3
 8008170:	e027      	b.n	80081c2 <HAL_DMA_IRQHandler+0x2aa>
 8008172:	bf00      	nop
 8008174:	200007cc 	.word	0x200007cc
 8008178:	1b4e81b5 	.word	0x1b4e81b5
 800817c:	00800001 	.word	0x00800001
 8008180:	00800004 	.word	0x00800004
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10f      	bne.n	80081b2 <HAL_DMA_IRQHandler+0x29a>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0210 	bic.w	r2, r2, #16
 80081a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <HAL_DMA_IRQHandler+0x2aa>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d032      	beq.n	8008230 <HAL_DMA_IRQHandler+0x318>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d022      	beq.n	800821c <HAL_DMA_IRQHandler+0x304>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2205      	movs	r2, #5
 80081da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 0201 	bic.w	r2, r2, #1
 80081ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	3301      	adds	r3, #1
 80081f2:	60bb      	str	r3, [r7, #8]
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d307      	bcc.n	800820a <HAL_DMA_IRQHandler+0x2f2>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1f2      	bne.n	80081ee <HAL_DMA_IRQHandler+0x2d6>
 8008208:	e000      	b.n	800820c <HAL_DMA_IRQHandler+0x2f4>
          break;
 800820a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008220:	2b00      	cmp	r3, #0
 8008222:	d005      	beq.n	8008230 <HAL_DMA_IRQHandler+0x318>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	4798      	blx	r3
 800822c:	e000      	b.n	8008230 <HAL_DMA_IRQHandler+0x318>
        return;
 800822e:	bf00      	nop
    }
  }
}
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop

08008238 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008254:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	2b40      	cmp	r3, #64	; 0x40
 8008264:	d108      	bne.n	8008278 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008276:	e007      	b.n	8008288 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	60da      	str	r2, [r3, #12]
}
 8008288:	bf00      	nop
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	3b10      	subs	r3, #16
 80082a4:	4a14      	ldr	r2, [pc, #80]	; (80082f8 <DMA_CalcBaseAndBitshift+0x64>)
 80082a6:	fba2 2303 	umull	r2, r3, r2, r3
 80082aa:	091b      	lsrs	r3, r3, #4
 80082ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80082ae:	4a13      	ldr	r2, [pc, #76]	; (80082fc <DMA_CalcBaseAndBitshift+0x68>)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4413      	add	r3, r2
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d909      	bls.n	80082d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80082ca:	f023 0303 	bic.w	r3, r3, #3
 80082ce:	1d1a      	adds	r2, r3, #4
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	659a      	str	r2, [r3, #88]	; 0x58
 80082d4:	e007      	b.n	80082e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80082de:	f023 0303 	bic.w	r3, r3, #3
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	aaaaaaab 	.word	0xaaaaaaab
 80082fc:	0800cb18 	.word	0x0800cb18

08008300 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008310:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d128      	bne.n	800836c <DMA_CheckFifoParam+0x6c>
  {
    switch (tmp)
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	2b03      	cmp	r3, #3
 800831e:	d862      	bhi.n	80083e6 <DMA_CheckFifoParam+0xe6>
 8008320:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <DMA_CheckFifoParam+0x28>)
 8008322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008326:	bf00      	nop
 8008328:	08008339 	.word	0x08008339
 800832c:	0800834b 	.word	0x0800834b
 8008330:	0800835b 	.word	0x0800835b
 8008334:	080083e7 	.word	0x080083e7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        if((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d052      	beq.n	80083ea <DMA_CheckFifoParam+0xea>
        {
          status = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008348:	e04f      	b.n	80083ea <DMA_CheckFifoParam+0xea>
      case DMA_FIFO_THRESHOLD_HALFFULL:
        if(hdma->Init.MemBurst == DMA_MBURST_INC16)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008352:	d14c      	bne.n	80083ee <DMA_CheckFifoParam+0xee>
        {
          status = HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008358:	e049      	b.n	80083ee <DMA_CheckFifoParam+0xee>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        if((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d045      	beq.n	80083f2 <DMA_CheckFifoParam+0xf2>
        {
          status = HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800836a:	e042      	b.n	80083f2 <DMA_CheckFifoParam+0xf2>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008374:	d125      	bne.n	80083c2 <DMA_CheckFifoParam+0xc2>
  {
    switch (tmp)
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b03      	cmp	r3, #3
 800837a:	d83c      	bhi.n	80083f6 <DMA_CheckFifoParam+0xf6>
 800837c:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <DMA_CheckFifoParam+0x84>)
 800837e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008382:	bf00      	nop
 8008384:	08008395 	.word	0x08008395
 8008388:	0800839b 	.word	0x0800839b
 800838c:	080083ad 	.word	0x080083ad
 8008390:	080083b3 	.word	0x080083b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        status = HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	73fb      	strb	r3, [r7, #15]
        break;
 8008398:	e034      	b.n	8008404 <DMA_CheckFifoParam+0x104>
      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d029      	beq.n	80083fa <DMA_CheckFifoParam+0xfa>
        {
          status = HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083aa:	e026      	b.n	80083fa <DMA_CheckFifoParam+0xfa>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	73fb      	strb	r3, [r7, #15]
        break;
 80083b0:	e028      	b.n	8008404 <DMA_CheckFifoParam+0x104>
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083ba:	d120      	bne.n	80083fe <DMA_CheckFifoParam+0xfe>
        {
          status = HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	73fb      	strb	r3, [r7, #15]
        }
        break;   
 80083c0:	e01d      	b.n	80083fe <DMA_CheckFifoParam+0xfe>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d902      	bls.n	80083ce <DMA_CheckFifoParam+0xce>
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d003      	beq.n	80083d4 <DMA_CheckFifoParam+0xd4>
        {
          status = HAL_ERROR;
        }
		break;
      default:
        break;
 80083cc:	e01a      	b.n	8008404 <DMA_CheckFifoParam+0x104>
        status = HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	73fb      	strb	r3, [r7, #15]
        break;
 80083d2:	e017      	b.n	8008404 <DMA_CheckFifoParam+0x104>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d010      	beq.n	8008402 <DMA_CheckFifoParam+0x102>
          status = HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	73fb      	strb	r3, [r7, #15]
		break;
 80083e4:	e00d      	b.n	8008402 <DMA_CheckFifoParam+0x102>
        break;
 80083e6:	bf00      	nop
 80083e8:	e00c      	b.n	8008404 <DMA_CheckFifoParam+0x104>
        break;
 80083ea:	bf00      	nop
 80083ec:	e00a      	b.n	8008404 <DMA_CheckFifoParam+0x104>
        break;
 80083ee:	bf00      	nop
 80083f0:	e008      	b.n	8008404 <DMA_CheckFifoParam+0x104>
        break;
 80083f2:	bf00      	nop
 80083f4:	e006      	b.n	8008404 <DMA_CheckFifoParam+0x104>
        break;
 80083f6:	bf00      	nop
 80083f8:	e004      	b.n	8008404 <DMA_CheckFifoParam+0x104>
        break;
 80083fa:	bf00      	nop
 80083fc:	e002      	b.n	8008404 <DMA_CheckFifoParam+0x104>
        break;   
 80083fe:	bf00      	nop
 8008400:	e000      	b.n	8008404 <DMA_CheckFifoParam+0x104>
		break;
 8008402:	bf00      	nop
    }
  } 
  
  return status; 
 8008404:	7bfb      	ldrb	r3, [r7, #15]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop

08008414 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008414:	b480      	push	{r7}
 8008416:	b089      	sub	sp, #36	; 0x24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800841e:	2300      	movs	r3, #0
 8008420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008422:	2300      	movs	r3, #0
 8008424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008426:	2300      	movs	r3, #0
 8008428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800842a:	2300      	movs	r3, #0
 800842c:	61fb      	str	r3, [r7, #28]
 800842e:	e159      	b.n	80086e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8008430:	2201      	movs	r2, #1
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	fa02 f303 	lsl.w	r3, r2, r3
 8008438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	4013      	ands	r3, r2
 8008442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	429a      	cmp	r2, r3
 800844a:	f040 8148 	bne.w	80086de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	2b02      	cmp	r3, #2
 8008454:	d003      	beq.n	800845e <HAL_GPIO_Init+0x4a>
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	2b12      	cmp	r3, #18
 800845c:	d123      	bne.n	80084a6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	08da      	lsrs	r2, r3, #3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	3208      	adds	r2, #8
 8008466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800846a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	f003 0307 	and.w	r3, r3, #7
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	220f      	movs	r2, #15
 8008476:	fa02 f303 	lsl.w	r3, r2, r3
 800847a:	43db      	mvns	r3, r3
 800847c:	69ba      	ldr	r2, [r7, #24]
 800847e:	4013      	ands	r3, r2
 8008480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	691a      	ldr	r2, [r3, #16]
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	f003 0307 	and.w	r3, r3, #7
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	fa02 f303 	lsl.w	r3, r2, r3
 8008492:	69ba      	ldr	r2, [r7, #24]
 8008494:	4313      	orrs	r3, r2
 8008496:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	08da      	lsrs	r2, r3, #3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3208      	adds	r2, #8
 80084a0:	69b9      	ldr	r1, [r7, #24]
 80084a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	005b      	lsls	r3, r3, #1
 80084b0:	2203      	movs	r2, #3
 80084b2:	fa02 f303 	lsl.w	r3, r2, r3
 80084b6:	43db      	mvns	r3, r3
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	4013      	ands	r3, r2
 80084bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f003 0203 	and.w	r2, r3, #3
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	fa02 f303 	lsl.w	r3, r2, r3
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d00b      	beq.n	80084fa <HAL_GPIO_Init+0xe6>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d007      	beq.n	80084fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084ee:	2b11      	cmp	r3, #17
 80084f0:	d003      	beq.n	80084fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	2b12      	cmp	r3, #18
 80084f8:	d130      	bne.n	800855c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	2203      	movs	r2, #3
 8008506:	fa02 f303 	lsl.w	r3, r2, r3
 800850a:	43db      	mvns	r3, r3
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	4013      	ands	r3, r2
 8008510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68da      	ldr	r2, [r3, #12]
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	fa02 f303 	lsl.w	r3, r2, r3
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	4313      	orrs	r3, r2
 8008522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008530:	2201      	movs	r2, #1
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	fa02 f303 	lsl.w	r3, r2, r3
 8008538:	43db      	mvns	r3, r3
 800853a:	69ba      	ldr	r2, [r7, #24]
 800853c:	4013      	ands	r3, r2
 800853e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	091b      	lsrs	r3, r3, #4
 8008546:	f003 0201 	and.w	r2, r3, #1
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	fa02 f303 	lsl.w	r3, r2, r3
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	4313      	orrs	r3, r2
 8008554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	005b      	lsls	r3, r3, #1
 8008566:	2203      	movs	r2, #3
 8008568:	fa02 f303 	lsl.w	r3, r2, r3
 800856c:	43db      	mvns	r3, r3
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	4013      	ands	r3, r2
 8008572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	005b      	lsls	r3, r3, #1
 800857c:	fa02 f303 	lsl.w	r3, r2, r3
 8008580:	69ba      	ldr	r2, [r7, #24]
 8008582:	4313      	orrs	r3, r2
 8008584:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 80a2 	beq.w	80086de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800859a:	2300      	movs	r3, #0
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	4b56      	ldr	r3, [pc, #344]	; (80086f8 <HAL_GPIO_Init+0x2e4>)
 80085a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a2:	4a55      	ldr	r2, [pc, #340]	; (80086f8 <HAL_GPIO_Init+0x2e4>)
 80085a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085a8:	6453      	str	r3, [r2, #68]	; 0x44
 80085aa:	4b53      	ldr	r3, [pc, #332]	; (80086f8 <HAL_GPIO_Init+0x2e4>)
 80085ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085b2:	60fb      	str	r3, [r7, #12]
 80085b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80085b6:	4a51      	ldr	r2, [pc, #324]	; (80086fc <HAL_GPIO_Init+0x2e8>)
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	089b      	lsrs	r3, r3, #2
 80085bc:	3302      	adds	r3, #2
 80085be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	f003 0303 	and.w	r3, r3, #3
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	220f      	movs	r2, #15
 80085ce:	fa02 f303 	lsl.w	r3, r2, r3
 80085d2:	43db      	mvns	r3, r3
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	4013      	ands	r3, r2
 80085d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a48      	ldr	r2, [pc, #288]	; (8008700 <HAL_GPIO_Init+0x2ec>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d019      	beq.n	8008616 <HAL_GPIO_Init+0x202>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a47      	ldr	r2, [pc, #284]	; (8008704 <HAL_GPIO_Init+0x2f0>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d013      	beq.n	8008612 <HAL_GPIO_Init+0x1fe>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a46      	ldr	r2, [pc, #280]	; (8008708 <HAL_GPIO_Init+0x2f4>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d00d      	beq.n	800860e <HAL_GPIO_Init+0x1fa>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a45      	ldr	r2, [pc, #276]	; (800870c <HAL_GPIO_Init+0x2f8>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d007      	beq.n	800860a <HAL_GPIO_Init+0x1f6>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a44      	ldr	r2, [pc, #272]	; (8008710 <HAL_GPIO_Init+0x2fc>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d101      	bne.n	8008606 <HAL_GPIO_Init+0x1f2>
 8008602:	2304      	movs	r3, #4
 8008604:	e008      	b.n	8008618 <HAL_GPIO_Init+0x204>
 8008606:	2307      	movs	r3, #7
 8008608:	e006      	b.n	8008618 <HAL_GPIO_Init+0x204>
 800860a:	2303      	movs	r3, #3
 800860c:	e004      	b.n	8008618 <HAL_GPIO_Init+0x204>
 800860e:	2302      	movs	r3, #2
 8008610:	e002      	b.n	8008618 <HAL_GPIO_Init+0x204>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <HAL_GPIO_Init+0x204>
 8008616:	2300      	movs	r3, #0
 8008618:	69fa      	ldr	r2, [r7, #28]
 800861a:	f002 0203 	and.w	r2, r2, #3
 800861e:	0092      	lsls	r2, r2, #2
 8008620:	4093      	lsls	r3, r2
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	4313      	orrs	r3, r2
 8008626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008628:	4934      	ldr	r1, [pc, #208]	; (80086fc <HAL_GPIO_Init+0x2e8>)
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	089b      	lsrs	r3, r3, #2
 800862e:	3302      	adds	r3, #2
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008636:	4b37      	ldr	r3, [pc, #220]	; (8008714 <HAL_GPIO_Init+0x300>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	43db      	mvns	r3, r3
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	4013      	ands	r3, r2
 8008644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d003      	beq.n	800865a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	4313      	orrs	r3, r2
 8008658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800865a:	4a2e      	ldr	r2, [pc, #184]	; (8008714 <HAL_GPIO_Init+0x300>)
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008660:	4b2c      	ldr	r3, [pc, #176]	; (8008714 <HAL_GPIO_Init+0x300>)
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	43db      	mvns	r3, r3
 800866a:	69ba      	ldr	r2, [r7, #24]
 800866c:	4013      	ands	r3, r2
 800866e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800867c:	69ba      	ldr	r2, [r7, #24]
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	4313      	orrs	r3, r2
 8008682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008684:	4a23      	ldr	r2, [pc, #140]	; (8008714 <HAL_GPIO_Init+0x300>)
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800868a:	4b22      	ldr	r3, [pc, #136]	; (8008714 <HAL_GPIO_Init+0x300>)
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	43db      	mvns	r3, r3
 8008694:	69ba      	ldr	r2, [r7, #24]
 8008696:	4013      	ands	r3, r2
 8008698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80086ae:	4a19      	ldr	r2, [pc, #100]	; (8008714 <HAL_GPIO_Init+0x300>)
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80086b4:	4b17      	ldr	r3, [pc, #92]	; (8008714 <HAL_GPIO_Init+0x300>)
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	43db      	mvns	r3, r3
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	4013      	ands	r3, r2
 80086c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d003      	beq.n	80086d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80086d8:	4a0e      	ldr	r2, [pc, #56]	; (8008714 <HAL_GPIO_Init+0x300>)
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	3301      	adds	r3, #1
 80086e2:	61fb      	str	r3, [r7, #28]
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	2b0f      	cmp	r3, #15
 80086e8:	f67f aea2 	bls.w	8008430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80086ec:	bf00      	nop
 80086ee:	3724      	adds	r7, #36	; 0x24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	40023800 	.word	0x40023800
 80086fc:	40013800 	.word	0x40013800
 8008700:	40020000 	.word	0x40020000
 8008704:	40020400 	.word	0x40020400
 8008708:	40020800 	.word	0x40020800
 800870c:	40020c00 	.word	0x40020c00
 8008710:	40021000 	.word	0x40021000
 8008714:	40013c00 	.word	0x40013c00

08008718 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	691a      	ldr	r2, [r3, #16]
 8008728:	887b      	ldrh	r3, [r7, #2]
 800872a:	4013      	ands	r3, r2
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008730:	2301      	movs	r3, #1
 8008732:	73fb      	strb	r3, [r7, #15]
 8008734:	e001      	b.n	800873a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008736:	2300      	movs	r3, #0
 8008738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800873a:	7bfb      	ldrb	r3, [r7, #15]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3714      	adds	r7, #20
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	807b      	strh	r3, [r7, #2]
 8008754:	4613      	mov	r3, r2
 8008756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008758:	787b      	ldrb	r3, [r7, #1]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800875e:	887a      	ldrh	r2, [r7, #2]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008764:	e003      	b.n	800876e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008766:	887b      	ldrh	r3, [r7, #2]
 8008768:	041a      	lsls	r2, r3, #16
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	619a      	str	r2, [r3, #24]
}
 800876e:	bf00      	nop
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
	...

0800877c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008786:	4b08      	ldr	r3, [pc, #32]	; (80087a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008788:	695a      	ldr	r2, [r3, #20]
 800878a:	88fb      	ldrh	r3, [r7, #6]
 800878c:	4013      	ands	r3, r2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d006      	beq.n	80087a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008792:	4a05      	ldr	r2, [pc, #20]	; (80087a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008794:	88fb      	ldrh	r3, [r7, #6]
 8008796:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008798:	88fb      	ldrh	r3, [r7, #6]
 800879a:	4618      	mov	r0, r3
 800879c:	f7f9 f836 	bl	800180c <HAL_GPIO_EXTI_Callback>
  }
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	40013c00 	.word	0x40013c00

080087ac <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80087b8:	2300      	movs	r3, #0
 80087ba:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e0c8      	b.n	8008958 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d106      	bne.n	80087e0 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f8c6 	bl	800896c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2224      	movs	r2, #36	; 0x24
 80087e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0201 	bic.w	r2, r2, #1
 80087f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80087f8:	f001 faa6 	bl	8009d48 <HAL_RCC_GetPCLK1Freq>
 80087fc:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	4a57      	ldr	r2, [pc, #348]	; (8008960 <HAL_I2C_Init+0x1b4>)
 8008802:	fba2 2303 	umull	r2, r3, r2, r3
 8008806:	0c9b      	lsrs	r3, r3, #18
 8008808:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	4a53      	ldr	r2, [pc, #332]	; (8008964 <HAL_I2C_Init+0x1b8>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d802      	bhi.n	8008822 <HAL_I2C_Init+0x76>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	3301      	adds	r3, #1
 8008820:	e009      	b.n	8008836 <HAL_I2C_Init+0x8a>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008828:	fb02 f303 	mul.w	r3, r2, r3
 800882c:	4a4e      	ldr	r2, [pc, #312]	; (8008968 <HAL_I2C_Init+0x1bc>)
 800882e:	fba2 2303 	umull	r2, r3, r2, r3
 8008832:	099b      	lsrs	r3, r3, #6
 8008834:	3301      	adds	r3, #1
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	6812      	ldr	r2, [r2, #0]
 800883a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	4a48      	ldr	r2, [pc, #288]	; (8008964 <HAL_I2C_Init+0x1b8>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d812      	bhi.n	800886c <HAL_I2C_Init+0xc0>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	005b      	lsls	r3, r3, #1
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008856:	2b03      	cmp	r3, #3
 8008858:	d906      	bls.n	8008868 <HAL_I2C_Init+0xbc>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	005b      	lsls	r3, r3, #1
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	fbb2 f3f3 	udiv	r3, r2, r3
 8008866:	e045      	b.n	80088f4 <HAL_I2C_Init+0x148>
 8008868:	2304      	movs	r3, #4
 800886a:	e043      	b.n	80088f4 <HAL_I2C_Init+0x148>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10f      	bne.n	8008894 <HAL_I2C_Init+0xe8>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	4613      	mov	r3, r2
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	4413      	add	r3, r2
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	fbb2 f3f3 	udiv	r3, r2, r3
 8008884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008888:	2b00      	cmp	r3, #0
 800888a:	bf0c      	ite	eq
 800888c:	2301      	moveq	r3, #1
 800888e:	2300      	movne	r3, #0
 8008890:	b2db      	uxtb	r3, r3
 8008892:	e010      	b.n	80088b6 <HAL_I2C_Init+0x10a>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	4613      	mov	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	009a      	lsls	r2, r3, #2
 80088a0:	4413      	add	r3, r2
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	bf0c      	ite	eq
 80088b0:	2301      	moveq	r3, #1
 80088b2:	2300      	movne	r3, #0
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <HAL_I2C_Init+0x112>
 80088ba:	2301      	movs	r3, #1
 80088bc:	e01a      	b.n	80088f4 <HAL_I2C_Init+0x148>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10a      	bne.n	80088dc <HAL_I2C_Init+0x130>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	685a      	ldr	r2, [r3, #4]
 80088ca:	4613      	mov	r3, r2
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	4413      	add	r3, r2
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088da:	e00b      	b.n	80088f4 <HAL_I2C_Init+0x148>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685a      	ldr	r2, [r3, #4]
 80088e0:	4613      	mov	r3, r2
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	4413      	add	r3, r2
 80088e6:	009a      	lsls	r2, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	6812      	ldr	r2, [r2, #0]
 80088f8:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	69d9      	ldr	r1, [r3, #28]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a1a      	ldr	r2, [r3, #32]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	430a      	orrs	r2, r1
 8008908:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6919      	ldr	r1, [r3, #16]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68da      	ldr	r2, [r3, #12]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	430a      	orrs	r2, r1
 8008918:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6959      	ldr	r1, [r3, #20]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f042 0201 	orr.w	r2, r2, #1
 8008938:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2220      	movs	r2, #32
 8008944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	431bde83 	.word	0x431bde83
 8008964:	000186a0 	.word	0x000186a0
 8008968:	10624dd3 	.word	0x10624dd3

0800896c <HAL_I2C_MspInit>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b088      	sub	sp, #32
 8008984:	af02      	add	r7, sp, #8
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	607a      	str	r2, [r7, #4]
 800898a:	461a      	mov	r2, r3
 800898c:	460b      	mov	r3, r1
 800898e:	817b      	strh	r3, [r7, #10]
 8008990:	4613      	mov	r3, r2
 8008992:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8008994:	2300      	movs	r3, #0
 8008996:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008998:	f7ff f856 	bl	8007a48 <HAL_GetTick>
 800899c:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b20      	cmp	r3, #32
 80089a8:	f040 80ed 	bne.w	8008b86 <HAL_I2C_Master_Transmit+0x206>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	2319      	movs	r3, #25
 80089b2:	2201      	movs	r2, #1
 80089b4:	4976      	ldr	r1, [pc, #472]	; (8008b90 <HAL_I2C_Master_Transmit+0x210>)
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 fc6a 	bl	8009290 <I2C_WaitOnFlagUntilTimeout>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80089c2:	2302      	movs	r3, #2
 80089c4:	e0e0      	b.n	8008b88 <HAL_I2C_Master_Transmit+0x208>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d101      	bne.n	80089d4 <HAL_I2C_Master_Transmit+0x54>
 80089d0:	2302      	movs	r3, #2
 80089d2:	e0d9      	b.n	8008b88 <HAL_I2C_Master_Transmit+0x208>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d007      	beq.n	80089fa <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f042 0201 	orr.w	r2, r2, #1
 80089f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a08:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2221      	movs	r2, #33	; 0x21
 8008a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2210      	movs	r2, #16
 8008a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	893a      	ldrh	r2, [r7, #8]
 8008a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	4a59      	ldr	r2, [pc, #356]	; (8008b94 <HAL_I2C_Master_Transmit+0x214>)
 8008a30:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008a3c:	8979      	ldrh	r1, [r7, #10]
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	6a3a      	ldr	r2, [r7, #32]
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f000 fada 	bl	8008ffc <I2C_MasterRequestWrite>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00f      	beq.n	8008a6e <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	2b04      	cmp	r3, #4
 8008a54:	d105      	bne.n	8008a62 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e092      	b.n	8008b88 <HAL_I2C_Master_Transmit+0x208>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e08c      	b.n	8008b88 <HAL_I2C_Master_Transmit+0x208>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a6e:	2300      	movs	r3, #0
 8008a70:	613b      	str	r3, [r7, #16]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	695b      	ldr	r3, [r3, #20]
 8008a78:	613b      	str	r3, [r7, #16]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	613b      	str	r3, [r7, #16]
 8008a82:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8008a84:	e065      	b.n	8008b52 <HAL_I2C_Master_Transmit+0x1d2>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	6a39      	ldr	r1, [r7, #32]
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 fcbf 	bl	800940e <I2C_WaitOnTXEFlagUntilTimeout>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00f      	beq.n	8008ab6 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	d109      	bne.n	8008ab2 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008aac:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e06a      	b.n	8008b88 <HAL_I2C_Master_Transmit+0x208>
        }
        else
        {
          return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e068      	b.n	8008b88 <HAL_I2C_Master_Transmit+0x208>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	1c59      	adds	r1, r3, #1
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	6251      	str	r1, [r2, #36]	; 0x24
 8008ac0:	781a      	ldrb	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ada:	3b01      	subs	r3, #1
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d118      	bne.n	8008b22 <HAL_I2C_Master_Transmit+0x1a2>
 8008af0:	893b      	ldrh	r3, [r7, #8]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d015      	beq.n	8008b22 <HAL_I2C_Master_Transmit+0x1a2>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afa:	1c59      	adds	r1, r3, #1
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	6251      	str	r1, [r2, #36]	; 0x24
 8008b00:	781a      	ldrb	r2, [r3, #0]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	6a39      	ldr	r1, [r7, #32]
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 fcae 	bl	8009488 <I2C_WaitOnBTFFlagUntilTimeout>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00f      	beq.n	8008b52 <HAL_I2C_Master_Transmit+0x1d2>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	d109      	bne.n	8008b4e <HAL_I2C_Master_Transmit+0x1ce>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b48:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e01c      	b.n	8008b88 <HAL_I2C_Master_Transmit+0x208>
        }
        else
        {
          return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e01a      	b.n	8008b88 <HAL_I2C_Master_Transmit+0x208>
    while(hi2c->XferSize > 0U)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d195      	bne.n	8008a86 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2220      	movs	r2, #32
 8008b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	e000      	b.n	8008b88 <HAL_I2C_Master_Transmit+0x208>
  }
  else
  {
    return HAL_BUSY;
 8008b86:	2302      	movs	r3, #2
  }
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	00100002 	.word	0x00100002
 8008b94:	ffff0000 	.word	0xffff0000

08008b98 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08c      	sub	sp, #48	; 0x30
 8008b9c:	af02      	add	r7, sp, #8
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	817b      	strh	r3, [r7, #10]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bb0:	f7fe ff4a 	bl	8007a48 <HAL_GetTick>
 8008bb4:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b20      	cmp	r3, #32
 8008bc0:	f040 8215 	bne.w	8008fee <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	2319      	movs	r3, #25
 8008bca:	2201      	movs	r2, #1
 8008bcc:	4985      	ldr	r1, [pc, #532]	; (8008de4 <HAL_I2C_Master_Receive+0x24c>)
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 fb5e 	bl	8009290 <I2C_WaitOnFlagUntilTimeout>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8008bda:	2302      	movs	r3, #2
 8008bdc:	e208      	b.n	8008ff0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d101      	bne.n	8008bec <HAL_I2C_Master_Receive+0x54>
 8008be8:	2302      	movs	r3, #2
 8008bea:	e201      	b.n	8008ff0 <HAL_I2C_Master_Receive+0x458>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d007      	beq.n	8008c12 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f042 0201 	orr.w	r2, r2, #1
 8008c10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2222      	movs	r2, #34	; 0x22
 8008c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2210      	movs	r2, #16
 8008c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	893a      	ldrh	r2, [r7, #8]
 8008c42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4a68      	ldr	r2, [pc, #416]	; (8008de8 <HAL_I2C_Master_Receive+0x250>)
 8008c48:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008c54:	8979      	ldrh	r1, [r7, #10]
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 fa50 	bl	8009100 <I2C_MasterRequestRead>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00f      	beq.n	8008c86 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6a:	2b04      	cmp	r3, #4
 8008c6c:	d105      	bne.n	8008c7a <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e1ba      	b.n	8008ff0 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e1b4      	b.n	8008ff0 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d113      	bne.n	8008cb6 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c8e:	2300      	movs	r3, #0
 8008c90:	623b      	str	r3, [r7, #32]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	623b      	str	r3, [r7, #32]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	623b      	str	r3, [r7, #32]
 8008ca2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	e188      	b.n	8008fc8 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d11b      	bne.n	8008cf6 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ccc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cce:	2300      	movs	r3, #0
 8008cd0:	61fb      	str	r3, [r7, #28]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	61fb      	str	r3, [r7, #28]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	61fb      	str	r3, [r7, #28]
 8008ce2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	e168      	b.n	8008fc8 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d11b      	bne.n	8008d36 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d1e:	2300      	movs	r3, #0
 8008d20:	61bb      	str	r3, [r7, #24]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	61bb      	str	r3, [r7, #24]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	61bb      	str	r3, [r7, #24]
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	e148      	b.n	8008fc8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d46:	2300      	movs	r3, #0
 8008d48:	617b      	str	r3, [r7, #20]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	617b      	str	r3, [r7, #20]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	617b      	str	r3, [r7, #20]
 8008d5a:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8008d5c:	e134      	b.n	8008fc8 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	f200 80eb 	bhi.w	8008f3e <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d127      	bne.n	8008dc0 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8008d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f000 fbc4 	bl	8009502 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d007      	beq.n	8008d90 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d84:	2b20      	cmp	r3, #32
 8008d86:	d101      	bne.n	8008d8c <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e131      	b.n	8008ff0 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e12f      	b.n	8008ff0 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6918      	ldr	r0, [r3, #16]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9a:	1c59      	adds	r1, r3, #1
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	6251      	str	r1, [r2, #36]	; 0x24
 8008da0:	b2c2      	uxtb	r2, r0
 8008da2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008da8:	3b01      	subs	r3, #1
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	3b01      	subs	r3, #1
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008dbe:	e103      	b.n	8008fc8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d14a      	bne.n	8008e5e <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	2200      	movs	r2, #0
 8008dd0:	4906      	ldr	r1, [pc, #24]	; (8008dec <HAL_I2C_Master_Receive+0x254>)
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 fa5c 	bl	8009290 <I2C_WaitOnFlagUntilTimeout>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d008      	beq.n	8008df0 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e106      	b.n	8008ff0 <HAL_I2C_Master_Receive+0x458>
 8008de2:	bf00      	nop
 8008de4:	00100002 	.word	0x00100002
 8008de8:	ffff0000 	.word	0xffff0000
 8008dec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6918      	ldr	r0, [r3, #16]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0a:	1c59      	adds	r1, r3, #1
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	6251      	str	r1, [r2, #36]	; 0x24
 8008e10:	b2c2      	uxtb	r2, r0
 8008e12:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	3b01      	subs	r3, #1
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6918      	ldr	r0, [r3, #16]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e38:	1c59      	adds	r1, r3, #1
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	6251      	str	r1, [r2, #36]	; 0x24
 8008e3e:	b2c2      	uxtb	r2, r0
 8008e40:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e46:	3b01      	subs	r3, #1
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	3b01      	subs	r3, #1
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e5c:	e0b4      	b.n	8008fc8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e64:	2200      	movs	r2, #0
 8008e66:	4964      	ldr	r1, [pc, #400]	; (8008ff8 <HAL_I2C_Master_Receive+0x460>)
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f000 fa11 	bl	8009290 <I2C_WaitOnFlagUntilTimeout>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d001      	beq.n	8008e78 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e0bb      	b.n	8008ff0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6918      	ldr	r0, [r3, #16]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e92:	1c59      	adds	r1, r3, #1
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	6251      	str	r1, [r2, #36]	; 0x24
 8008e98:	b2c2      	uxtb	r2, r0
 8008e9a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	494e      	ldr	r1, [pc, #312]	; (8008ff8 <HAL_I2C_Master_Receive+0x460>)
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 f9e5 	bl	8009290 <I2C_WaitOnFlagUntilTimeout>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d001      	beq.n	8008ed0 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e08f      	b.n	8008ff0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ede:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6918      	ldr	r0, [r3, #16]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eea:	1c59      	adds	r1, r3, #1
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	6251      	str	r1, [r2, #36]	; 0x24
 8008ef0:	b2c2      	uxtb	r2, r0
 8008ef2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	3b01      	subs	r3, #1
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6918      	ldr	r0, [r3, #16]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f18:	1c59      	adds	r1, r3, #1
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	6251      	str	r1, [r2, #36]	; 0x24
 8008f1e:	b2c2      	uxtb	r2, r0
 8008f20:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f26:	3b01      	subs	r3, #1
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	3b01      	subs	r3, #1
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f3c:	e044      	b.n	8008fc8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8008f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 fadd 	bl	8009502 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d007      	beq.n	8008f5e <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f52:	2b20      	cmp	r3, #32
 8008f54:	d101      	bne.n	8008f5a <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e04a      	b.n	8008ff0 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e048      	b.n	8008ff0 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6918      	ldr	r0, [r3, #16]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f68:	1c59      	adds	r1, r3, #1
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	6251      	str	r1, [r2, #36]	; 0x24
 8008f6e:	b2c2      	uxtb	r2, r0
 8008f70:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f76:	3b01      	subs	r3, #1
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	3b01      	subs	r3, #1
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	f003 0304 	and.w	r3, r3, #4
 8008f96:	2b04      	cmp	r3, #4
 8008f98:	d116      	bne.n	8008fc8 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6918      	ldr	r0, [r3, #16]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa4:	1c59      	adds	r1, r3, #1
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	6251      	str	r1, [r2, #36]	; 0x24
 8008faa:	b2c2      	uxtb	r2, r0
 8008fac:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f47f aec6 	bne.w	8008d5e <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2220      	movs	r2, #32
 8008fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	e000      	b.n	8008ff0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008fee:	2302      	movs	r3, #2
  }
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3728      	adds	r7, #40	; 0x28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	00010004 	.word	0x00010004

08008ffc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b088      	sub	sp, #32
 8009000:	af02      	add	r7, sp, #8
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	607a      	str	r2, [r7, #4]
 8009006:	603b      	str	r3, [r7, #0]
 8009008:	460b      	mov	r3, r1
 800900a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2b04      	cmp	r3, #4
 8009016:	d006      	beq.n	8009026 <I2C_MasterRequestWrite+0x2a>
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d003      	beq.n	8009026 <I2C_MasterRequestWrite+0x2a>
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009024:	d108      	bne.n	8009038 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	e00b      	b.n	8009050 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903c:	2b12      	cmp	r3, #18
 800903e:	d107      	bne.n	8009050 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800904e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f000 f917 	bl	8009290 <I2C_WaitOnFlagUntilTimeout>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e041      	b.n	80090f0 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009074:	d108      	bne.n	8009088 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009076:	897b      	ldrh	r3, [r7, #10]
 8009078:	b2db      	uxtb	r3, r3
 800907a:	461a      	mov	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009084:	611a      	str	r2, [r3, #16]
 8009086:	e021      	b.n	80090cc <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009088:	897b      	ldrh	r3, [r7, #10]
 800908a:	11db      	asrs	r3, r3, #7
 800908c:	b2db      	uxtb	r3, r3
 800908e:	f003 0306 	and.w	r3, r3, #6
 8009092:	b2db      	uxtb	r3, r3
 8009094:	f063 030f 	orn	r3, r3, #15
 8009098:	b2da      	uxtb	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	4914      	ldr	r1, [pc, #80]	; (80090f8 <I2C_MasterRequestWrite+0xfc>)
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f000 f943 	bl	8009332 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d007      	beq.n	80090c2 <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	2b04      	cmp	r3, #4
 80090b8:	d101      	bne.n	80090be <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e018      	b.n	80090f0 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 80090be:	2303      	movs	r3, #3
 80090c0:	e016      	b.n	80090f0 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80090c2:	897b      	ldrh	r3, [r7, #10]
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	490a      	ldr	r1, [pc, #40]	; (80090fc <I2C_MasterRequestWrite+0x100>)
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 f92d 	bl	8009332 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d007      	beq.n	80090ee <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e2:	2b04      	cmp	r3, #4
 80090e4:	d101      	bne.n	80090ea <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e002      	b.n	80090f0 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e000      	b.n	80090f0 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	00010008 	.word	0x00010008
 80090fc:	00010002 	.word	0x00010002

08009100 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b088      	sub	sp, #32
 8009104:	af02      	add	r7, sp, #8
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	607a      	str	r2, [r7, #4]
 800910a:	603b      	str	r3, [r7, #0]
 800910c:	460b      	mov	r3, r1
 800910e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009124:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b04      	cmp	r3, #4
 800912a:	d006      	beq.n	800913a <I2C_MasterRequestRead+0x3a>
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d003      	beq.n	800913a <I2C_MasterRequestRead+0x3a>
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009138:	d108      	bne.n	800914c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	e00b      	b.n	8009164 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009150:	2b11      	cmp	r3, #17
 8009152:	d107      	bne.n	8009164 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009162:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 f88d 	bl	8009290 <I2C_WaitOnFlagUntilTimeout>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d001      	beq.n	8009180 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e07f      	b.n	8009280 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009188:	d108      	bne.n	800919c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800918a:	897b      	ldrh	r3, [r7, #10]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	f043 0301 	orr.w	r3, r3, #1
 8009192:	b2da      	uxtb	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	611a      	str	r2, [r3, #16]
 800919a:	e05f      	b.n	800925c <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800919c:	897b      	ldrh	r3, [r7, #10]
 800919e:	11db      	asrs	r3, r3, #7
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	f003 0306 	and.w	r3, r3, #6
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	f063 030f 	orn	r3, r3, #15
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	4933      	ldr	r1, [pc, #204]	; (8009288 <I2C_MasterRequestRead+0x188>)
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f000 f8b9 	bl	8009332 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d007      	beq.n	80091d6 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ca:	2b04      	cmp	r3, #4
 80091cc:	d101      	bne.n	80091d2 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e056      	b.n	8009280 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80091d2:	2303      	movs	r3, #3
 80091d4:	e054      	b.n	8009280 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80091d6:	897b      	ldrh	r3, [r7, #10]
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	4929      	ldr	r1, [pc, #164]	; (800928c <I2C_MasterRequestRead+0x18c>)
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f000 f8a3 	bl	8009332 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d007      	beq.n	8009202 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f6:	2b04      	cmp	r3, #4
 80091f8:	d101      	bne.n	80091fe <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e040      	b.n	8009280 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	e03e      	b.n	8009280 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009202:	2300      	movs	r3, #0
 8009204:	613b      	str	r3, [r7, #16]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	613b      	str	r3, [r7, #16]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	613b      	str	r3, [r7, #16]
 8009216:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009226:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 f82b 	bl	8009290 <I2C_WaitOnFlagUntilTimeout>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e01d      	b.n	8009280 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009244:	897b      	ldrh	r3, [r7, #10]
 8009246:	11db      	asrs	r3, r3, #7
 8009248:	b2db      	uxtb	r3, r3
 800924a:	f003 0306 	and.w	r3, r3, #6
 800924e:	b2db      	uxtb	r3, r3
 8009250:	f063 030e 	orn	r3, r3, #14
 8009254:	b2da      	uxtb	r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	490a      	ldr	r1, [pc, #40]	; (800928c <I2C_MasterRequestRead+0x18c>)
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 f865 	bl	8009332 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d007      	beq.n	800927e <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009272:	2b04      	cmp	r3, #4
 8009274:	d101      	bne.n	800927a <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e002      	b.n	8009280 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	e000      	b.n	8009280 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3718      	adds	r7, #24
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	00010008 	.word	0x00010008
 800928c:	00010002 	.word	0x00010002

08009290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	603b      	str	r3, [r7, #0]
 800929c:	4613      	mov	r3, r2
 800929e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80092a0:	e01f      	b.n	80092e2 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a8:	d01b      	beq.n	80092e2 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d007      	beq.n	80092c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80092b0:	f7fe fbca 	bl	8007a48 <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d210      	bcs.n	80092e2 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2220      	movs	r2, #32
 80092ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e023      	b.n	800932a <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	0c1b      	lsrs	r3, r3, #16
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d10d      	bne.n	8009308 <I2C_WaitOnFlagUntilTimeout+0x78>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	43da      	mvns	r2, r3
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	4013      	ands	r3, r2
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	bf0c      	ite	eq
 80092fe:	2301      	moveq	r3, #1
 8009300:	2300      	movne	r3, #0
 8009302:	b2db      	uxtb	r3, r3
 8009304:	461a      	mov	r2, r3
 8009306:	e00c      	b.n	8009322 <I2C_WaitOnFlagUntilTimeout+0x92>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	43da      	mvns	r2, r3
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	4013      	ands	r3, r2
 8009314:	b29b      	uxth	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	bf0c      	ite	eq
 800931a:	2301      	moveq	r3, #1
 800931c:	2300      	movne	r3, #0
 800931e:	b2db      	uxtb	r3, r3
 8009320:	461a      	mov	r2, r3
 8009322:	79fb      	ldrb	r3, [r7, #7]
 8009324:	429a      	cmp	r2, r3
 8009326:	d0bc      	beq.n	80092a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	60b9      	str	r1, [r7, #8]
 800933c:	607a      	str	r2, [r7, #4]
 800933e:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009340:	e040      	b.n	80093c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800934c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009350:	d11c      	bne.n	800938c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009360:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800936a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2204      	movs	r2, #4
 8009370:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2220      	movs	r2, #32
 800937c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e03c      	b.n	8009406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009392:	d017      	beq.n	80093c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d007      	beq.n	80093aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 800939a:	f7fe fb55 	bl	8007a48 <HAL_GetTick>
 800939e:	4602      	mov	r2, r0
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d20c      	bcs.n	80093c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2220      	movs	r2, #32
 80093b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80093c0:	2303      	movs	r3, #3
 80093c2:	e020      	b.n	8009406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	0c1b      	lsrs	r3, r3, #16
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d10c      	bne.n	80093e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	43da      	mvns	r2, r3
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	4013      	ands	r3, r2
 80093da:	b29b      	uxth	r3, r3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	bf14      	ite	ne
 80093e0:	2301      	movne	r3, #1
 80093e2:	2300      	moveq	r3, #0
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	e00b      	b.n	8009400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	43da      	mvns	r2, r3
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	4013      	ands	r3, r2
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	bf14      	ite	ne
 80093fa:	2301      	movne	r3, #1
 80093fc:	2300      	moveq	r3, #0
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b00      	cmp	r3, #0
 8009402:	d19e      	bne.n	8009342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	60f8      	str	r0, [r7, #12]
 8009416:	60b9      	str	r1, [r7, #8]
 8009418:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800941a:	e029      	b.n	8009470 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f000 f8ba 	bl	8009596 <I2C_IsAcknowledgeFailed>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e029      	b.n	8009480 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009432:	d01d      	beq.n	8009470 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d007      	beq.n	800944a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800943a:	f7fe fb05 	bl	8007a48 <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	429a      	cmp	r2, r3
 8009448:	d212      	bcs.n	8009470 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944e:	f043 0220 	orr.w	r2, r3, #32
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2220      	movs	r2, #32
 8009460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e007      	b.n	8009480 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800947a:	2b80      	cmp	r3, #128	; 0x80
 800947c:	d1ce      	bne.n	800941c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009494:	e029      	b.n	80094ea <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f000 f87d 	bl	8009596 <I2C_IsAcknowledgeFailed>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e029      	b.n	80094fa <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ac:	d01d      	beq.n	80094ea <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d007      	beq.n	80094c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80094b4:	f7fe fac8 	bl	8007a48 <HAL_GetTick>
 80094b8:	4602      	mov	r2, r0
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d212      	bcs.n	80094ea <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c8:	f043 0220 	orr.w	r2, r3, #32
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2220      	movs	r2, #32
 80094da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e007      	b.n	80094fa <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	695b      	ldr	r3, [r3, #20]
 80094f0:	f003 0304 	and.w	r3, r3, #4
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	d1ce      	bne.n	8009496 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8009502:	b580      	push	{r7, lr}
 8009504:	b084      	sub	sp, #16
 8009506:	af00      	add	r7, sp, #0
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	60b9      	str	r1, [r7, #8]
 800950c:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800950e:	e036      	b.n	800957e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	f003 0310 	and.w	r3, r3, #16
 800951a:	2b10      	cmp	r3, #16
 800951c:	d114      	bne.n	8009548 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f06f 0210 	mvn.w	r2, #16
 8009526:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2220      	movs	r2, #32
 8009538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e022      	b.n	800958e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800954e:	f7fe fa7b 	bl	8007a48 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	429a      	cmp	r2, r3
 800955c:	d20f      	bcs.n	800957e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009562:	f043 0220 	orr.w	r2, r3, #32
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2220      	movs	r2, #32
 800956e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	e007      	b.n	800958e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009588:	2b40      	cmp	r3, #64	; 0x40
 800958a:	d1c1      	bne.n	8009510 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	695b      	ldr	r3, [r3, #20]
 80095a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095ac:	d114      	bne.n	80095d8 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80095b6:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2204      	movs	r2, #4
 80095bc:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2220      	movs	r2, #32
 80095c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e000      	b.n	80095da <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
	...

080095e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08e      	sub	sp, #56	; 0x38
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 uint32_t tickstart = 0U;  
 80095f0:	2300      	movs	r3, #0
 80095f2:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d050      	beq.n	80096a2 <HAL_RCC_OscConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009600:	4ba5      	ldr	r3, [pc, #660]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f003 030c 	and.w	r3, r3, #12
 8009608:	2b04      	cmp	r3, #4
 800960a:	d00c      	beq.n	8009626 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800960c:	4ba2      	ldr	r3, [pc, #648]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009614:	2b08      	cmp	r3, #8
 8009616:	d112      	bne.n	800963e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009618:	4b9f      	ldr	r3, [pc, #636]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009624:	d10b      	bne.n	800963e <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009626:	4b9c      	ldr	r3, [pc, #624]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800962e:	2b00      	cmp	r3, #0
 8009630:	d036      	beq.n	80096a0 <HAL_RCC_OscConfig+0xb8>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d132      	bne.n	80096a0 <HAL_RCC_OscConfig+0xb8>
      {
        return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e1e0      	b.n	8009a00 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	4b96      	ldr	r3, [pc, #600]	; (800989c <HAL_RCC_OscConfig+0x2b4>)
 8009644:	b2d2      	uxtb	r2, r2
 8009646:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d013      	beq.n	8009678 <HAL_RCC_OscConfig+0x90>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009650:	f7fe f9fa 	bl	8007a48 <HAL_GetTick>
 8009654:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009656:	e008      	b.n	800966a <HAL_RCC_OscConfig+0x82>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009658:	f7fe f9f6 	bl	8007a48 <HAL_GetTick>
 800965c:	4602      	mov	r2, r0
 800965e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	2b64      	cmp	r3, #100	; 0x64
 8009664:	d901      	bls.n	800966a <HAL_RCC_OscConfig+0x82>
          {
            return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e1ca      	b.n	8009a00 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800966a:	4b8b      	ldr	r3, [pc, #556]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d0f0      	beq.n	8009658 <HAL_RCC_OscConfig+0x70>
 8009676:	e014      	b.n	80096a2 <HAL_RCC_OscConfig+0xba>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009678:	f7fe f9e6 	bl	8007a48 <HAL_GetTick>
 800967c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800967e:	e008      	b.n	8009692 <HAL_RCC_OscConfig+0xaa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009680:	f7fe f9e2 	bl	8007a48 <HAL_GetTick>
 8009684:	4602      	mov	r2, r0
 8009686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	2b64      	cmp	r3, #100	; 0x64
 800968c:	d901      	bls.n	8009692 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_TIMEOUT;
 800968e:	2303      	movs	r3, #3
 8009690:	e1b6      	b.n	8009a00 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009692:	4b81      	ldr	r3, [pc, #516]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1f0      	bne.n	8009680 <HAL_RCC_OscConfig+0x98>
 800969e:	e000      	b.n	80096a2 <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 0302 	and.w	r3, r3, #2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d077      	beq.n	800979e <HAL_RCC_OscConfig+0x1b6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80096ae:	4b7a      	ldr	r3, [pc, #488]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f003 030c 	and.w	r3, r3, #12
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00b      	beq.n	80096d2 <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80096ba:	4b77      	ldr	r3, [pc, #476]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80096c2:	2b08      	cmp	r3, #8
 80096c4:	d126      	bne.n	8009714 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80096c6:	4b74      	ldr	r3, [pc, #464]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d120      	bne.n	8009714 <HAL_RCC_OscConfig+0x12c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80096d2:	4b71      	ldr	r3, [pc, #452]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f003 0302 	and.w	r3, r3, #2
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d005      	beq.n	80096ea <HAL_RCC_OscConfig+0x102>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d001      	beq.n	80096ea <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e18a      	b.n	8009a00 <HAL_RCC_OscConfig+0x418>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096ea:	4b6b      	ldr	r3, [pc, #428]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6919      	ldr	r1, [r3, #16]
 80096f6:	23f8      	movs	r3, #248	; 0xf8
 80096f8:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fc:	fa93 f3a3 	rbit	r3, r3
 8009700:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8009702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009704:	fab3 f383 	clz	r3, r3
 8009708:	fa01 f303 	lsl.w	r3, r1, r3
 800970c:	4962      	ldr	r1, [pc, #392]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 800970e:	4313      	orrs	r3, r2
 8009710:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009712:	e044      	b.n	800979e <HAL_RCC_OscConfig+0x1b6>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d02a      	beq.n	8009772 <HAL_RCC_OscConfig+0x18a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800971c:	4b60      	ldr	r3, [pc, #384]	; (80098a0 <HAL_RCC_OscConfig+0x2b8>)
 800971e:	2201      	movs	r2, #1
 8009720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009722:	f7fe f991 	bl	8007a48 <HAL_GetTick>
 8009726:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009728:	e008      	b.n	800973c <HAL_RCC_OscConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800972a:	f7fe f98d 	bl	8007a48 <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	2b02      	cmp	r3, #2
 8009736:	d901      	bls.n	800973c <HAL_RCC_OscConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	e161      	b.n	8009a00 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800973c:	4b56      	ldr	r3, [pc, #344]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 0302 	and.w	r3, r3, #2
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0f0      	beq.n	800972a <HAL_RCC_OscConfig+0x142>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009748:	4b53      	ldr	r3, [pc, #332]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6919      	ldr	r1, [r3, #16]
 8009754:	23f8      	movs	r3, #248	; 0xf8
 8009756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975a:	fa93 f3a3 	rbit	r3, r3
 800975e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009762:	fab3 f383 	clz	r3, r3
 8009766:	fa01 f303 	lsl.w	r3, r1, r3
 800976a:	494b      	ldr	r1, [pc, #300]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 800976c:	4313      	orrs	r3, r2
 800976e:	600b      	str	r3, [r1, #0]
 8009770:	e015      	b.n	800979e <HAL_RCC_OscConfig+0x1b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009772:	4b4b      	ldr	r3, [pc, #300]	; (80098a0 <HAL_RCC_OscConfig+0x2b8>)
 8009774:	2200      	movs	r2, #0
 8009776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009778:	f7fe f966 	bl	8007a48 <HAL_GetTick>
 800977c:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800977e:	e008      	b.n	8009792 <HAL_RCC_OscConfig+0x1aa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009780:	f7fe f962 	bl	8007a48 <HAL_GetTick>
 8009784:	4602      	mov	r2, r0
 8009786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	2b02      	cmp	r3, #2
 800978c:	d901      	bls.n	8009792 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e136      	b.n	8009a00 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009792:	4b41      	ldr	r3, [pc, #260]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 0302 	and.w	r3, r3, #2
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1f0      	bne.n	8009780 <HAL_RCC_OscConfig+0x198>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 0308 	and.w	r3, r3, #8
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d030      	beq.n	800980c <HAL_RCC_OscConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d016      	beq.n	80097e0 <HAL_RCC_OscConfig+0x1f8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097b2:	4b3c      	ldr	r3, [pc, #240]	; (80098a4 <HAL_RCC_OscConfig+0x2bc>)
 80097b4:	2201      	movs	r2, #1
 80097b6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097b8:	f7fe f946 	bl	8007a48 <HAL_GetTick>
 80097bc:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097be:	e008      	b.n	80097d2 <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097c0:	f7fe f942 	bl	8007a48 <HAL_GetTick>
 80097c4:	4602      	mov	r2, r0
 80097c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d901      	bls.n	80097d2 <HAL_RCC_OscConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e116      	b.n	8009a00 <HAL_RCC_OscConfig+0x418>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097d2:	4b31      	ldr	r3, [pc, #196]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 80097d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097d6:	f003 0302 	and.w	r3, r3, #2
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d0f0      	beq.n	80097c0 <HAL_RCC_OscConfig+0x1d8>
 80097de:	e015      	b.n	800980c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097e0:	4b30      	ldr	r3, [pc, #192]	; (80098a4 <HAL_RCC_OscConfig+0x2bc>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097e6:	f7fe f92f 	bl	8007a48 <HAL_GetTick>
 80097ea:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80097ec:	e008      	b.n	8009800 <HAL_RCC_OscConfig+0x218>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097ee:	f7fe f92b 	bl	8007a48 <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d901      	bls.n	8009800 <HAL_RCC_OscConfig+0x218>
        {
          return HAL_TIMEOUT;
 80097fc:	2303      	movs	r3, #3
 80097fe:	e0ff      	b.n	8009a00 <HAL_RCC_OscConfig+0x418>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009800:	4b25      	ldr	r3, [pc, #148]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 8009802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009804:	f003 0302 	and.w	r3, r3, #2
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1f0      	bne.n	80097ee <HAL_RCC_OscConfig+0x206>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 0304 	and.w	r3, r3, #4
 8009814:	2b00      	cmp	r3, #0
 8009816:	d067      	beq.n	80098e8 <HAL_RCC_OscConfig+0x300>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009818:	2300      	movs	r3, #0
 800981a:	60bb      	str	r3, [r7, #8]
 800981c:	4b1e      	ldr	r3, [pc, #120]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 800981e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009820:	4a1d      	ldr	r2, [pc, #116]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 8009822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009826:	6413      	str	r3, [r2, #64]	; 0x40
 8009828:	4b1b      	ldr	r3, [pc, #108]	; (8009898 <HAL_RCC_OscConfig+0x2b0>)
 800982a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009830:	60bb      	str	r3, [r7, #8]
 8009832:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009834:	4b1c      	ldr	r3, [pc, #112]	; (80098a8 <HAL_RCC_OscConfig+0x2c0>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a1b      	ldr	r2, [pc, #108]	; (80098a8 <HAL_RCC_OscConfig+0x2c0>)
 800983a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800983e:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8009840:	f7fe f902 	bl	8007a48 <HAL_GetTick>
 8009844:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009846:	e008      	b.n	800985a <HAL_RCC_OscConfig+0x272>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009848:	f7fe f8fe 	bl	8007a48 <HAL_GetTick>
 800984c:	4602      	mov	r2, r0
 800984e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	2b02      	cmp	r3, #2
 8009854:	d901      	bls.n	800985a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	e0d2      	b.n	8009a00 <HAL_RCC_OscConfig+0x418>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800985a:	4b13      	ldr	r3, [pc, #76]	; (80098a8 <HAL_RCC_OscConfig+0x2c0>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009862:	2b00      	cmp	r3, #0
 8009864:	d0f0      	beq.n	8009848 <HAL_RCC_OscConfig+0x260>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	689a      	ldr	r2, [r3, #8]
 800986a:	4b10      	ldr	r3, [pc, #64]	; (80098ac <HAL_RCC_OscConfig+0x2c4>)
 800986c:	b2d2      	uxtb	r2, r2
 800986e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d022      	beq.n	80098be <HAL_RCC_OscConfig+0x2d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009878:	f7fe f8e6 	bl	8007a48 <HAL_GetTick>
 800987c:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800987e:	e017      	b.n	80098b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009880:	f7fe f8e2 	bl	8007a48 <HAL_GetTick>
 8009884:	4602      	mov	r2, r0
 8009886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	f241 3288 	movw	r2, #5000	; 0x1388
 800988e:	4293      	cmp	r3, r2
 8009890:	d90e      	bls.n	80098b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009892:	2303      	movs	r3, #3
 8009894:	e0b4      	b.n	8009a00 <HAL_RCC_OscConfig+0x418>
 8009896:	bf00      	nop
 8009898:	40023800 	.word	0x40023800
 800989c:	40023802 	.word	0x40023802
 80098a0:	42470000 	.word	0x42470000
 80098a4:	42470e80 	.word	0x42470e80
 80098a8:	40007000 	.word	0x40007000
 80098ac:	40023870 	.word	0x40023870
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098b0:	4b55      	ldr	r3, [pc, #340]	; (8009a08 <HAL_RCC_OscConfig+0x420>)
 80098b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b4:	f003 0302 	and.w	r3, r3, #2
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d0e1      	beq.n	8009880 <HAL_RCC_OscConfig+0x298>
 80098bc:	e014      	b.n	80098e8 <HAL_RCC_OscConfig+0x300>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098be:	f7fe f8c3 	bl	8007a48 <HAL_GetTick>
 80098c2:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098c4:	e00a      	b.n	80098dc <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098c6:	f7fe f8bf 	bl	8007a48 <HAL_GetTick>
 80098ca:	4602      	mov	r2, r0
 80098cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d901      	bls.n	80098dc <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e091      	b.n	8009a00 <HAL_RCC_OscConfig+0x418>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098dc:	4b4a      	ldr	r3, [pc, #296]	; (8009a08 <HAL_RCC_OscConfig+0x420>)
 80098de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e0:	f003 0302 	and.w	r3, r3, #2
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1ee      	bne.n	80098c6 <HAL_RCC_OscConfig+0x2de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 8086 	beq.w	80099fe <HAL_RCC_OscConfig+0x416>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80098f2:	4b45      	ldr	r3, [pc, #276]	; (8009a08 <HAL_RCC_OscConfig+0x420>)
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	f003 030c 	and.w	r3, r3, #12
 80098fa:	2b08      	cmp	r3, #8
 80098fc:	d07d      	beq.n	80099fa <HAL_RCC_OscConfig+0x412>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	2b02      	cmp	r3, #2
 8009904:	d162      	bne.n	80099cc <HAL_RCC_OscConfig+0x3e4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009906:	4b41      	ldr	r3, [pc, #260]	; (8009a0c <HAL_RCC_OscConfig+0x424>)
 8009908:	2200      	movs	r2, #0
 800990a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800990c:	f7fe f89c 	bl	8007a48 <HAL_GetTick>
 8009910:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009912:	e008      	b.n	8009926 <HAL_RCC_OscConfig+0x33e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009914:	f7fe f898 	bl	8007a48 <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	2b02      	cmp	r3, #2
 8009920:	d901      	bls.n	8009926 <HAL_RCC_OscConfig+0x33e>
          {
            return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e06c      	b.n	8009a00 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009926:	4b38      	ldr	r3, [pc, #224]	; (8009a08 <HAL_RCC_OscConfig+0x420>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1f0      	bne.n	8009914 <HAL_RCC_OscConfig+0x32c>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	69da      	ldr	r2, [r3, #28]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	431a      	orrs	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009940:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009944:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	fa93 f3a3 	rbit	r3, r3
 800994c:	60fb      	str	r3, [r7, #12]
  return(result);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	fab3 f383 	clz	r3, r3
 8009954:	fa01 f303 	lsl.w	r3, r1, r3
 8009958:	431a      	orrs	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995e:	085b      	lsrs	r3, r3, #1
 8009960:	1e59      	subs	r1, r3, #1
 8009962:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8009966:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	fa93 f3a3 	rbit	r3, r3
 800996e:	617b      	str	r3, [r7, #20]
  return(result);
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	fab3 f383 	clz	r3, r3
 8009976:	fa01 f303 	lsl.w	r3, r1, r3
 800997a:	431a      	orrs	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009980:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8009984:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009986:	6a3b      	ldr	r3, [r7, #32]
 8009988:	fa93 f3a3 	rbit	r3, r3
 800998c:	61fb      	str	r3, [r7, #28]
  return(result);
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	fab3 f383 	clz	r3, r3
 8009994:	fa01 f303 	lsl.w	r3, r1, r3
 8009998:	491b      	ldr	r1, [pc, #108]	; (8009a08 <HAL_RCC_OscConfig+0x420>)
 800999a:	4313      	orrs	r3, r2
 800999c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800999e:	4b1b      	ldr	r3, [pc, #108]	; (8009a0c <HAL_RCC_OscConfig+0x424>)
 80099a0:	2201      	movs	r2, #1
 80099a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a4:	f7fe f850 	bl	8007a48 <HAL_GetTick>
 80099a8:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099aa:	e008      	b.n	80099be <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099ac:	f7fe f84c 	bl	8007a48 <HAL_GetTick>
 80099b0:	4602      	mov	r2, r0
 80099b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d901      	bls.n	80099be <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e020      	b.n	8009a00 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099be:	4b12      	ldr	r3, [pc, #72]	; (8009a08 <HAL_RCC_OscConfig+0x420>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d0f0      	beq.n	80099ac <HAL_RCC_OscConfig+0x3c4>
 80099ca:	e018      	b.n	80099fe <HAL_RCC_OscConfig+0x416>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099cc:	4b0f      	ldr	r3, [pc, #60]	; (8009a0c <HAL_RCC_OscConfig+0x424>)
 80099ce:	2200      	movs	r2, #0
 80099d0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099d2:	f7fe f839 	bl	8007a48 <HAL_GetTick>
 80099d6:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099d8:	e008      	b.n	80099ec <HAL_RCC_OscConfig+0x404>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099da:	f7fe f835 	bl	8007a48 <HAL_GetTick>
 80099de:	4602      	mov	r2, r0
 80099e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d901      	bls.n	80099ec <HAL_RCC_OscConfig+0x404>
          {
            return HAL_TIMEOUT;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e009      	b.n	8009a00 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099ec:	4b06      	ldr	r3, [pc, #24]	; (8009a08 <HAL_RCC_OscConfig+0x420>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1f0      	bne.n	80099da <HAL_RCC_OscConfig+0x3f2>
 80099f8:	e001      	b.n	80099fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e000      	b.n	8009a00 <HAL_RCC_OscConfig+0x418>
    }
  }
  return HAL_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3738      	adds	r7, #56	; 0x38
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	40023800 	.word	0x40023800
 8009a0c:	42470060 	.word	0x42470060

08009a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8009a1e:	4b81      	ldr	r3, [pc, #516]	; (8009c24 <HAL_RCC_ClockConfig+0x214>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 030f 	and.w	r3, r3, #15
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d90c      	bls.n	8009a46 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a2c:	4b7d      	ldr	r3, [pc, #500]	; (8009c24 <HAL_RCC_ClockConfig+0x214>)
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	b2d2      	uxtb	r2, r2
 8009a32:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009a34:	4b7b      	ldr	r3, [pc, #492]	; (8009c24 <HAL_RCC_ClockConfig+0x214>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 030f 	and.w	r3, r3, #15
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d001      	beq.n	8009a46 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e0ea      	b.n	8009c1c <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 0302 	and.w	r3, r3, #2
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d008      	beq.n	8009a64 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a52:	4b75      	ldr	r3, [pc, #468]	; (8009c28 <HAL_RCC_ClockConfig+0x218>)
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	4972      	ldr	r1, [pc, #456]	; (8009c28 <HAL_RCC_ClockConfig+0x218>)
 8009a60:	4313      	orrs	r3, r2
 8009a62:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 0301 	and.w	r3, r3, #1
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 8086 	beq.w	8009b7e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d107      	bne.n	8009a8a <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a7a:	4b6b      	ldr	r3, [pc, #428]	; (8009c28 <HAL_RCC_ClockConfig+0x218>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d119      	bne.n	8009aba <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e0c8      	b.n	8009c1c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d003      	beq.n	8009a9a <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	d107      	bne.n	8009aaa <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a9a:	4b63      	ldr	r3, [pc, #396]	; (8009c28 <HAL_RCC_ClockConfig+0x218>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d109      	bne.n	8009aba <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e0b8      	b.n	8009c1c <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009aaa:	4b5f      	ldr	r3, [pc, #380]	; (8009c28 <HAL_RCC_ClockConfig+0x218>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f003 0302 	and.w	r3, r3, #2
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d101      	bne.n	8009aba <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e0b0      	b.n	8009c1c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009aba:	4b5b      	ldr	r3, [pc, #364]	; (8009c28 <HAL_RCC_ClockConfig+0x218>)
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	f023 0203 	bic.w	r2, r3, #3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	4958      	ldr	r1, [pc, #352]	; (8009c28 <HAL_RCC_ClockConfig+0x218>)
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009acc:	f7fd ffbc 	bl	8007a48 <HAL_GetTick>
 8009ad0:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d112      	bne.n	8009b00 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009ada:	e00a      	b.n	8009af2 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009adc:	f7fd ffb4 	bl	8007a48 <HAL_GetTick>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d901      	bls.n	8009af2 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e094      	b.n	8009c1c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009af2:	4b4d      	ldr	r3, [pc, #308]	; (8009c28 <HAL_RCC_ClockConfig+0x218>)
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	f003 030c 	and.w	r3, r3, #12
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d1ee      	bne.n	8009adc <HAL_RCC_ClockConfig+0xcc>
 8009afe:	e03e      	b.n	8009b7e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d112      	bne.n	8009b2e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009b08:	e00a      	b.n	8009b20 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b0a:	f7fd ff9d 	bl	8007a48 <HAL_GetTick>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d901      	bls.n	8009b20 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	e07d      	b.n	8009c1c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009b20:	4b41      	ldr	r3, [pc, #260]	; (8009c28 <HAL_RCC_ClockConfig+0x218>)
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f003 030c 	and.w	r3, r3, #12
 8009b28:	2b08      	cmp	r3, #8
 8009b2a:	d1ee      	bne.n	8009b0a <HAL_RCC_ClockConfig+0xfa>
 8009b2c:	e027      	b.n	8009b7e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	2b03      	cmp	r3, #3
 8009b34:	d11d      	bne.n	8009b72 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8009b36:	e00a      	b.n	8009b4e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b38:	f7fd ff86 	bl	8007a48 <HAL_GetTick>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d901      	bls.n	8009b4e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	e066      	b.n	8009c1c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8009b4e:	4b36      	ldr	r3, [pc, #216]	; (8009c28 <HAL_RCC_ClockConfig+0x218>)
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	f003 030c 	and.w	r3, r3, #12
 8009b56:	2b0c      	cmp	r3, #12
 8009b58:	d1ee      	bne.n	8009b38 <HAL_RCC_ClockConfig+0x128>
 8009b5a:	e010      	b.n	8009b7e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b5c:	f7fd ff74 	bl	8007a48 <HAL_GetTick>
 8009b60:	4602      	mov	r2, r0
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d901      	bls.n	8009b72 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e054      	b.n	8009c1c <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009b72:	4b2d      	ldr	r3, [pc, #180]	; (8009c28 <HAL_RCC_ClockConfig+0x218>)
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f003 030c 	and.w	r3, r3, #12
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1ee      	bne.n	8009b5c <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8009b7e:	4b29      	ldr	r3, [pc, #164]	; (8009c24 <HAL_RCC_ClockConfig+0x214>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 030f 	and.w	r3, r3, #15
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d20c      	bcs.n	8009ba6 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b8c:	4b25      	ldr	r3, [pc, #148]	; (8009c24 <HAL_RCC_ClockConfig+0x214>)
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	b2d2      	uxtb	r2, r2
 8009b92:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009b94:	4b23      	ldr	r3, [pc, #140]	; (8009c24 <HAL_RCC_ClockConfig+0x214>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 030f 	and.w	r3, r3, #15
 8009b9c:	683a      	ldr	r2, [r7, #0]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d001      	beq.n	8009ba6 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e03a      	b.n	8009c1c <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f003 0304 	and.w	r3, r3, #4
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d008      	beq.n	8009bc4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009bb2:	4b1d      	ldr	r3, [pc, #116]	; (8009c28 <HAL_RCC_ClockConfig+0x218>)
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	491a      	ldr	r1, [pc, #104]	; (8009c28 <HAL_RCC_ClockConfig+0x218>)
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 0308 	and.w	r3, r3, #8
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d009      	beq.n	8009be4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009bd0:	4b15      	ldr	r3, [pc, #84]	; (8009c28 <HAL_RCC_ClockConfig+0x218>)
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	00db      	lsls	r3, r3, #3
 8009bde:	4912      	ldr	r1, [pc, #72]	; (8009c28 <HAL_RCC_ClockConfig+0x218>)
 8009be0:	4313      	orrs	r3, r2
 8009be2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8009be4:	f000 f826 	bl	8009c34 <HAL_RCC_GetSysClockFreq>
 8009be8:	4601      	mov	r1, r0
 8009bea:	4b0f      	ldr	r3, [pc, #60]	; (8009c28 <HAL_RCC_ClockConfig+0x218>)
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009bf2:	23f0      	movs	r3, #240	; 0xf0
 8009bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	fa93 f3a3 	rbit	r3, r3
 8009bfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	fab3 f383 	clz	r3, r3
 8009c04:	fa22 f303 	lsr.w	r3, r2, r3
 8009c08:	4a08      	ldr	r2, [pc, #32]	; (8009c2c <HAL_RCC_ClockConfig+0x21c>)
 8009c0a:	5cd3      	ldrb	r3, [r2, r3]
 8009c0c:	fa21 f303 	lsr.w	r3, r1, r3
 8009c10:	4a07      	ldr	r2, [pc, #28]	; (8009c30 <HAL_RCC_ClockConfig+0x220>)
 8009c12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8009c14:	200f      	movs	r0, #15
 8009c16:	f7fd feed 	bl	80079f4 <HAL_InitTick>
  
  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	40023c00 	.word	0x40023c00
 8009c28:	40023800 	.word	0x40023800
 8009c2c:	0800cb20 	.word	0x0800cb20
 8009c30:	200007cc 	.word	0x200007cc

08009c34 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b08b      	sub	sp, #44	; 0x2c
 8009c38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	61fb      	str	r3, [r7, #28]
 8009c3e:	2300      	movs	r3, #0
 8009c40:	627b      	str	r3, [r7, #36]	; 0x24
 8009c42:	2300      	movs	r3, #0
 8009c44:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8009c46:	2300      	movs	r3, #0
 8009c48:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009c4a:	4b36      	ldr	r3, [pc, #216]	; (8009d24 <HAL_RCC_GetSysClockFreq+0xf0>)
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	f003 030c 	and.w	r3, r3, #12
 8009c52:	2b04      	cmp	r3, #4
 8009c54:	d006      	beq.n	8009c64 <HAL_RCC_GetSysClockFreq+0x30>
 8009c56:	2b08      	cmp	r3, #8
 8009c58:	d007      	beq.n	8009c6a <HAL_RCC_GetSysClockFreq+0x36>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d158      	bne.n	8009d10 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009c5e:	4b32      	ldr	r3, [pc, #200]	; (8009d28 <HAL_RCC_GetSysClockFreq+0xf4>)
 8009c60:	623b      	str	r3, [r7, #32]
       break;
 8009c62:	e058      	b.n	8009d16 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009c64:	4b31      	ldr	r3, [pc, #196]	; (8009d2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009c66:	623b      	str	r3, [r7, #32]
      break;
 8009c68:	e055      	b.n	8009d16 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009c6a:	4b2e      	ldr	r3, [pc, #184]	; (8009d24 <HAL_RCC_GetSysClockFreq+0xf0>)
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c72:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009c74:	4b2b      	ldr	r3, [pc, #172]	; (8009d24 <HAL_RCC_GetSysClockFreq+0xf0>)
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d017      	beq.n	8009cb0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8009c80:	4a2a      	ldr	r2, [pc, #168]	; (8009d2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c88:	4b26      	ldr	r3, [pc, #152]	; (8009d24 <HAL_RCC_GetSysClockFreq+0xf0>)
 8009c8a:	6859      	ldr	r1, [r3, #4]
 8009c8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009c90:	400b      	ands	r3, r1
 8009c92:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8009c96:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c98:	6979      	ldr	r1, [r7, #20]
 8009c9a:	fa91 f1a1 	rbit	r1, r1
 8009c9e:	6139      	str	r1, [r7, #16]
  return(result);
 8009ca0:	6939      	ldr	r1, [r7, #16]
 8009ca2:	fab1 f181 	clz	r1, r1
 8009ca6:	40cb      	lsrs	r3, r1
 8009ca8:	fb03 f302 	mul.w	r3, r3, r2
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24
 8009cae:	e016      	b.n	8009cde <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8009cb0:	4a1d      	ldr	r2, [pc, #116]	; (8009d28 <HAL_RCC_GetSysClockFreq+0xf4>)
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8009cb8:	4b1a      	ldr	r3, [pc, #104]	; (8009d24 <HAL_RCC_GetSysClockFreq+0xf0>)
 8009cba:	6859      	ldr	r1, [r3, #4]
 8009cbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009cc0:	400b      	ands	r3, r1
 8009cc2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8009cc6:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cc8:	68f9      	ldr	r1, [r7, #12]
 8009cca:	fa91 f1a1 	rbit	r1, r1
 8009cce:	60b9      	str	r1, [r7, #8]
  return(result);
 8009cd0:	68b9      	ldr	r1, [r7, #8]
 8009cd2:	fab1 f181 	clz	r1, r1
 8009cd6:	40cb      	lsrs	r3, r1
 8009cd8:	fb03 f302 	mul.w	r3, r3, r2
 8009cdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8009cde:	4b11      	ldr	r3, [pc, #68]	; (8009d24 <HAL_RCC_GetSysClockFreq+0xf0>)
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009ce6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8009cea:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	fa93 f3a3 	rbit	r3, r3
 8009cf2:	603b      	str	r3, [r7, #0]
  return(result);
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	fab3 f383 	clz	r3, r3
 8009cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009cfe:	3301      	adds	r3, #1
 8009d00:	005b      	lsls	r3, r3, #1
 8009d02:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8009d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d0c:	623b      	str	r3, [r7, #32]
      break;
 8009d0e:	e002      	b.n	8009d16 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009d10:	4b05      	ldr	r3, [pc, #20]	; (8009d28 <HAL_RCC_GetSysClockFreq+0xf4>)
 8009d12:	623b      	str	r3, [r7, #32]
      break;
 8009d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009d16:	6a3b      	ldr	r3, [r7, #32]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	372c      	adds	r7, #44	; 0x2c
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr
 8009d24:	40023800 	.word	0x40023800
 8009d28:	00f42400 	.word	0x00f42400
 8009d2c:	017d7840 	.word	0x017d7840

08009d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d30:	b480      	push	{r7}
 8009d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d34:	4b03      	ldr	r3, [pc, #12]	; (8009d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8009d36:	681b      	ldr	r3, [r3, #0]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	200007cc 	.word	0x200007cc

08009d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8009d4e:	f7ff ffef 	bl	8009d30 <HAL_RCC_GetHCLKFreq>
 8009d52:	4601      	mov	r1, r0
 8009d54:	4b0b      	ldr	r3, [pc, #44]	; (8009d84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009d5c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009d60:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	fa93 f3a3 	rbit	r3, r3
 8009d68:	603b      	str	r3, [r7, #0]
  return(result);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	fab3 f383 	clz	r3, r3
 8009d70:	fa22 f303 	lsr.w	r3, r2, r3
 8009d74:	4a04      	ldr	r2, [pc, #16]	; (8009d88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8009d76:	5cd3      	ldrb	r3, [r2, r3]
 8009d78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	40023800 	.word	0x40023800
 8009d88:	0800cb20 	.word	0x0800cb20

08009d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8009d92:	f7ff ffcd 	bl	8009d30 <HAL_RCC_GetHCLKFreq>
 8009d96:	4601      	mov	r1, r0
 8009d98:	4b0b      	ldr	r3, [pc, #44]	; (8009dc8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8009da0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8009da4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	fa93 f3a3 	rbit	r3, r3
 8009dac:	603b      	str	r3, [r7, #0]
  return(result);
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	fab3 f383 	clz	r3, r3
 8009db4:	fa22 f303 	lsr.w	r3, r2, r3
 8009db8:	4a04      	ldr	r2, [pc, #16]	; (8009dcc <HAL_RCC_GetPCLK2Freq+0x40>)
 8009dba:	5cd3      	ldrb	r3, [r2, r3]
 8009dbc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	40023800 	.word	0x40023800
 8009dcc:	0800cb20 	.word	0x0800cb20

08009dd0 <HAL_TIM_Base_Start>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f042 0201 	orr.w	r2, r2, #1
 8009dee:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <HAL_TIM_OC_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b082      	sub	sp, #8
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e01d      	b.n	8009e54 <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d106      	bne.n	8009e32 <HAL_TIM_OC_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f7f7 f883 	bl	8000f38 <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2202      	movs	r2, #2
 8009e36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	3304      	adds	r3, #4
 8009e42:	4619      	mov	r1, r3
 8009e44:	4610      	mov	r0, r2
 8009e46:	f000 f869 	bl	8009f1c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d101      	bne.n	8009e76 <HAL_TIM_OC_ConfigChannel+0x1a>
 8009e72:	2302      	movs	r3, #2
 8009e74:	e04e      	b.n	8009f14 <HAL_TIM_OC_ConfigChannel+0xb8>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2202      	movs	r2, #2
 8009e82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  switch (Channel)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b0c      	cmp	r3, #12
 8009e8a:	d839      	bhi.n	8009f00 <HAL_TIM_OC_ConfigChannel+0xa4>
 8009e8c:	a201      	add	r2, pc, #4	; (adr r2, 8009e94 <HAL_TIM_OC_ConfigChannel+0x38>)
 8009e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e92:	bf00      	nop
 8009e94:	08009ec9 	.word	0x08009ec9
 8009e98:	08009f01 	.word	0x08009f01
 8009e9c:	08009f01 	.word	0x08009f01
 8009ea0:	08009f01 	.word	0x08009f01
 8009ea4:	08009ed7 	.word	0x08009ed7
 8009ea8:	08009f01 	.word	0x08009f01
 8009eac:	08009f01 	.word	0x08009f01
 8009eb0:	08009f01 	.word	0x08009f01
 8009eb4:	08009ee5 	.word	0x08009ee5
 8009eb8:	08009f01 	.word	0x08009f01
 8009ebc:	08009f01 	.word	0x08009f01
 8009ec0:	08009f01 	.word	0x08009f01
 8009ec4:	08009ef3 	.word	0x08009ef3
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68b9      	ldr	r1, [r7, #8]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f000 f916 	bl	800a100 <TIM_OC1_SetConfig>
    }
    break;
 8009ed4:	e015      	b.n	8009f02 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68b9      	ldr	r1, [r7, #8]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 f8a1 	bl	800a024 <TIM_OC2_SetConfig>
    }
    break;
 8009ee2:	e00e      	b.n	8009f02 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68b9      	ldr	r1, [r7, #8]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 f970 	bl	800a1d0 <TIM_OC3_SetConfig>
    }
    break;
 8009ef0:	e007      	b.n	8009f02 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68b9      	ldr	r1, [r7, #8]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 f9d5 	bl	800a2a8 <TIM_OC4_SetConfig>
    }
    break;
 8009efe:	e000      	b.n	8009f02 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    default:
    break;    
 8009f00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim); 
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8009f26:	2300      	movs	r3, #0
 8009f28:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a35      	ldr	r2, [pc, #212]	; (800a008 <TIM_Base_SetConfig+0xec>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d00f      	beq.n	8009f58 <TIM_Base_SetConfig+0x3c>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f3e:	d00b      	beq.n	8009f58 <TIM_Base_SetConfig+0x3c>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4a32      	ldr	r2, [pc, #200]	; (800a00c <TIM_Base_SetConfig+0xf0>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d007      	beq.n	8009f58 <TIM_Base_SetConfig+0x3c>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a31      	ldr	r2, [pc, #196]	; (800a010 <TIM_Base_SetConfig+0xf4>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d003      	beq.n	8009f58 <TIM_Base_SetConfig+0x3c>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a30      	ldr	r2, [pc, #192]	; (800a014 <TIM_Base_SetConfig+0xf8>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d101      	bne.n	8009f5c <TIM_Base_SetConfig+0x40>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e000      	b.n	8009f5e <TIM_Base_SetConfig+0x42>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d008      	beq.n	8009f74 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a24      	ldr	r2, [pc, #144]	; (800a008 <TIM_Base_SetConfig+0xec>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d01b      	beq.n	8009fb4 <TIM_Base_SetConfig+0x98>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f82:	d017      	beq.n	8009fb4 <TIM_Base_SetConfig+0x98>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a21      	ldr	r2, [pc, #132]	; (800a00c <TIM_Base_SetConfig+0xf0>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d013      	beq.n	8009fb4 <TIM_Base_SetConfig+0x98>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a20      	ldr	r2, [pc, #128]	; (800a010 <TIM_Base_SetConfig+0xf4>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d00f      	beq.n	8009fb4 <TIM_Base_SetConfig+0x98>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a1f      	ldr	r2, [pc, #124]	; (800a014 <TIM_Base_SetConfig+0xf8>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d00b      	beq.n	8009fb4 <TIM_Base_SetConfig+0x98>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a1e      	ldr	r2, [pc, #120]	; (800a018 <TIM_Base_SetConfig+0xfc>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d007      	beq.n	8009fb4 <TIM_Base_SetConfig+0x98>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a1d      	ldr	r2, [pc, #116]	; (800a01c <TIM_Base_SetConfig+0x100>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d003      	beq.n	8009fb4 <TIM_Base_SetConfig+0x98>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a1c      	ldr	r2, [pc, #112]	; (800a020 <TIM_Base_SetConfig+0x104>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d101      	bne.n	8009fb8 <TIM_Base_SetConfig+0x9c>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e000      	b.n	8009fba <TIM_Base_SetConfig+0x9e>
 8009fb8:	2300      	movs	r3, #0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d008      	beq.n	8009fd0 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	689a      	ldr	r2, [r3, #8]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a07      	ldr	r2, [pc, #28]	; (800a008 <TIM_Base_SetConfig+0xec>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d103      	bne.n	8009ff6 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	691a      	ldr	r2, [r3, #16]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	615a      	str	r2, [r3, #20]
}
 8009ffc:	bf00      	nop
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr
 800a008:	40010000 	.word	0x40010000
 800a00c:	40000400 	.word	0x40000400
 800a010:	40000800 	.word	0x40000800
 800a014:	40000c00 	.word	0x40000c00
 800a018:	40014000 	.word	0x40014000
 800a01c:	40014400 	.word	0x40014400
 800a020:	40014800 	.word	0x40014800

0800a024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a024:	b480      	push	{r7}
 800a026:	b087      	sub	sp, #28
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800a02e:	2300      	movs	r3, #0
 800a030:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800a032:	2300      	movs	r3, #0
 800a034:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800a036:	2300      	movs	r3, #0
 800a038:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a1b      	ldr	r3, [r3, #32]
 800a03e:	f023 0210 	bic.w	r2, r3, #16
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a05e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a066:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	021b      	lsls	r3, r3, #8
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	4313      	orrs	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	f023 0320 	bic.w	r3, r3, #32
 800a07a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	011b      	lsls	r3, r3, #4
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	4313      	orrs	r3, r2
 800a086:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a1c      	ldr	r2, [pc, #112]	; (800a0fc <TIM_OC2_SetConfig+0xd8>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d121      	bne.n	800a0d4 <TIM_OC2_SetConfig+0xb0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	011b      	lsls	r3, r3, #4
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0aa:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	695b      	ldr	r3, [r3, #20]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	693a      	ldr	r2, [r7, #16]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	699b      	ldr	r3, [r3, #24]
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	693a      	ldr	r2, [r7, #16]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	685a      	ldr	r2, [r3, #4]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	621a      	str	r2, [r3, #32]
}
 800a0ee:	bf00      	nop
 800a0f0:	371c      	adds	r7, #28
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	40010000 	.word	0x40010000

0800a100 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a100:	b480      	push	{r7}
 800a102:	b087      	sub	sp, #28
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800a10a:	2300      	movs	r3, #0
 800a10c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 800a112:	2300      	movs	r3, #0
 800a114:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	f023 0201 	bic.w	r2, r3, #1
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a13a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f023 0303 	bic.w	r3, r3, #3
 800a142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f023 0302 	bic.w	r3, r3, #2
 800a154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a1a      	ldr	r2, [pc, #104]	; (800a1cc <TIM_OC1_SetConfig+0xcc>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d11e      	bne.n	800a1a6 <TIM_OC1_SetConfig+0xa6>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	f023 0308 	bic.w	r3, r3, #8
 800a16e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	697a      	ldr	r2, [r7, #20]
 800a176:	4313      	orrs	r3, r2
 800a178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f023 0304 	bic.w	r3, r3, #4
 800a180:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	695b      	ldr	r3, [r3, #20]
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	4313      	orrs	r3, r2
 800a19a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	693a      	ldr	r2, [r7, #16]
 800a1aa:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	621a      	str	r2, [r3, #32]
} 
 800a1c0:	bf00      	nop
 800a1c2:	371c      	adds	r7, #28
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	40010000 	.word	0x40010000

0800a1d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a1b      	ldr	r3, [r3, #32]
 800a1f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a20a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f023 0303 	bic.w	r3, r3, #3
 800a212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	021b      	lsls	r3, r3, #8
 800a22c:	697a      	ldr	r2, [r7, #20]
 800a22e:	4313      	orrs	r3, r2
 800a230:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a1b      	ldr	r2, [pc, #108]	; (800a2a4 <TIM_OC3_SetConfig+0xd4>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d121      	bne.n	800a27e <TIM_OC3_SetConfig+0xae>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	021b      	lsls	r3, r3, #8
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a254:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a25c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	011b      	lsls	r3, r3, #4
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	4313      	orrs	r3, r2
 800a270:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	011b      	lsls	r3, r3, #4
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	693a      	ldr	r2, [r7, #16]
 800a282:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	685a      	ldr	r2, [r3, #4]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	697a      	ldr	r2, [r7, #20]
 800a296:	621a      	str	r2, [r3, #32]
}
 800a298:	bf00      	nop
 800a29a:	371c      	adds	r7, #28
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	40010000 	.word	0x40010000

0800a2a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b087      	sub	sp, #28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	69db      	ldr	r3, [r3, #28]
 800a2da:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2e2:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2ea:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	021b      	lsls	r3, r3, #8
 800a2f2:	693a      	ldr	r2, [r7, #16]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2fe:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	031b      	lsls	r3, r3, #12
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	4313      	orrs	r3, r2
 800a30a:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a10      	ldr	r2, [pc, #64]	; (800a350 <TIM_OC4_SetConfig+0xa8>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d109      	bne.n	800a328 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a31a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	019b      	lsls	r3, r3, #6
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	4313      	orrs	r3, r2
 800a326:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	621a      	str	r2, [r3, #32]
}
 800a342:	bf00      	nop
 800a344:	371c      	adds	r7, #28
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	40010000 	.word	0x40010000

0800a354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a364:	2b01      	cmp	r3, #1
 800a366:	d101      	bne.n	800a36c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a368:	2302      	movs	r3, #2
 800a36a:	e032      	b.n	800a3d2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2202      	movs	r2, #2
 800a378:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	685a      	ldr	r2, [r3, #4]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a38a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6859      	ldr	r1, [r3, #4]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	430a      	orrs	r2, r1
 800a39c:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	689a      	ldr	r2, [r3, #8]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3ac:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6899      	ldr	r1, [r3, #8]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	430a      	orrs	r2, r1
 800a3be:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
} 
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b082      	sub	sp, #8
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e03f      	b.n	800a470 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d106      	bne.n	800a40a <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7f7 f991 	bl	800172c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2224      	movs	r2, #36	; 0x24
 800a40e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68da      	ldr	r2, [r3, #12]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a420:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fb5e 	bl	800aae4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	691a      	ldr	r2, [r3, #16]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a436:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	695a      	ldr	r2, [r3, #20]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a446:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68da      	ldr	r2, [r3, #12]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a456:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2220      	movs	r2, #32
 800a462:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2220      	movs	r2, #32
 800a46a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	4613      	mov	r3, r2
 800a484:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	2b20      	cmp	r3, #32
 800a490:	d153      	bne.n	800a53a <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL ) || (Size == 0U))
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d002      	beq.n	800a49e <HAL_UART_Transmit_DMA+0x26>
 800a498:	88fb      	ldrh	r3, [r7, #6]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d101      	bne.n	800a4a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e04c      	b.n	800a53c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d101      	bne.n	800a4b0 <HAL_UART_Transmit_DMA+0x38>
 800a4ac:	2302      	movs	r3, #2
 800a4ae:	e045      	b.n	800a53c <HAL_UART_Transmit_DMA+0xc4>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	88fa      	ldrh	r2, [r7, #6]
 800a4c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	88fa      	ldrh	r2, [r7, #6]
 800a4c8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2221      	movs	r2, #33	; 0x21
 800a4d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4dc:	4a19      	ldr	r2, [pc, #100]	; (800a544 <HAL_UART_Transmit_DMA+0xcc>)
 800a4de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e4:	4a18      	ldr	r2, [pc, #96]	; (800a548 <HAL_UART_Transmit_DMA+0xd0>)
 800a4e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ec:	4a17      	ldr	r2, [pc, #92]	; (800a54c <HAL_UART_Transmit_DMA+0xd4>)
 800a4ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
 800a4f8:	f107 0308 	add.w	r3, r7, #8
 800a4fc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	6819      	ldr	r1, [r3, #0]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	3304      	adds	r3, #4
 800a50c:	461a      	mov	r2, r3
 800a50e:	88fb      	ldrh	r3, [r7, #6]
 800a510:	f7fd fc80 	bl	8007e14 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a51c:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	695a      	ldr	r2, [r3, #20]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a534:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	e000      	b.n	800a53c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800a53a:	2302      	movs	r3, #2
  }
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	0800a785 	.word	0x0800a785
 800a548:	0800a7d7 	.word	0x0800a7d7
 800a54c:	0800a7f3 	.word	0x0800a7f3

0800a550 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b088      	sub	sp, #32
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800a570:	2300      	movs	r3, #0
 800a572:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 800a574:	2300      	movs	r3, #0
 800a576:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	f003 030f 	and.w	r3, r3, #15
 800a57e:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d10d      	bne.n	800a5a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	f003 0320 	and.w	r3, r3, #32
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d008      	beq.n	800a5a2 <HAL_UART_IRQHandler+0x52>
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	f003 0320 	and.w	r3, r3, #32
 800a596:	2b00      	cmp	r3, #0
 800a598:	d003      	beq.n	800a5a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fa29 	bl	800a9f2 <UART_Receive_IT>
      return;
 800a5a0:	e0cc      	b.n	800a73c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f000 80ab 	beq.w	800a700 <HAL_UART_IRQHandler+0x1b0>
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	f003 0301 	and.w	r3, r3, #1
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d105      	bne.n	800a5c0 <HAL_UART_IRQHandler+0x70>
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f000 80a0 	beq.w	800a700 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	f003 0301 	and.w	r3, r3, #1
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <HAL_UART_IRQHandler+0x90>
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d005      	beq.n	800a5e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5d8:	f043 0201 	orr.w	r2, r3, #1
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	f003 0304 	and.w	r3, r3, #4
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00a      	beq.n	800a600 <HAL_UART_IRQHandler+0xb0>
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f003 0301 	and.w	r3, r3, #1
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d005      	beq.n	800a600 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f8:	f043 0202 	orr.w	r2, r3, #2
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	f003 0302 	and.w	r3, r3, #2
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00a      	beq.n	800a620 <HAL_UART_IRQHandler+0xd0>
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f003 0301 	and.w	r3, r3, #1
 800a610:	2b00      	cmp	r3, #0
 800a612:	d005      	beq.n	800a620 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a618:	f043 0204 	orr.w	r2, r3, #4
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	f003 0308 	and.w	r3, r3, #8
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00a      	beq.n	800a640 <HAL_UART_IRQHandler+0xf0>
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f003 0301 	and.w	r3, r3, #1
 800a630:	2b00      	cmp	r3, #0
 800a632:	d005      	beq.n	800a640 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a638:	f043 0208 	orr.w	r2, r3, #8
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a644:	2b00      	cmp	r3, #0
 800a646:	d078      	beq.n	800a73a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	f003 0320 	and.w	r3, r3, #32
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d007      	beq.n	800a662 <HAL_UART_IRQHandler+0x112>
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	f003 0320 	and.w	r3, r3, #32
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 f9c8 	bl	800a9f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	695b      	ldr	r3, [r3, #20]
 800a668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	bf14      	ite	ne
 800a670:	2301      	movne	r3, #1
 800a672:	2300      	moveq	r3, #0
 800a674:	b2db      	uxtb	r3, r3
 800a676:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a67c:	f003 0308 	and.w	r3, r3, #8
 800a680:	2b00      	cmp	r3, #0
 800a682:	d102      	bne.n	800a68a <HAL_UART_IRQHandler+0x13a>
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d031      	beq.n	800a6ee <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f911 	bl	800a8b2 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	695b      	ldr	r3, [r3, #20]
 800a696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d023      	beq.n	800a6e6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	695a      	ldr	r2, [r3, #20]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6ac:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d013      	beq.n	800a6de <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ba:	4a22      	ldr	r2, [pc, #136]	; (800a744 <HAL_UART_IRQHandler+0x1f4>)
 800a6bc:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fd fc06 	bl	8007ed4 <HAL_DMA_Abort_IT>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d016      	beq.n	800a6fc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a6d8:	4610      	mov	r0, r2
 800a6da:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6dc:	e00e      	b.n	800a6fc <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f846 	bl	800a770 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6e4:	e00a      	b.n	800a6fc <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f842 	bl	800a770 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6ec:	e006      	b.n	800a6fc <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f83e 	bl	800a770 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a6fa:	e01e      	b.n	800a73a <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6fc:	bf00      	nop
    return;
 800a6fe:	e01c      	b.n	800a73a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a706:	2b00      	cmp	r3, #0
 800a708:	d008      	beq.n	800a71c <HAL_UART_IRQHandler+0x1cc>
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a710:	2b00      	cmp	r3, #0
 800a712:	d003      	beq.n	800a71c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f8fe 	bl	800a916 <UART_Transmit_IT>
    return;
 800a71a:	e00f      	b.n	800a73c <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00a      	beq.n	800a73c <HAL_UART_IRQHandler+0x1ec>
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d005      	beq.n	800a73c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f946 	bl	800a9c2 <UART_EndTransmit_IT>
    return;
 800a736:	bf00      	nop
 800a738:	e000      	b.n	800a73c <HAL_UART_IRQHandler+0x1ec>
    return;
 800a73a:	bf00      	nop
  }
}
 800a73c:	3720      	adds	r7, #32
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	0800a8ef 	.word	0x0800a8ef

0800a748 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800a750:	bf00      	nop
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a790:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d113      	bne.n	800a7c8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	695a      	ldr	r2, [r3, #20]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7b4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68da      	ldr	r2, [r3, #12]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7c4:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 800a7c6:	e002      	b.n	800a7ce <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f7f6 feed 	bl	80015a8 <HAL_UART_TxCpltCallback>
}
 800a7ce:	bf00      	nop
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b084      	sub	sp, #16
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e2:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f7ff ffaf 	bl	800a748 <HAL_UART_TxHalfCpltCallback>
}
 800a7ea:	bf00      	nop
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b084      	sub	sp, #16
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a802:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	695b      	ldr	r3, [r3, #20]
 800a80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a80e:	2b00      	cmp	r3, #0
 800a810:	bf14      	ite	ne
 800a812:	2301      	movne	r3, #1
 800a814:	2300      	moveq	r3, #0
 800a816:	b2db      	uxtb	r3, r3
 800a818:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b21      	cmp	r3, #33	; 0x21
 800a824:	d108      	bne.n	800a838 <UART_DMAError+0x46>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d005      	beq.n	800a838 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	2200      	movs	r2, #0
 800a830:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a832:	68b8      	ldr	r0, [r7, #8]
 800a834:	f000 f827 	bl	800a886 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a842:	2b00      	cmp	r3, #0
 800a844:	bf14      	ite	ne
 800a846:	2301      	movne	r3, #1
 800a848:	2300      	moveq	r3, #0
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a854:	b2db      	uxtb	r3, r3
 800a856:	2b22      	cmp	r3, #34	; 0x22
 800a858:	d108      	bne.n	800a86c <UART_DMAError+0x7a>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d005      	beq.n	800a86c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	2200      	movs	r2, #0
 800a864:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a866:	68b8      	ldr	r0, [r7, #8]
 800a868:	f000 f823 	bl	800a8b2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a870:	f043 0210 	orr.w	r2, r3, #16
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800a878:	68b8      	ldr	r0, [r7, #8]
 800a87a:	f7ff ff79 	bl	800a770 <HAL_UART_ErrorCallback>
}
 800a87e:	bf00      	nop
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a886:	b480      	push	{r7}
 800a888:	b083      	sub	sp, #12
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68da      	ldr	r2, [r3, #12]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a89c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2220      	movs	r2, #32
 800a8a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a8a6:	bf00      	nop
 800a8a8:	370c      	adds	r7, #12
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b083      	sub	sp, #12
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68da      	ldr	r2, [r3, #12]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a8c8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	695a      	ldr	r2, [r3, #20]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f022 0201 	bic.w	r2, r2, #1
 800a8d8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2220      	movs	r2, #32
 800a8de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a8e2:	bf00      	nop
 800a8e4:	370c      	adds	r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr

0800a8ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b084      	sub	sp, #16
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f7ff ff31 	bl	800a770 <HAL_UART_ErrorCallback>
}
 800a90e:	bf00      	nop
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a916:	b480      	push	{r7}
 800a918:	b085      	sub	sp, #20
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a924:	b2db      	uxtb	r3, r3
 800a926:	2b21      	cmp	r3, #33	; 0x21
 800a928:	d144      	bne.n	800a9b4 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a932:	d11a      	bne.n	800a96a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6a1b      	ldr	r3, [r3, #32]
 800a938:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	881b      	ldrh	r3, [r3, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a948:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d105      	bne.n	800a95e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a1b      	ldr	r3, [r3, #32]
 800a956:	1c9a      	adds	r2, r3, #2
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	621a      	str	r2, [r3, #32]
 800a95c:	e00e      	b.n	800a97c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	1c5a      	adds	r2, r3, #1
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	621a      	str	r2, [r3, #32]
 800a968:	e008      	b.n	800a97c <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	1c59      	adds	r1, r3, #1
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	6211      	str	r1, [r2, #32]
 800a974:	781a      	ldrb	r2, [r3, #0]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a980:	b29b      	uxth	r3, r3
 800a982:	3b01      	subs	r3, #1
 800a984:	b29b      	uxth	r3, r3
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	4619      	mov	r1, r3
 800a98a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10f      	bne.n	800a9b0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68da      	ldr	r2, [r3, #12]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a99e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68da      	ldr	r2, [r3, #12]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e000      	b.n	800a9b6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a9b4:	2302      	movs	r3, #2
  }
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr

0800a9c2 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68da      	ldr	r2, [r3, #12]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9d8:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7f6 fde0 	bl	80015a8 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b22      	cmp	r3, #34	; 0x22
 800aa04:	d169      	bne.n	800aada <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa0e:	d123      	bne.n	800aa58 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa14:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10e      	bne.n	800aa3c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa34:	1c9a      	adds	r2, r3, #2
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	629a      	str	r2, [r3, #40]	; 0x28
 800aa3a:	e029      	b.n	800aa90 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa50:	1c5a      	adds	r2, r3, #1
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	629a      	str	r2, [r3, #40]	; 0x28
 800aa56:	e01b      	b.n	800aa90 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10a      	bne.n	800aa76 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	6858      	ldr	r0, [r3, #4]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa6a:	1c59      	adds	r1, r3, #1
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	6291      	str	r1, [r2, #40]	; 0x28
 800aa70:	b2c2      	uxtb	r2, r0
 800aa72:	701a      	strb	r2, [r3, #0]
 800aa74:	e00c      	b.n	800aa90 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	b2da      	uxtb	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa82:	1c58      	adds	r0, r3, #1
 800aa84:	6879      	ldr	r1, [r7, #4]
 800aa86:	6288      	str	r0, [r1, #40]	; 0x28
 800aa88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aa8c:	b2d2      	uxtb	r2, r2
 800aa8e:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	3b01      	subs	r3, #1
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d118      	bne.n	800aad6 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	68da      	ldr	r2, [r3, #12]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aab2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	695a      	ldr	r2, [r3, #20]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f022 0201 	bic.w	r2, r2, #1
 800aac2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2220      	movs	r2, #32
 800aac8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f7ff fe45 	bl	800a75c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	e002      	b.n	800aadc <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	e000      	b.n	800aadc <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aada:	2302      	movs	r3, #2
  }
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aae4:	b5b0      	push	{r4, r5, r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800aaec:	2300      	movs	r3, #0
 800aaee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800aafe:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ab20:	f023 030c 	bic.w	r3, r3, #12
 800ab24:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	689a      	ldr	r2, [r3, #8]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	431a      	orrs	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	695b      	ldr	r3, [r3, #20]
 800ab34:	431a      	orrs	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	69db      	ldr	r3, [r3, #28]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	695b      	ldr	r3, [r3, #20]
 800ab50:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab58:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	699b      	ldr	r3, [r3, #24]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	69db      	ldr	r3, [r3, #28]
 800ab70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab74:	f040 80e4 	bne.w	800ad40 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4aab      	ldr	r2, [pc, #684]	; (800ae2c <UART_SetConfig+0x348>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d004      	beq.n	800ab8c <UART_SetConfig+0xa8>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4aaa      	ldr	r2, [pc, #680]	; (800ae30 <UART_SetConfig+0x34c>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d16c      	bne.n	800ac66 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800ab8c:	f7ff f8fe 	bl	8009d8c <HAL_RCC_GetPCLK2Freq>
 800ab90:	4602      	mov	r2, r0
 800ab92:	4613      	mov	r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4413      	add	r3, r2
 800ab98:	009a      	lsls	r2, r3, #2
 800ab9a:	441a      	add	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	005b      	lsls	r3, r3, #1
 800aba2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba6:	4aa3      	ldr	r2, [pc, #652]	; (800ae34 <UART_SetConfig+0x350>)
 800aba8:	fba2 2303 	umull	r2, r3, r2, r3
 800abac:	095b      	lsrs	r3, r3, #5
 800abae:	011c      	lsls	r4, r3, #4
 800abb0:	f7ff f8ec 	bl	8009d8c <HAL_RCC_GetPCLK2Freq>
 800abb4:	4602      	mov	r2, r0
 800abb6:	4613      	mov	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	009a      	lsls	r2, r3, #2
 800abbe:	441a      	add	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	005b      	lsls	r3, r3, #1
 800abc6:	fbb2 f5f3 	udiv	r5, r2, r3
 800abca:	f7ff f8df 	bl	8009d8c <HAL_RCC_GetPCLK2Freq>
 800abce:	4602      	mov	r2, r0
 800abd0:	4613      	mov	r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	009a      	lsls	r2, r3, #2
 800abd8:	441a      	add	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	005b      	lsls	r3, r3, #1
 800abe0:	fbb2 f3f3 	udiv	r3, r2, r3
 800abe4:	4a93      	ldr	r2, [pc, #588]	; (800ae34 <UART_SetConfig+0x350>)
 800abe6:	fba2 2303 	umull	r2, r3, r2, r3
 800abea:	095b      	lsrs	r3, r3, #5
 800abec:	2264      	movs	r2, #100	; 0x64
 800abee:	fb02 f303 	mul.w	r3, r2, r3
 800abf2:	1aeb      	subs	r3, r5, r3
 800abf4:	00db      	lsls	r3, r3, #3
 800abf6:	3332      	adds	r3, #50	; 0x32
 800abf8:	4a8e      	ldr	r2, [pc, #568]	; (800ae34 <UART_SetConfig+0x350>)
 800abfa:	fba2 2303 	umull	r2, r3, r2, r3
 800abfe:	095b      	lsrs	r3, r3, #5
 800ac00:	005b      	lsls	r3, r3, #1
 800ac02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ac06:	441c      	add	r4, r3
 800ac08:	f7ff f8c0 	bl	8009d8c <HAL_RCC_GetPCLK2Freq>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	4613      	mov	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	009a      	lsls	r2, r3, #2
 800ac16:	441a      	add	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	005b      	lsls	r3, r3, #1
 800ac1e:	fbb2 f5f3 	udiv	r5, r2, r3
 800ac22:	f7ff f8b3 	bl	8009d8c <HAL_RCC_GetPCLK2Freq>
 800ac26:	4602      	mov	r2, r0
 800ac28:	4613      	mov	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4413      	add	r3, r2
 800ac2e:	009a      	lsls	r2, r3, #2
 800ac30:	441a      	add	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	005b      	lsls	r3, r3, #1
 800ac38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac3c:	4a7d      	ldr	r2, [pc, #500]	; (800ae34 <UART_SetConfig+0x350>)
 800ac3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac42:	095b      	lsrs	r3, r3, #5
 800ac44:	2264      	movs	r2, #100	; 0x64
 800ac46:	fb02 f303 	mul.w	r3, r2, r3
 800ac4a:	1aeb      	subs	r3, r5, r3
 800ac4c:	00db      	lsls	r3, r3, #3
 800ac4e:	3332      	adds	r3, #50	; 0x32
 800ac50:	4a78      	ldr	r2, [pc, #480]	; (800ae34 <UART_SetConfig+0x350>)
 800ac52:	fba2 2303 	umull	r2, r3, r2, r3
 800ac56:	095b      	lsrs	r3, r3, #5
 800ac58:	f003 0207 	and.w	r2, r3, #7
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4422      	add	r2, r4
 800ac62:	609a      	str	r2, [r3, #8]
 800ac64:	e154      	b.n	800af10 <UART_SetConfig+0x42c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800ac66:	f7ff f86f 	bl	8009d48 <HAL_RCC_GetPCLK1Freq>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	009a      	lsls	r2, r3, #2
 800ac74:	441a      	add	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	005b      	lsls	r3, r3, #1
 800ac7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac80:	4a6c      	ldr	r2, [pc, #432]	; (800ae34 <UART_SetConfig+0x350>)
 800ac82:	fba2 2303 	umull	r2, r3, r2, r3
 800ac86:	095b      	lsrs	r3, r3, #5
 800ac88:	011c      	lsls	r4, r3, #4
 800ac8a:	f7ff f85d 	bl	8009d48 <HAL_RCC_GetPCLK1Freq>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	4613      	mov	r3, r2
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	009a      	lsls	r2, r3, #2
 800ac98:	441a      	add	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	005b      	lsls	r3, r3, #1
 800aca0:	fbb2 f5f3 	udiv	r5, r2, r3
 800aca4:	f7ff f850 	bl	8009d48 <HAL_RCC_GetPCLK1Freq>
 800aca8:	4602      	mov	r2, r0
 800acaa:	4613      	mov	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	009a      	lsls	r2, r3, #2
 800acb2:	441a      	add	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	005b      	lsls	r3, r3, #1
 800acba:	fbb2 f3f3 	udiv	r3, r2, r3
 800acbe:	4a5d      	ldr	r2, [pc, #372]	; (800ae34 <UART_SetConfig+0x350>)
 800acc0:	fba2 2303 	umull	r2, r3, r2, r3
 800acc4:	095b      	lsrs	r3, r3, #5
 800acc6:	2264      	movs	r2, #100	; 0x64
 800acc8:	fb02 f303 	mul.w	r3, r2, r3
 800accc:	1aeb      	subs	r3, r5, r3
 800acce:	00db      	lsls	r3, r3, #3
 800acd0:	3332      	adds	r3, #50	; 0x32
 800acd2:	4a58      	ldr	r2, [pc, #352]	; (800ae34 <UART_SetConfig+0x350>)
 800acd4:	fba2 2303 	umull	r2, r3, r2, r3
 800acd8:	095b      	lsrs	r3, r3, #5
 800acda:	005b      	lsls	r3, r3, #1
 800acdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ace0:	441c      	add	r4, r3
 800ace2:	f7ff f831 	bl	8009d48 <HAL_RCC_GetPCLK1Freq>
 800ace6:	4602      	mov	r2, r0
 800ace8:	4613      	mov	r3, r2
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	4413      	add	r3, r2
 800acee:	009a      	lsls	r2, r3, #2
 800acf0:	441a      	add	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	005b      	lsls	r3, r3, #1
 800acf8:	fbb2 f5f3 	udiv	r5, r2, r3
 800acfc:	f7ff f824 	bl	8009d48 <HAL_RCC_GetPCLK1Freq>
 800ad00:	4602      	mov	r2, r0
 800ad02:	4613      	mov	r3, r2
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4413      	add	r3, r2
 800ad08:	009a      	lsls	r2, r3, #2
 800ad0a:	441a      	add	r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	005b      	lsls	r3, r3, #1
 800ad12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad16:	4a47      	ldr	r2, [pc, #284]	; (800ae34 <UART_SetConfig+0x350>)
 800ad18:	fba2 2303 	umull	r2, r3, r2, r3
 800ad1c:	095b      	lsrs	r3, r3, #5
 800ad1e:	2264      	movs	r2, #100	; 0x64
 800ad20:	fb02 f303 	mul.w	r3, r2, r3
 800ad24:	1aeb      	subs	r3, r5, r3
 800ad26:	00db      	lsls	r3, r3, #3
 800ad28:	3332      	adds	r3, #50	; 0x32
 800ad2a:	4a42      	ldr	r2, [pc, #264]	; (800ae34 <UART_SetConfig+0x350>)
 800ad2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad30:	095b      	lsrs	r3, r3, #5
 800ad32:	f003 0207 	and.w	r2, r3, #7
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4422      	add	r2, r4
 800ad3c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800ad3e:	e0e7      	b.n	800af10 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a39      	ldr	r2, [pc, #228]	; (800ae2c <UART_SetConfig+0x348>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d004      	beq.n	800ad54 <UART_SetConfig+0x270>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a38      	ldr	r2, [pc, #224]	; (800ae30 <UART_SetConfig+0x34c>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d171      	bne.n	800ae38 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800ad54:	f7ff f81a 	bl	8009d8c <HAL_RCC_GetPCLK2Freq>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	4413      	add	r3, r2
 800ad60:	009a      	lsls	r2, r3, #2
 800ad62:	441a      	add	r2, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad6e:	4a31      	ldr	r2, [pc, #196]	; (800ae34 <UART_SetConfig+0x350>)
 800ad70:	fba2 2303 	umull	r2, r3, r2, r3
 800ad74:	095b      	lsrs	r3, r3, #5
 800ad76:	011c      	lsls	r4, r3, #4
 800ad78:	f7ff f808 	bl	8009d8c <HAL_RCC_GetPCLK2Freq>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	4613      	mov	r3, r2
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	4413      	add	r3, r2
 800ad84:	009a      	lsls	r2, r3, #2
 800ad86:	441a      	add	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	fbb2 f5f3 	udiv	r5, r2, r3
 800ad92:	f7fe fffb 	bl	8009d8c <HAL_RCC_GetPCLK2Freq>
 800ad96:	4602      	mov	r2, r0
 800ad98:	4613      	mov	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	009a      	lsls	r2, r3, #2
 800ada0:	441a      	add	r2, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	fbb2 f3f3 	udiv	r3, r2, r3
 800adac:	4a21      	ldr	r2, [pc, #132]	; (800ae34 <UART_SetConfig+0x350>)
 800adae:	fba2 2303 	umull	r2, r3, r2, r3
 800adb2:	095b      	lsrs	r3, r3, #5
 800adb4:	2264      	movs	r2, #100	; 0x64
 800adb6:	fb02 f303 	mul.w	r3, r2, r3
 800adba:	1aeb      	subs	r3, r5, r3
 800adbc:	011b      	lsls	r3, r3, #4
 800adbe:	3332      	adds	r3, #50	; 0x32
 800adc0:	4a1c      	ldr	r2, [pc, #112]	; (800ae34 <UART_SetConfig+0x350>)
 800adc2:	fba2 2303 	umull	r2, r3, r2, r3
 800adc6:	095b      	lsrs	r3, r3, #5
 800adc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800adcc:	441c      	add	r4, r3
 800adce:	f7fe ffdd 	bl	8009d8c <HAL_RCC_GetPCLK2Freq>
 800add2:	4602      	mov	r2, r0
 800add4:	4613      	mov	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	009a      	lsls	r2, r3, #2
 800addc:	441a      	add	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	fbb2 f5f3 	udiv	r5, r2, r3
 800ade8:	f7fe ffd0 	bl	8009d8c <HAL_RCC_GetPCLK2Freq>
 800adec:	4602      	mov	r2, r0
 800adee:	4613      	mov	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4413      	add	r3, r2
 800adf4:	009a      	lsls	r2, r3, #2
 800adf6:	441a      	add	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae02:	4a0c      	ldr	r2, [pc, #48]	; (800ae34 <UART_SetConfig+0x350>)
 800ae04:	fba2 2303 	umull	r2, r3, r2, r3
 800ae08:	095b      	lsrs	r3, r3, #5
 800ae0a:	2264      	movs	r2, #100	; 0x64
 800ae0c:	fb02 f303 	mul.w	r3, r2, r3
 800ae10:	1aeb      	subs	r3, r5, r3
 800ae12:	011b      	lsls	r3, r3, #4
 800ae14:	3332      	adds	r3, #50	; 0x32
 800ae16:	4a07      	ldr	r2, [pc, #28]	; (800ae34 <UART_SetConfig+0x350>)
 800ae18:	fba2 2303 	umull	r2, r3, r2, r3
 800ae1c:	095b      	lsrs	r3, r3, #5
 800ae1e:	f003 020f 	and.w	r2, r3, #15
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4422      	add	r2, r4
 800ae28:	609a      	str	r2, [r3, #8]
 800ae2a:	e071      	b.n	800af10 <UART_SetConfig+0x42c>
 800ae2c:	40011000 	.word	0x40011000
 800ae30:	40011400 	.word	0x40011400
 800ae34:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800ae38:	f7fe ff86 	bl	8009d48 <HAL_RCC_GetPCLK1Freq>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	4613      	mov	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	009a      	lsls	r2, r3, #2
 800ae46:	441a      	add	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae52:	4a31      	ldr	r2, [pc, #196]	; (800af18 <UART_SetConfig+0x434>)
 800ae54:	fba2 2303 	umull	r2, r3, r2, r3
 800ae58:	095b      	lsrs	r3, r3, #5
 800ae5a:	011c      	lsls	r4, r3, #4
 800ae5c:	f7fe ff74 	bl	8009d48 <HAL_RCC_GetPCLK1Freq>
 800ae60:	4602      	mov	r2, r0
 800ae62:	4613      	mov	r3, r2
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	4413      	add	r3, r2
 800ae68:	009a      	lsls	r2, r3, #2
 800ae6a:	441a      	add	r2, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	fbb2 f5f3 	udiv	r5, r2, r3
 800ae76:	f7fe ff67 	bl	8009d48 <HAL_RCC_GetPCLK1Freq>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4413      	add	r3, r2
 800ae82:	009a      	lsls	r2, r3, #2
 800ae84:	441a      	add	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae90:	4a21      	ldr	r2, [pc, #132]	; (800af18 <UART_SetConfig+0x434>)
 800ae92:	fba2 2303 	umull	r2, r3, r2, r3
 800ae96:	095b      	lsrs	r3, r3, #5
 800ae98:	2264      	movs	r2, #100	; 0x64
 800ae9a:	fb02 f303 	mul.w	r3, r2, r3
 800ae9e:	1aeb      	subs	r3, r5, r3
 800aea0:	011b      	lsls	r3, r3, #4
 800aea2:	3332      	adds	r3, #50	; 0x32
 800aea4:	4a1c      	ldr	r2, [pc, #112]	; (800af18 <UART_SetConfig+0x434>)
 800aea6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeaa:	095b      	lsrs	r3, r3, #5
 800aeac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aeb0:	441c      	add	r4, r3
 800aeb2:	f7fe ff49 	bl	8009d48 <HAL_RCC_GetPCLK1Freq>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	4613      	mov	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	009a      	lsls	r2, r3, #2
 800aec0:	441a      	add	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	fbb2 f5f3 	udiv	r5, r2, r3
 800aecc:	f7fe ff3c 	bl	8009d48 <HAL_RCC_GetPCLK1Freq>
 800aed0:	4602      	mov	r2, r0
 800aed2:	4613      	mov	r3, r2
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4413      	add	r3, r2
 800aed8:	009a      	lsls	r2, r3, #2
 800aeda:	441a      	add	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aee6:	4a0c      	ldr	r2, [pc, #48]	; (800af18 <UART_SetConfig+0x434>)
 800aee8:	fba2 2303 	umull	r2, r3, r2, r3
 800aeec:	095b      	lsrs	r3, r3, #5
 800aeee:	2264      	movs	r2, #100	; 0x64
 800aef0:	fb02 f303 	mul.w	r3, r2, r3
 800aef4:	1aeb      	subs	r3, r5, r3
 800aef6:	011b      	lsls	r3, r3, #4
 800aef8:	3332      	adds	r3, #50	; 0x32
 800aefa:	4a07      	ldr	r2, [pc, #28]	; (800af18 <UART_SetConfig+0x434>)
 800aefc:	fba2 2303 	umull	r2, r3, r2, r3
 800af00:	095b      	lsrs	r3, r3, #5
 800af02:	f003 020f 	and.w	r2, r3, #15
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4422      	add	r2, r4
 800af0c:	609a      	str	r2, [r3, #8]
}
 800af0e:	e7ff      	b.n	800af10 <UART_SetConfig+0x42c>
 800af10:	bf00      	nop
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bdb0      	pop	{r4, r5, r7, pc}
 800af18:	51eb851f 	.word	0x51eb851f

0800af1c <__libc_init_array>:
 800af1c:	b570      	push	{r4, r5, r6, lr}
 800af1e:	4e0d      	ldr	r6, [pc, #52]	; (800af54 <__libc_init_array+0x38>)
 800af20:	4c0d      	ldr	r4, [pc, #52]	; (800af58 <__libc_init_array+0x3c>)
 800af22:	1ba4      	subs	r4, r4, r6
 800af24:	10a4      	asrs	r4, r4, #2
 800af26:	2500      	movs	r5, #0
 800af28:	42a5      	cmp	r5, r4
 800af2a:	d109      	bne.n	800af40 <__libc_init_array+0x24>
 800af2c:	4e0b      	ldr	r6, [pc, #44]	; (800af5c <__libc_init_array+0x40>)
 800af2e:	4c0c      	ldr	r4, [pc, #48]	; (800af60 <__libc_init_array+0x44>)
 800af30:	f000 fc78 	bl	800b824 <_init>
 800af34:	1ba4      	subs	r4, r4, r6
 800af36:	10a4      	asrs	r4, r4, #2
 800af38:	2500      	movs	r5, #0
 800af3a:	42a5      	cmp	r5, r4
 800af3c:	d105      	bne.n	800af4a <__libc_init_array+0x2e>
 800af3e:	bd70      	pop	{r4, r5, r6, pc}
 800af40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af44:	4798      	blx	r3
 800af46:	3501      	adds	r5, #1
 800af48:	e7ee      	b.n	800af28 <__libc_init_array+0xc>
 800af4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af4e:	4798      	blx	r3
 800af50:	3501      	adds	r5, #1
 800af52:	e7f2      	b.n	800af3a <__libc_init_array+0x1e>
 800af54:	0800cb64 	.word	0x0800cb64
 800af58:	0800cb64 	.word	0x0800cb64
 800af5c:	0800cb64 	.word	0x0800cb64
 800af60:	0800cb68 	.word	0x0800cb68

0800af64 <memcpy>:
 800af64:	b510      	push	{r4, lr}
 800af66:	1e43      	subs	r3, r0, #1
 800af68:	440a      	add	r2, r1
 800af6a:	4291      	cmp	r1, r2
 800af6c:	d100      	bne.n	800af70 <memcpy+0xc>
 800af6e:	bd10      	pop	{r4, pc}
 800af70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af78:	e7f7      	b.n	800af6a <memcpy+0x6>

0800af7a <memset>:
 800af7a:	4402      	add	r2, r0
 800af7c:	4603      	mov	r3, r0
 800af7e:	4293      	cmp	r3, r2
 800af80:	d100      	bne.n	800af84 <memset+0xa>
 800af82:	4770      	bx	lr
 800af84:	f803 1b01 	strb.w	r1, [r3], #1
 800af88:	e7f9      	b.n	800af7e <memset+0x4>
	...

0800af8c <siprintf>:
 800af8c:	b40e      	push	{r1, r2, r3}
 800af8e:	b500      	push	{lr}
 800af90:	b09c      	sub	sp, #112	; 0x70
 800af92:	ab1d      	add	r3, sp, #116	; 0x74
 800af94:	9002      	str	r0, [sp, #8]
 800af96:	9006      	str	r0, [sp, #24]
 800af98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af9c:	4809      	ldr	r0, [pc, #36]	; (800afc4 <siprintf+0x38>)
 800af9e:	9107      	str	r1, [sp, #28]
 800afa0:	9104      	str	r1, [sp, #16]
 800afa2:	4909      	ldr	r1, [pc, #36]	; (800afc8 <siprintf+0x3c>)
 800afa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800afa8:	9105      	str	r1, [sp, #20]
 800afaa:	6800      	ldr	r0, [r0, #0]
 800afac:	9301      	str	r3, [sp, #4]
 800afae:	a902      	add	r1, sp, #8
 800afb0:	f000 f8a8 	bl	800b104 <_svfiprintf_r>
 800afb4:	9b02      	ldr	r3, [sp, #8]
 800afb6:	2200      	movs	r2, #0
 800afb8:	701a      	strb	r2, [r3, #0]
 800afba:	b01c      	add	sp, #112	; 0x70
 800afbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800afc0:	b003      	add	sp, #12
 800afc2:	4770      	bx	lr
 800afc4:	200007d0 	.word	0x200007d0
 800afc8:	ffff0208 	.word	0xffff0208

0800afcc <strcpy>:
 800afcc:	4603      	mov	r3, r0
 800afce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afd2:	f803 2b01 	strb.w	r2, [r3], #1
 800afd6:	2a00      	cmp	r2, #0
 800afd8:	d1f9      	bne.n	800afce <strcpy+0x2>
 800afda:	4770      	bx	lr

0800afdc <_vsniprintf_r>:
 800afdc:	b530      	push	{r4, r5, lr}
 800afde:	1e14      	subs	r4, r2, #0
 800afe0:	4605      	mov	r5, r0
 800afe2:	b09b      	sub	sp, #108	; 0x6c
 800afe4:	4618      	mov	r0, r3
 800afe6:	da05      	bge.n	800aff4 <_vsniprintf_r+0x18>
 800afe8:	238b      	movs	r3, #139	; 0x8b
 800afea:	602b      	str	r3, [r5, #0]
 800afec:	f04f 30ff 	mov.w	r0, #4294967295
 800aff0:	b01b      	add	sp, #108	; 0x6c
 800aff2:	bd30      	pop	{r4, r5, pc}
 800aff4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aff8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800affc:	bf14      	ite	ne
 800affe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b002:	4623      	moveq	r3, r4
 800b004:	9302      	str	r3, [sp, #8]
 800b006:	9305      	str	r3, [sp, #20]
 800b008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b00c:	9100      	str	r1, [sp, #0]
 800b00e:	9104      	str	r1, [sp, #16]
 800b010:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b014:	4602      	mov	r2, r0
 800b016:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b018:	4669      	mov	r1, sp
 800b01a:	4628      	mov	r0, r5
 800b01c:	f000 f872 	bl	800b104 <_svfiprintf_r>
 800b020:	1c43      	adds	r3, r0, #1
 800b022:	bfbc      	itt	lt
 800b024:	238b      	movlt	r3, #139	; 0x8b
 800b026:	602b      	strlt	r3, [r5, #0]
 800b028:	2c00      	cmp	r4, #0
 800b02a:	d0e1      	beq.n	800aff0 <_vsniprintf_r+0x14>
 800b02c:	9b00      	ldr	r3, [sp, #0]
 800b02e:	2200      	movs	r2, #0
 800b030:	701a      	strb	r2, [r3, #0]
 800b032:	e7dd      	b.n	800aff0 <_vsniprintf_r+0x14>

0800b034 <vsniprintf>:
 800b034:	b507      	push	{r0, r1, r2, lr}
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	4613      	mov	r3, r2
 800b03a:	460a      	mov	r2, r1
 800b03c:	4601      	mov	r1, r0
 800b03e:	4803      	ldr	r0, [pc, #12]	; (800b04c <vsniprintf+0x18>)
 800b040:	6800      	ldr	r0, [r0, #0]
 800b042:	f7ff ffcb 	bl	800afdc <_vsniprintf_r>
 800b046:	b003      	add	sp, #12
 800b048:	f85d fb04 	ldr.w	pc, [sp], #4
 800b04c:	200007d0 	.word	0x200007d0

0800b050 <__ssputs_r>:
 800b050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b054:	688e      	ldr	r6, [r1, #8]
 800b056:	429e      	cmp	r6, r3
 800b058:	4682      	mov	sl, r0
 800b05a:	460c      	mov	r4, r1
 800b05c:	4690      	mov	r8, r2
 800b05e:	4699      	mov	r9, r3
 800b060:	d837      	bhi.n	800b0d2 <__ssputs_r+0x82>
 800b062:	898a      	ldrh	r2, [r1, #12]
 800b064:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b068:	d031      	beq.n	800b0ce <__ssputs_r+0x7e>
 800b06a:	6825      	ldr	r5, [r4, #0]
 800b06c:	6909      	ldr	r1, [r1, #16]
 800b06e:	1a6f      	subs	r7, r5, r1
 800b070:	6965      	ldr	r5, [r4, #20]
 800b072:	2302      	movs	r3, #2
 800b074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b078:	fb95 f5f3 	sdiv	r5, r5, r3
 800b07c:	f109 0301 	add.w	r3, r9, #1
 800b080:	443b      	add	r3, r7
 800b082:	429d      	cmp	r5, r3
 800b084:	bf38      	it	cc
 800b086:	461d      	movcc	r5, r3
 800b088:	0553      	lsls	r3, r2, #21
 800b08a:	d530      	bpl.n	800b0ee <__ssputs_r+0x9e>
 800b08c:	4629      	mov	r1, r5
 800b08e:	f000 fb21 	bl	800b6d4 <_malloc_r>
 800b092:	4606      	mov	r6, r0
 800b094:	b950      	cbnz	r0, 800b0ac <__ssputs_r+0x5c>
 800b096:	230c      	movs	r3, #12
 800b098:	f8ca 3000 	str.w	r3, [sl]
 800b09c:	89a3      	ldrh	r3, [r4, #12]
 800b09e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0a2:	81a3      	strh	r3, [r4, #12]
 800b0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ac:	463a      	mov	r2, r7
 800b0ae:	6921      	ldr	r1, [r4, #16]
 800b0b0:	f7ff ff58 	bl	800af64 <memcpy>
 800b0b4:	89a3      	ldrh	r3, [r4, #12]
 800b0b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b0ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0be:	81a3      	strh	r3, [r4, #12]
 800b0c0:	6126      	str	r6, [r4, #16]
 800b0c2:	6165      	str	r5, [r4, #20]
 800b0c4:	443e      	add	r6, r7
 800b0c6:	1bed      	subs	r5, r5, r7
 800b0c8:	6026      	str	r6, [r4, #0]
 800b0ca:	60a5      	str	r5, [r4, #8]
 800b0cc:	464e      	mov	r6, r9
 800b0ce:	454e      	cmp	r6, r9
 800b0d0:	d900      	bls.n	800b0d4 <__ssputs_r+0x84>
 800b0d2:	464e      	mov	r6, r9
 800b0d4:	4632      	mov	r2, r6
 800b0d6:	4641      	mov	r1, r8
 800b0d8:	6820      	ldr	r0, [r4, #0]
 800b0da:	f000 fa93 	bl	800b604 <memmove>
 800b0de:	68a3      	ldr	r3, [r4, #8]
 800b0e0:	1b9b      	subs	r3, r3, r6
 800b0e2:	60a3      	str	r3, [r4, #8]
 800b0e4:	6823      	ldr	r3, [r4, #0]
 800b0e6:	441e      	add	r6, r3
 800b0e8:	6026      	str	r6, [r4, #0]
 800b0ea:	2000      	movs	r0, #0
 800b0ec:	e7dc      	b.n	800b0a8 <__ssputs_r+0x58>
 800b0ee:	462a      	mov	r2, r5
 800b0f0:	f000 fb4a 	bl	800b788 <_realloc_r>
 800b0f4:	4606      	mov	r6, r0
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d1e2      	bne.n	800b0c0 <__ssputs_r+0x70>
 800b0fa:	6921      	ldr	r1, [r4, #16]
 800b0fc:	4650      	mov	r0, sl
 800b0fe:	f000 fa9b 	bl	800b638 <_free_r>
 800b102:	e7c8      	b.n	800b096 <__ssputs_r+0x46>

0800b104 <_svfiprintf_r>:
 800b104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b108:	461d      	mov	r5, r3
 800b10a:	898b      	ldrh	r3, [r1, #12]
 800b10c:	061f      	lsls	r7, r3, #24
 800b10e:	b09d      	sub	sp, #116	; 0x74
 800b110:	4680      	mov	r8, r0
 800b112:	460c      	mov	r4, r1
 800b114:	4616      	mov	r6, r2
 800b116:	d50f      	bpl.n	800b138 <_svfiprintf_r+0x34>
 800b118:	690b      	ldr	r3, [r1, #16]
 800b11a:	b96b      	cbnz	r3, 800b138 <_svfiprintf_r+0x34>
 800b11c:	2140      	movs	r1, #64	; 0x40
 800b11e:	f000 fad9 	bl	800b6d4 <_malloc_r>
 800b122:	6020      	str	r0, [r4, #0]
 800b124:	6120      	str	r0, [r4, #16]
 800b126:	b928      	cbnz	r0, 800b134 <_svfiprintf_r+0x30>
 800b128:	230c      	movs	r3, #12
 800b12a:	f8c8 3000 	str.w	r3, [r8]
 800b12e:	f04f 30ff 	mov.w	r0, #4294967295
 800b132:	e0c8      	b.n	800b2c6 <_svfiprintf_r+0x1c2>
 800b134:	2340      	movs	r3, #64	; 0x40
 800b136:	6163      	str	r3, [r4, #20]
 800b138:	2300      	movs	r3, #0
 800b13a:	9309      	str	r3, [sp, #36]	; 0x24
 800b13c:	2320      	movs	r3, #32
 800b13e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b142:	2330      	movs	r3, #48	; 0x30
 800b144:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b148:	9503      	str	r5, [sp, #12]
 800b14a:	f04f 0b01 	mov.w	fp, #1
 800b14e:	4637      	mov	r7, r6
 800b150:	463d      	mov	r5, r7
 800b152:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b156:	b10b      	cbz	r3, 800b15c <_svfiprintf_r+0x58>
 800b158:	2b25      	cmp	r3, #37	; 0x25
 800b15a:	d13e      	bne.n	800b1da <_svfiprintf_r+0xd6>
 800b15c:	ebb7 0a06 	subs.w	sl, r7, r6
 800b160:	d00b      	beq.n	800b17a <_svfiprintf_r+0x76>
 800b162:	4653      	mov	r3, sl
 800b164:	4632      	mov	r2, r6
 800b166:	4621      	mov	r1, r4
 800b168:	4640      	mov	r0, r8
 800b16a:	f7ff ff71 	bl	800b050 <__ssputs_r>
 800b16e:	3001      	adds	r0, #1
 800b170:	f000 80a4 	beq.w	800b2bc <_svfiprintf_r+0x1b8>
 800b174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b176:	4453      	add	r3, sl
 800b178:	9309      	str	r3, [sp, #36]	; 0x24
 800b17a:	783b      	ldrb	r3, [r7, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f000 809d 	beq.w	800b2bc <_svfiprintf_r+0x1b8>
 800b182:	2300      	movs	r3, #0
 800b184:	f04f 32ff 	mov.w	r2, #4294967295
 800b188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b18c:	9304      	str	r3, [sp, #16]
 800b18e:	9307      	str	r3, [sp, #28]
 800b190:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b194:	931a      	str	r3, [sp, #104]	; 0x68
 800b196:	462f      	mov	r7, r5
 800b198:	2205      	movs	r2, #5
 800b19a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b19e:	4850      	ldr	r0, [pc, #320]	; (800b2e0 <_svfiprintf_r+0x1dc>)
 800b1a0:	f7f5 f81e 	bl	80001e0 <memchr>
 800b1a4:	9b04      	ldr	r3, [sp, #16]
 800b1a6:	b9d0      	cbnz	r0, 800b1de <_svfiprintf_r+0xda>
 800b1a8:	06d9      	lsls	r1, r3, #27
 800b1aa:	bf44      	itt	mi
 800b1ac:	2220      	movmi	r2, #32
 800b1ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b1b2:	071a      	lsls	r2, r3, #28
 800b1b4:	bf44      	itt	mi
 800b1b6:	222b      	movmi	r2, #43	; 0x2b
 800b1b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b1bc:	782a      	ldrb	r2, [r5, #0]
 800b1be:	2a2a      	cmp	r2, #42	; 0x2a
 800b1c0:	d015      	beq.n	800b1ee <_svfiprintf_r+0xea>
 800b1c2:	9a07      	ldr	r2, [sp, #28]
 800b1c4:	462f      	mov	r7, r5
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	250a      	movs	r5, #10
 800b1ca:	4639      	mov	r1, r7
 800b1cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1d0:	3b30      	subs	r3, #48	; 0x30
 800b1d2:	2b09      	cmp	r3, #9
 800b1d4:	d94d      	bls.n	800b272 <_svfiprintf_r+0x16e>
 800b1d6:	b1b8      	cbz	r0, 800b208 <_svfiprintf_r+0x104>
 800b1d8:	e00f      	b.n	800b1fa <_svfiprintf_r+0xf6>
 800b1da:	462f      	mov	r7, r5
 800b1dc:	e7b8      	b.n	800b150 <_svfiprintf_r+0x4c>
 800b1de:	4a40      	ldr	r2, [pc, #256]	; (800b2e0 <_svfiprintf_r+0x1dc>)
 800b1e0:	1a80      	subs	r0, r0, r2
 800b1e2:	fa0b f000 	lsl.w	r0, fp, r0
 800b1e6:	4318      	orrs	r0, r3
 800b1e8:	9004      	str	r0, [sp, #16]
 800b1ea:	463d      	mov	r5, r7
 800b1ec:	e7d3      	b.n	800b196 <_svfiprintf_r+0x92>
 800b1ee:	9a03      	ldr	r2, [sp, #12]
 800b1f0:	1d11      	adds	r1, r2, #4
 800b1f2:	6812      	ldr	r2, [r2, #0]
 800b1f4:	9103      	str	r1, [sp, #12]
 800b1f6:	2a00      	cmp	r2, #0
 800b1f8:	db01      	blt.n	800b1fe <_svfiprintf_r+0xfa>
 800b1fa:	9207      	str	r2, [sp, #28]
 800b1fc:	e004      	b.n	800b208 <_svfiprintf_r+0x104>
 800b1fe:	4252      	negs	r2, r2
 800b200:	f043 0302 	orr.w	r3, r3, #2
 800b204:	9207      	str	r2, [sp, #28]
 800b206:	9304      	str	r3, [sp, #16]
 800b208:	783b      	ldrb	r3, [r7, #0]
 800b20a:	2b2e      	cmp	r3, #46	; 0x2e
 800b20c:	d10c      	bne.n	800b228 <_svfiprintf_r+0x124>
 800b20e:	787b      	ldrb	r3, [r7, #1]
 800b210:	2b2a      	cmp	r3, #42	; 0x2a
 800b212:	d133      	bne.n	800b27c <_svfiprintf_r+0x178>
 800b214:	9b03      	ldr	r3, [sp, #12]
 800b216:	1d1a      	adds	r2, r3, #4
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	9203      	str	r2, [sp, #12]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	bfb8      	it	lt
 800b220:	f04f 33ff 	movlt.w	r3, #4294967295
 800b224:	3702      	adds	r7, #2
 800b226:	9305      	str	r3, [sp, #20]
 800b228:	4d2e      	ldr	r5, [pc, #184]	; (800b2e4 <_svfiprintf_r+0x1e0>)
 800b22a:	7839      	ldrb	r1, [r7, #0]
 800b22c:	2203      	movs	r2, #3
 800b22e:	4628      	mov	r0, r5
 800b230:	f7f4 ffd6 	bl	80001e0 <memchr>
 800b234:	b138      	cbz	r0, 800b246 <_svfiprintf_r+0x142>
 800b236:	2340      	movs	r3, #64	; 0x40
 800b238:	1b40      	subs	r0, r0, r5
 800b23a:	fa03 f000 	lsl.w	r0, r3, r0
 800b23e:	9b04      	ldr	r3, [sp, #16]
 800b240:	4303      	orrs	r3, r0
 800b242:	3701      	adds	r7, #1
 800b244:	9304      	str	r3, [sp, #16]
 800b246:	7839      	ldrb	r1, [r7, #0]
 800b248:	4827      	ldr	r0, [pc, #156]	; (800b2e8 <_svfiprintf_r+0x1e4>)
 800b24a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b24e:	2206      	movs	r2, #6
 800b250:	1c7e      	adds	r6, r7, #1
 800b252:	f7f4 ffc5 	bl	80001e0 <memchr>
 800b256:	2800      	cmp	r0, #0
 800b258:	d038      	beq.n	800b2cc <_svfiprintf_r+0x1c8>
 800b25a:	4b24      	ldr	r3, [pc, #144]	; (800b2ec <_svfiprintf_r+0x1e8>)
 800b25c:	bb13      	cbnz	r3, 800b2a4 <_svfiprintf_r+0x1a0>
 800b25e:	9b03      	ldr	r3, [sp, #12]
 800b260:	3307      	adds	r3, #7
 800b262:	f023 0307 	bic.w	r3, r3, #7
 800b266:	3308      	adds	r3, #8
 800b268:	9303      	str	r3, [sp, #12]
 800b26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b26c:	444b      	add	r3, r9
 800b26e:	9309      	str	r3, [sp, #36]	; 0x24
 800b270:	e76d      	b.n	800b14e <_svfiprintf_r+0x4a>
 800b272:	fb05 3202 	mla	r2, r5, r2, r3
 800b276:	2001      	movs	r0, #1
 800b278:	460f      	mov	r7, r1
 800b27a:	e7a6      	b.n	800b1ca <_svfiprintf_r+0xc6>
 800b27c:	2300      	movs	r3, #0
 800b27e:	3701      	adds	r7, #1
 800b280:	9305      	str	r3, [sp, #20]
 800b282:	4619      	mov	r1, r3
 800b284:	250a      	movs	r5, #10
 800b286:	4638      	mov	r0, r7
 800b288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b28c:	3a30      	subs	r2, #48	; 0x30
 800b28e:	2a09      	cmp	r2, #9
 800b290:	d903      	bls.n	800b29a <_svfiprintf_r+0x196>
 800b292:	2b00      	cmp	r3, #0
 800b294:	d0c8      	beq.n	800b228 <_svfiprintf_r+0x124>
 800b296:	9105      	str	r1, [sp, #20]
 800b298:	e7c6      	b.n	800b228 <_svfiprintf_r+0x124>
 800b29a:	fb05 2101 	mla	r1, r5, r1, r2
 800b29e:	2301      	movs	r3, #1
 800b2a0:	4607      	mov	r7, r0
 800b2a2:	e7f0      	b.n	800b286 <_svfiprintf_r+0x182>
 800b2a4:	ab03      	add	r3, sp, #12
 800b2a6:	9300      	str	r3, [sp, #0]
 800b2a8:	4622      	mov	r2, r4
 800b2aa:	4b11      	ldr	r3, [pc, #68]	; (800b2f0 <_svfiprintf_r+0x1ec>)
 800b2ac:	a904      	add	r1, sp, #16
 800b2ae:	4640      	mov	r0, r8
 800b2b0:	f3af 8000 	nop.w
 800b2b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b2b8:	4681      	mov	r9, r0
 800b2ba:	d1d6      	bne.n	800b26a <_svfiprintf_r+0x166>
 800b2bc:	89a3      	ldrh	r3, [r4, #12]
 800b2be:	065b      	lsls	r3, r3, #25
 800b2c0:	f53f af35 	bmi.w	800b12e <_svfiprintf_r+0x2a>
 800b2c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2c6:	b01d      	add	sp, #116	; 0x74
 800b2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2cc:	ab03      	add	r3, sp, #12
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	4622      	mov	r2, r4
 800b2d2:	4b07      	ldr	r3, [pc, #28]	; (800b2f0 <_svfiprintf_r+0x1ec>)
 800b2d4:	a904      	add	r1, sp, #16
 800b2d6:	4640      	mov	r0, r8
 800b2d8:	f000 f882 	bl	800b3e0 <_printf_i>
 800b2dc:	e7ea      	b.n	800b2b4 <_svfiprintf_r+0x1b0>
 800b2de:	bf00      	nop
 800b2e0:	0800cb30 	.word	0x0800cb30
 800b2e4:	0800cb36 	.word	0x0800cb36
 800b2e8:	0800cb3a 	.word	0x0800cb3a
 800b2ec:	00000000 	.word	0x00000000
 800b2f0:	0800b051 	.word	0x0800b051

0800b2f4 <_printf_common>:
 800b2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f8:	4691      	mov	r9, r2
 800b2fa:	461f      	mov	r7, r3
 800b2fc:	688a      	ldr	r2, [r1, #8]
 800b2fe:	690b      	ldr	r3, [r1, #16]
 800b300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b304:	4293      	cmp	r3, r2
 800b306:	bfb8      	it	lt
 800b308:	4613      	movlt	r3, r2
 800b30a:	f8c9 3000 	str.w	r3, [r9]
 800b30e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b312:	4606      	mov	r6, r0
 800b314:	460c      	mov	r4, r1
 800b316:	b112      	cbz	r2, 800b31e <_printf_common+0x2a>
 800b318:	3301      	adds	r3, #1
 800b31a:	f8c9 3000 	str.w	r3, [r9]
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	0699      	lsls	r1, r3, #26
 800b322:	bf42      	ittt	mi
 800b324:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b328:	3302      	addmi	r3, #2
 800b32a:	f8c9 3000 	strmi.w	r3, [r9]
 800b32e:	6825      	ldr	r5, [r4, #0]
 800b330:	f015 0506 	ands.w	r5, r5, #6
 800b334:	d107      	bne.n	800b346 <_printf_common+0x52>
 800b336:	f104 0a19 	add.w	sl, r4, #25
 800b33a:	68e3      	ldr	r3, [r4, #12]
 800b33c:	f8d9 2000 	ldr.w	r2, [r9]
 800b340:	1a9b      	subs	r3, r3, r2
 800b342:	42ab      	cmp	r3, r5
 800b344:	dc28      	bgt.n	800b398 <_printf_common+0xa4>
 800b346:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b34a:	6822      	ldr	r2, [r4, #0]
 800b34c:	3300      	adds	r3, #0
 800b34e:	bf18      	it	ne
 800b350:	2301      	movne	r3, #1
 800b352:	0692      	lsls	r2, r2, #26
 800b354:	d42d      	bmi.n	800b3b2 <_printf_common+0xbe>
 800b356:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b35a:	4639      	mov	r1, r7
 800b35c:	4630      	mov	r0, r6
 800b35e:	47c0      	blx	r8
 800b360:	3001      	adds	r0, #1
 800b362:	d020      	beq.n	800b3a6 <_printf_common+0xb2>
 800b364:	6823      	ldr	r3, [r4, #0]
 800b366:	68e5      	ldr	r5, [r4, #12]
 800b368:	f8d9 2000 	ldr.w	r2, [r9]
 800b36c:	f003 0306 	and.w	r3, r3, #6
 800b370:	2b04      	cmp	r3, #4
 800b372:	bf08      	it	eq
 800b374:	1aad      	subeq	r5, r5, r2
 800b376:	68a3      	ldr	r3, [r4, #8]
 800b378:	6922      	ldr	r2, [r4, #16]
 800b37a:	bf0c      	ite	eq
 800b37c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b380:	2500      	movne	r5, #0
 800b382:	4293      	cmp	r3, r2
 800b384:	bfc4      	itt	gt
 800b386:	1a9b      	subgt	r3, r3, r2
 800b388:	18ed      	addgt	r5, r5, r3
 800b38a:	f04f 0900 	mov.w	r9, #0
 800b38e:	341a      	adds	r4, #26
 800b390:	454d      	cmp	r5, r9
 800b392:	d11a      	bne.n	800b3ca <_printf_common+0xd6>
 800b394:	2000      	movs	r0, #0
 800b396:	e008      	b.n	800b3aa <_printf_common+0xb6>
 800b398:	2301      	movs	r3, #1
 800b39a:	4652      	mov	r2, sl
 800b39c:	4639      	mov	r1, r7
 800b39e:	4630      	mov	r0, r6
 800b3a0:	47c0      	blx	r8
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	d103      	bne.n	800b3ae <_printf_common+0xba>
 800b3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ae:	3501      	adds	r5, #1
 800b3b0:	e7c3      	b.n	800b33a <_printf_common+0x46>
 800b3b2:	18e1      	adds	r1, r4, r3
 800b3b4:	1c5a      	adds	r2, r3, #1
 800b3b6:	2030      	movs	r0, #48	; 0x30
 800b3b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3bc:	4422      	add	r2, r4
 800b3be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3c6:	3302      	adds	r3, #2
 800b3c8:	e7c5      	b.n	800b356 <_printf_common+0x62>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	4622      	mov	r2, r4
 800b3ce:	4639      	mov	r1, r7
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	47c0      	blx	r8
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	d0e6      	beq.n	800b3a6 <_printf_common+0xb2>
 800b3d8:	f109 0901 	add.w	r9, r9, #1
 800b3dc:	e7d8      	b.n	800b390 <_printf_common+0x9c>
	...

0800b3e0 <_printf_i>:
 800b3e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	7e09      	ldrb	r1, [r1, #24]
 800b3ec:	b085      	sub	sp, #20
 800b3ee:	296e      	cmp	r1, #110	; 0x6e
 800b3f0:	4617      	mov	r7, r2
 800b3f2:	4606      	mov	r6, r0
 800b3f4:	4698      	mov	r8, r3
 800b3f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3f8:	f000 80b3 	beq.w	800b562 <_printf_i+0x182>
 800b3fc:	d822      	bhi.n	800b444 <_printf_i+0x64>
 800b3fe:	2963      	cmp	r1, #99	; 0x63
 800b400:	d036      	beq.n	800b470 <_printf_i+0x90>
 800b402:	d80a      	bhi.n	800b41a <_printf_i+0x3a>
 800b404:	2900      	cmp	r1, #0
 800b406:	f000 80b9 	beq.w	800b57c <_printf_i+0x19c>
 800b40a:	2958      	cmp	r1, #88	; 0x58
 800b40c:	f000 8083 	beq.w	800b516 <_printf_i+0x136>
 800b410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b414:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b418:	e032      	b.n	800b480 <_printf_i+0xa0>
 800b41a:	2964      	cmp	r1, #100	; 0x64
 800b41c:	d001      	beq.n	800b422 <_printf_i+0x42>
 800b41e:	2969      	cmp	r1, #105	; 0x69
 800b420:	d1f6      	bne.n	800b410 <_printf_i+0x30>
 800b422:	6820      	ldr	r0, [r4, #0]
 800b424:	6813      	ldr	r3, [r2, #0]
 800b426:	0605      	lsls	r5, r0, #24
 800b428:	f103 0104 	add.w	r1, r3, #4
 800b42c:	d52a      	bpl.n	800b484 <_printf_i+0xa4>
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6011      	str	r1, [r2, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	da03      	bge.n	800b43e <_printf_i+0x5e>
 800b436:	222d      	movs	r2, #45	; 0x2d
 800b438:	425b      	negs	r3, r3
 800b43a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b43e:	486f      	ldr	r0, [pc, #444]	; (800b5fc <_printf_i+0x21c>)
 800b440:	220a      	movs	r2, #10
 800b442:	e039      	b.n	800b4b8 <_printf_i+0xd8>
 800b444:	2973      	cmp	r1, #115	; 0x73
 800b446:	f000 809d 	beq.w	800b584 <_printf_i+0x1a4>
 800b44a:	d808      	bhi.n	800b45e <_printf_i+0x7e>
 800b44c:	296f      	cmp	r1, #111	; 0x6f
 800b44e:	d020      	beq.n	800b492 <_printf_i+0xb2>
 800b450:	2970      	cmp	r1, #112	; 0x70
 800b452:	d1dd      	bne.n	800b410 <_printf_i+0x30>
 800b454:	6823      	ldr	r3, [r4, #0]
 800b456:	f043 0320 	orr.w	r3, r3, #32
 800b45a:	6023      	str	r3, [r4, #0]
 800b45c:	e003      	b.n	800b466 <_printf_i+0x86>
 800b45e:	2975      	cmp	r1, #117	; 0x75
 800b460:	d017      	beq.n	800b492 <_printf_i+0xb2>
 800b462:	2978      	cmp	r1, #120	; 0x78
 800b464:	d1d4      	bne.n	800b410 <_printf_i+0x30>
 800b466:	2378      	movs	r3, #120	; 0x78
 800b468:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b46c:	4864      	ldr	r0, [pc, #400]	; (800b600 <_printf_i+0x220>)
 800b46e:	e055      	b.n	800b51c <_printf_i+0x13c>
 800b470:	6813      	ldr	r3, [r2, #0]
 800b472:	1d19      	adds	r1, r3, #4
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	6011      	str	r1, [r2, #0]
 800b478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b47c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b480:	2301      	movs	r3, #1
 800b482:	e08c      	b.n	800b59e <_printf_i+0x1be>
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	6011      	str	r1, [r2, #0]
 800b488:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b48c:	bf18      	it	ne
 800b48e:	b21b      	sxthne	r3, r3
 800b490:	e7cf      	b.n	800b432 <_printf_i+0x52>
 800b492:	6813      	ldr	r3, [r2, #0]
 800b494:	6825      	ldr	r5, [r4, #0]
 800b496:	1d18      	adds	r0, r3, #4
 800b498:	6010      	str	r0, [r2, #0]
 800b49a:	0628      	lsls	r0, r5, #24
 800b49c:	d501      	bpl.n	800b4a2 <_printf_i+0xc2>
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	e002      	b.n	800b4a8 <_printf_i+0xc8>
 800b4a2:	0668      	lsls	r0, r5, #25
 800b4a4:	d5fb      	bpl.n	800b49e <_printf_i+0xbe>
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	4854      	ldr	r0, [pc, #336]	; (800b5fc <_printf_i+0x21c>)
 800b4aa:	296f      	cmp	r1, #111	; 0x6f
 800b4ac:	bf14      	ite	ne
 800b4ae:	220a      	movne	r2, #10
 800b4b0:	2208      	moveq	r2, #8
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b4b8:	6865      	ldr	r5, [r4, #4]
 800b4ba:	60a5      	str	r5, [r4, #8]
 800b4bc:	2d00      	cmp	r5, #0
 800b4be:	f2c0 8095 	blt.w	800b5ec <_printf_i+0x20c>
 800b4c2:	6821      	ldr	r1, [r4, #0]
 800b4c4:	f021 0104 	bic.w	r1, r1, #4
 800b4c8:	6021      	str	r1, [r4, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d13d      	bne.n	800b54a <_printf_i+0x16a>
 800b4ce:	2d00      	cmp	r5, #0
 800b4d0:	f040 808e 	bne.w	800b5f0 <_printf_i+0x210>
 800b4d4:	4665      	mov	r5, ip
 800b4d6:	2a08      	cmp	r2, #8
 800b4d8:	d10b      	bne.n	800b4f2 <_printf_i+0x112>
 800b4da:	6823      	ldr	r3, [r4, #0]
 800b4dc:	07db      	lsls	r3, r3, #31
 800b4de:	d508      	bpl.n	800b4f2 <_printf_i+0x112>
 800b4e0:	6923      	ldr	r3, [r4, #16]
 800b4e2:	6862      	ldr	r2, [r4, #4]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	bfde      	ittt	le
 800b4e8:	2330      	movle	r3, #48	; 0x30
 800b4ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b4ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b4f2:	ebac 0305 	sub.w	r3, ip, r5
 800b4f6:	6123      	str	r3, [r4, #16]
 800b4f8:	f8cd 8000 	str.w	r8, [sp]
 800b4fc:	463b      	mov	r3, r7
 800b4fe:	aa03      	add	r2, sp, #12
 800b500:	4621      	mov	r1, r4
 800b502:	4630      	mov	r0, r6
 800b504:	f7ff fef6 	bl	800b2f4 <_printf_common>
 800b508:	3001      	adds	r0, #1
 800b50a:	d14d      	bne.n	800b5a8 <_printf_i+0x1c8>
 800b50c:	f04f 30ff 	mov.w	r0, #4294967295
 800b510:	b005      	add	sp, #20
 800b512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b516:	4839      	ldr	r0, [pc, #228]	; (800b5fc <_printf_i+0x21c>)
 800b518:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b51c:	6813      	ldr	r3, [r2, #0]
 800b51e:	6821      	ldr	r1, [r4, #0]
 800b520:	1d1d      	adds	r5, r3, #4
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	6015      	str	r5, [r2, #0]
 800b526:	060a      	lsls	r2, r1, #24
 800b528:	d50b      	bpl.n	800b542 <_printf_i+0x162>
 800b52a:	07ca      	lsls	r2, r1, #31
 800b52c:	bf44      	itt	mi
 800b52e:	f041 0120 	orrmi.w	r1, r1, #32
 800b532:	6021      	strmi	r1, [r4, #0]
 800b534:	b91b      	cbnz	r3, 800b53e <_printf_i+0x15e>
 800b536:	6822      	ldr	r2, [r4, #0]
 800b538:	f022 0220 	bic.w	r2, r2, #32
 800b53c:	6022      	str	r2, [r4, #0]
 800b53e:	2210      	movs	r2, #16
 800b540:	e7b7      	b.n	800b4b2 <_printf_i+0xd2>
 800b542:	064d      	lsls	r5, r1, #25
 800b544:	bf48      	it	mi
 800b546:	b29b      	uxthmi	r3, r3
 800b548:	e7ef      	b.n	800b52a <_printf_i+0x14a>
 800b54a:	4665      	mov	r5, ip
 800b54c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b550:	fb02 3311 	mls	r3, r2, r1, r3
 800b554:	5cc3      	ldrb	r3, [r0, r3]
 800b556:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b55a:	460b      	mov	r3, r1
 800b55c:	2900      	cmp	r1, #0
 800b55e:	d1f5      	bne.n	800b54c <_printf_i+0x16c>
 800b560:	e7b9      	b.n	800b4d6 <_printf_i+0xf6>
 800b562:	6813      	ldr	r3, [r2, #0]
 800b564:	6825      	ldr	r5, [r4, #0]
 800b566:	6961      	ldr	r1, [r4, #20]
 800b568:	1d18      	adds	r0, r3, #4
 800b56a:	6010      	str	r0, [r2, #0]
 800b56c:	0628      	lsls	r0, r5, #24
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	d501      	bpl.n	800b576 <_printf_i+0x196>
 800b572:	6019      	str	r1, [r3, #0]
 800b574:	e002      	b.n	800b57c <_printf_i+0x19c>
 800b576:	066a      	lsls	r2, r5, #25
 800b578:	d5fb      	bpl.n	800b572 <_printf_i+0x192>
 800b57a:	8019      	strh	r1, [r3, #0]
 800b57c:	2300      	movs	r3, #0
 800b57e:	6123      	str	r3, [r4, #16]
 800b580:	4665      	mov	r5, ip
 800b582:	e7b9      	b.n	800b4f8 <_printf_i+0x118>
 800b584:	6813      	ldr	r3, [r2, #0]
 800b586:	1d19      	adds	r1, r3, #4
 800b588:	6011      	str	r1, [r2, #0]
 800b58a:	681d      	ldr	r5, [r3, #0]
 800b58c:	6862      	ldr	r2, [r4, #4]
 800b58e:	2100      	movs	r1, #0
 800b590:	4628      	mov	r0, r5
 800b592:	f7f4 fe25 	bl	80001e0 <memchr>
 800b596:	b108      	cbz	r0, 800b59c <_printf_i+0x1bc>
 800b598:	1b40      	subs	r0, r0, r5
 800b59a:	6060      	str	r0, [r4, #4]
 800b59c:	6863      	ldr	r3, [r4, #4]
 800b59e:	6123      	str	r3, [r4, #16]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5a6:	e7a7      	b.n	800b4f8 <_printf_i+0x118>
 800b5a8:	6923      	ldr	r3, [r4, #16]
 800b5aa:	462a      	mov	r2, r5
 800b5ac:	4639      	mov	r1, r7
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	47c0      	blx	r8
 800b5b2:	3001      	adds	r0, #1
 800b5b4:	d0aa      	beq.n	800b50c <_printf_i+0x12c>
 800b5b6:	6823      	ldr	r3, [r4, #0]
 800b5b8:	079b      	lsls	r3, r3, #30
 800b5ba:	d413      	bmi.n	800b5e4 <_printf_i+0x204>
 800b5bc:	68e0      	ldr	r0, [r4, #12]
 800b5be:	9b03      	ldr	r3, [sp, #12]
 800b5c0:	4298      	cmp	r0, r3
 800b5c2:	bfb8      	it	lt
 800b5c4:	4618      	movlt	r0, r3
 800b5c6:	e7a3      	b.n	800b510 <_printf_i+0x130>
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	464a      	mov	r2, r9
 800b5cc:	4639      	mov	r1, r7
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	47c0      	blx	r8
 800b5d2:	3001      	adds	r0, #1
 800b5d4:	d09a      	beq.n	800b50c <_printf_i+0x12c>
 800b5d6:	3501      	adds	r5, #1
 800b5d8:	68e3      	ldr	r3, [r4, #12]
 800b5da:	9a03      	ldr	r2, [sp, #12]
 800b5dc:	1a9b      	subs	r3, r3, r2
 800b5de:	42ab      	cmp	r3, r5
 800b5e0:	dcf2      	bgt.n	800b5c8 <_printf_i+0x1e8>
 800b5e2:	e7eb      	b.n	800b5bc <_printf_i+0x1dc>
 800b5e4:	2500      	movs	r5, #0
 800b5e6:	f104 0919 	add.w	r9, r4, #25
 800b5ea:	e7f5      	b.n	800b5d8 <_printf_i+0x1f8>
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1ac      	bne.n	800b54a <_printf_i+0x16a>
 800b5f0:	7803      	ldrb	r3, [r0, #0]
 800b5f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5fa:	e76c      	b.n	800b4d6 <_printf_i+0xf6>
 800b5fc:	0800cb41 	.word	0x0800cb41
 800b600:	0800cb52 	.word	0x0800cb52

0800b604 <memmove>:
 800b604:	4288      	cmp	r0, r1
 800b606:	b510      	push	{r4, lr}
 800b608:	eb01 0302 	add.w	r3, r1, r2
 800b60c:	d807      	bhi.n	800b61e <memmove+0x1a>
 800b60e:	1e42      	subs	r2, r0, #1
 800b610:	4299      	cmp	r1, r3
 800b612:	d00a      	beq.n	800b62a <memmove+0x26>
 800b614:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b618:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b61c:	e7f8      	b.n	800b610 <memmove+0xc>
 800b61e:	4283      	cmp	r3, r0
 800b620:	d9f5      	bls.n	800b60e <memmove+0xa>
 800b622:	1881      	adds	r1, r0, r2
 800b624:	1ad2      	subs	r2, r2, r3
 800b626:	42d3      	cmn	r3, r2
 800b628:	d100      	bne.n	800b62c <memmove+0x28>
 800b62a:	bd10      	pop	{r4, pc}
 800b62c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b630:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b634:	e7f7      	b.n	800b626 <memmove+0x22>
	...

0800b638 <_free_r>:
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	4605      	mov	r5, r0
 800b63c:	2900      	cmp	r1, #0
 800b63e:	d045      	beq.n	800b6cc <_free_r+0x94>
 800b640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b644:	1f0c      	subs	r4, r1, #4
 800b646:	2b00      	cmp	r3, #0
 800b648:	bfb8      	it	lt
 800b64a:	18e4      	addlt	r4, r4, r3
 800b64c:	f000 f8d2 	bl	800b7f4 <__malloc_lock>
 800b650:	4a1f      	ldr	r2, [pc, #124]	; (800b6d0 <_free_r+0x98>)
 800b652:	6813      	ldr	r3, [r2, #0]
 800b654:	4610      	mov	r0, r2
 800b656:	b933      	cbnz	r3, 800b666 <_free_r+0x2e>
 800b658:	6063      	str	r3, [r4, #4]
 800b65a:	6014      	str	r4, [r2, #0]
 800b65c:	4628      	mov	r0, r5
 800b65e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b662:	f000 b8c8 	b.w	800b7f6 <__malloc_unlock>
 800b666:	42a3      	cmp	r3, r4
 800b668:	d90c      	bls.n	800b684 <_free_r+0x4c>
 800b66a:	6821      	ldr	r1, [r4, #0]
 800b66c:	1862      	adds	r2, r4, r1
 800b66e:	4293      	cmp	r3, r2
 800b670:	bf04      	itt	eq
 800b672:	681a      	ldreq	r2, [r3, #0]
 800b674:	685b      	ldreq	r3, [r3, #4]
 800b676:	6063      	str	r3, [r4, #4]
 800b678:	bf04      	itt	eq
 800b67a:	1852      	addeq	r2, r2, r1
 800b67c:	6022      	streq	r2, [r4, #0]
 800b67e:	6004      	str	r4, [r0, #0]
 800b680:	e7ec      	b.n	800b65c <_free_r+0x24>
 800b682:	4613      	mov	r3, r2
 800b684:	685a      	ldr	r2, [r3, #4]
 800b686:	b10a      	cbz	r2, 800b68c <_free_r+0x54>
 800b688:	42a2      	cmp	r2, r4
 800b68a:	d9fa      	bls.n	800b682 <_free_r+0x4a>
 800b68c:	6819      	ldr	r1, [r3, #0]
 800b68e:	1858      	adds	r0, r3, r1
 800b690:	42a0      	cmp	r0, r4
 800b692:	d10b      	bne.n	800b6ac <_free_r+0x74>
 800b694:	6820      	ldr	r0, [r4, #0]
 800b696:	4401      	add	r1, r0
 800b698:	1858      	adds	r0, r3, r1
 800b69a:	4282      	cmp	r2, r0
 800b69c:	6019      	str	r1, [r3, #0]
 800b69e:	d1dd      	bne.n	800b65c <_free_r+0x24>
 800b6a0:	6810      	ldr	r0, [r2, #0]
 800b6a2:	6852      	ldr	r2, [r2, #4]
 800b6a4:	605a      	str	r2, [r3, #4]
 800b6a6:	4401      	add	r1, r0
 800b6a8:	6019      	str	r1, [r3, #0]
 800b6aa:	e7d7      	b.n	800b65c <_free_r+0x24>
 800b6ac:	d902      	bls.n	800b6b4 <_free_r+0x7c>
 800b6ae:	230c      	movs	r3, #12
 800b6b0:	602b      	str	r3, [r5, #0]
 800b6b2:	e7d3      	b.n	800b65c <_free_r+0x24>
 800b6b4:	6820      	ldr	r0, [r4, #0]
 800b6b6:	1821      	adds	r1, r4, r0
 800b6b8:	428a      	cmp	r2, r1
 800b6ba:	bf04      	itt	eq
 800b6bc:	6811      	ldreq	r1, [r2, #0]
 800b6be:	6852      	ldreq	r2, [r2, #4]
 800b6c0:	6062      	str	r2, [r4, #4]
 800b6c2:	bf04      	itt	eq
 800b6c4:	1809      	addeq	r1, r1, r0
 800b6c6:	6021      	streq	r1, [r4, #0]
 800b6c8:	605c      	str	r4, [r3, #4]
 800b6ca:	e7c7      	b.n	800b65c <_free_r+0x24>
 800b6cc:	bd38      	pop	{r3, r4, r5, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20000968 	.word	0x20000968

0800b6d4 <_malloc_r>:
 800b6d4:	b570      	push	{r4, r5, r6, lr}
 800b6d6:	1ccd      	adds	r5, r1, #3
 800b6d8:	f025 0503 	bic.w	r5, r5, #3
 800b6dc:	3508      	adds	r5, #8
 800b6de:	2d0c      	cmp	r5, #12
 800b6e0:	bf38      	it	cc
 800b6e2:	250c      	movcc	r5, #12
 800b6e4:	2d00      	cmp	r5, #0
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	db01      	blt.n	800b6ee <_malloc_r+0x1a>
 800b6ea:	42a9      	cmp	r1, r5
 800b6ec:	d903      	bls.n	800b6f6 <_malloc_r+0x22>
 800b6ee:	230c      	movs	r3, #12
 800b6f0:	6033      	str	r3, [r6, #0]
 800b6f2:	2000      	movs	r0, #0
 800b6f4:	bd70      	pop	{r4, r5, r6, pc}
 800b6f6:	f000 f87d 	bl	800b7f4 <__malloc_lock>
 800b6fa:	4a21      	ldr	r2, [pc, #132]	; (800b780 <_malloc_r+0xac>)
 800b6fc:	6814      	ldr	r4, [r2, #0]
 800b6fe:	4621      	mov	r1, r4
 800b700:	b991      	cbnz	r1, 800b728 <_malloc_r+0x54>
 800b702:	4c20      	ldr	r4, [pc, #128]	; (800b784 <_malloc_r+0xb0>)
 800b704:	6823      	ldr	r3, [r4, #0]
 800b706:	b91b      	cbnz	r3, 800b710 <_malloc_r+0x3c>
 800b708:	4630      	mov	r0, r6
 800b70a:	f000 f863 	bl	800b7d4 <_sbrk_r>
 800b70e:	6020      	str	r0, [r4, #0]
 800b710:	4629      	mov	r1, r5
 800b712:	4630      	mov	r0, r6
 800b714:	f000 f85e 	bl	800b7d4 <_sbrk_r>
 800b718:	1c43      	adds	r3, r0, #1
 800b71a:	d124      	bne.n	800b766 <_malloc_r+0x92>
 800b71c:	230c      	movs	r3, #12
 800b71e:	6033      	str	r3, [r6, #0]
 800b720:	4630      	mov	r0, r6
 800b722:	f000 f868 	bl	800b7f6 <__malloc_unlock>
 800b726:	e7e4      	b.n	800b6f2 <_malloc_r+0x1e>
 800b728:	680b      	ldr	r3, [r1, #0]
 800b72a:	1b5b      	subs	r3, r3, r5
 800b72c:	d418      	bmi.n	800b760 <_malloc_r+0x8c>
 800b72e:	2b0b      	cmp	r3, #11
 800b730:	d90f      	bls.n	800b752 <_malloc_r+0x7e>
 800b732:	600b      	str	r3, [r1, #0]
 800b734:	50cd      	str	r5, [r1, r3]
 800b736:	18cc      	adds	r4, r1, r3
 800b738:	4630      	mov	r0, r6
 800b73a:	f000 f85c 	bl	800b7f6 <__malloc_unlock>
 800b73e:	f104 000b 	add.w	r0, r4, #11
 800b742:	1d23      	adds	r3, r4, #4
 800b744:	f020 0007 	bic.w	r0, r0, #7
 800b748:	1ac3      	subs	r3, r0, r3
 800b74a:	d0d3      	beq.n	800b6f4 <_malloc_r+0x20>
 800b74c:	425a      	negs	r2, r3
 800b74e:	50e2      	str	r2, [r4, r3]
 800b750:	e7d0      	b.n	800b6f4 <_malloc_r+0x20>
 800b752:	428c      	cmp	r4, r1
 800b754:	684b      	ldr	r3, [r1, #4]
 800b756:	bf16      	itet	ne
 800b758:	6063      	strne	r3, [r4, #4]
 800b75a:	6013      	streq	r3, [r2, #0]
 800b75c:	460c      	movne	r4, r1
 800b75e:	e7eb      	b.n	800b738 <_malloc_r+0x64>
 800b760:	460c      	mov	r4, r1
 800b762:	6849      	ldr	r1, [r1, #4]
 800b764:	e7cc      	b.n	800b700 <_malloc_r+0x2c>
 800b766:	1cc4      	adds	r4, r0, #3
 800b768:	f024 0403 	bic.w	r4, r4, #3
 800b76c:	42a0      	cmp	r0, r4
 800b76e:	d005      	beq.n	800b77c <_malloc_r+0xa8>
 800b770:	1a21      	subs	r1, r4, r0
 800b772:	4630      	mov	r0, r6
 800b774:	f000 f82e 	bl	800b7d4 <_sbrk_r>
 800b778:	3001      	adds	r0, #1
 800b77a:	d0cf      	beq.n	800b71c <_malloc_r+0x48>
 800b77c:	6025      	str	r5, [r4, #0]
 800b77e:	e7db      	b.n	800b738 <_malloc_r+0x64>
 800b780:	20000968 	.word	0x20000968
 800b784:	2000096c 	.word	0x2000096c

0800b788 <_realloc_r>:
 800b788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b78a:	4607      	mov	r7, r0
 800b78c:	4614      	mov	r4, r2
 800b78e:	460e      	mov	r6, r1
 800b790:	b921      	cbnz	r1, 800b79c <_realloc_r+0x14>
 800b792:	4611      	mov	r1, r2
 800b794:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b798:	f7ff bf9c 	b.w	800b6d4 <_malloc_r>
 800b79c:	b922      	cbnz	r2, 800b7a8 <_realloc_r+0x20>
 800b79e:	f7ff ff4b 	bl	800b638 <_free_r>
 800b7a2:	4625      	mov	r5, r4
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7a8:	f000 f826 	bl	800b7f8 <_malloc_usable_size_r>
 800b7ac:	42a0      	cmp	r0, r4
 800b7ae:	d20f      	bcs.n	800b7d0 <_realloc_r+0x48>
 800b7b0:	4621      	mov	r1, r4
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	f7ff ff8e 	bl	800b6d4 <_malloc_r>
 800b7b8:	4605      	mov	r5, r0
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	d0f2      	beq.n	800b7a4 <_realloc_r+0x1c>
 800b7be:	4631      	mov	r1, r6
 800b7c0:	4622      	mov	r2, r4
 800b7c2:	f7ff fbcf 	bl	800af64 <memcpy>
 800b7c6:	4631      	mov	r1, r6
 800b7c8:	4638      	mov	r0, r7
 800b7ca:	f7ff ff35 	bl	800b638 <_free_r>
 800b7ce:	e7e9      	b.n	800b7a4 <_realloc_r+0x1c>
 800b7d0:	4635      	mov	r5, r6
 800b7d2:	e7e7      	b.n	800b7a4 <_realloc_r+0x1c>

0800b7d4 <_sbrk_r>:
 800b7d4:	b538      	push	{r3, r4, r5, lr}
 800b7d6:	4c06      	ldr	r4, [pc, #24]	; (800b7f0 <_sbrk_r+0x1c>)
 800b7d8:	2300      	movs	r3, #0
 800b7da:	4605      	mov	r5, r0
 800b7dc:	4608      	mov	r0, r1
 800b7de:	6023      	str	r3, [r4, #0]
 800b7e0:	f000 f812 	bl	800b808 <_sbrk>
 800b7e4:	1c43      	adds	r3, r0, #1
 800b7e6:	d102      	bne.n	800b7ee <_sbrk_r+0x1a>
 800b7e8:	6823      	ldr	r3, [r4, #0]
 800b7ea:	b103      	cbz	r3, 800b7ee <_sbrk_r+0x1a>
 800b7ec:	602b      	str	r3, [r5, #0]
 800b7ee:	bd38      	pop	{r3, r4, r5, pc}
 800b7f0:	20000b08 	.word	0x20000b08

0800b7f4 <__malloc_lock>:
 800b7f4:	4770      	bx	lr

0800b7f6 <__malloc_unlock>:
 800b7f6:	4770      	bx	lr

0800b7f8 <_malloc_usable_size_r>:
 800b7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7fc:	1f18      	subs	r0, r3, #4
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	bfbc      	itt	lt
 800b802:	580b      	ldrlt	r3, [r1, r0]
 800b804:	18c0      	addlt	r0, r0, r3
 800b806:	4770      	bx	lr

0800b808 <_sbrk>:
 800b808:	4b04      	ldr	r3, [pc, #16]	; (800b81c <_sbrk+0x14>)
 800b80a:	6819      	ldr	r1, [r3, #0]
 800b80c:	4602      	mov	r2, r0
 800b80e:	b909      	cbnz	r1, 800b814 <_sbrk+0xc>
 800b810:	4903      	ldr	r1, [pc, #12]	; (800b820 <_sbrk+0x18>)
 800b812:	6019      	str	r1, [r3, #0]
 800b814:	6818      	ldr	r0, [r3, #0]
 800b816:	4402      	add	r2, r0
 800b818:	601a      	str	r2, [r3, #0]
 800b81a:	4770      	bx	lr
 800b81c:	20000970 	.word	0x20000970
 800b820:	20000b10 	.word	0x20000b10

0800b824 <_init>:
 800b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b826:	bf00      	nop
 800b828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b82a:	bc08      	pop	{r3}
 800b82c:	469e      	mov	lr, r3
 800b82e:	4770      	bx	lr

0800b830 <_fini>:
 800b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b832:	bf00      	nop
 800b834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b836:	bc08      	pop	{r3}
 800b838:	469e      	mov	lr, r3
 800b83a:	4770      	bx	lr
