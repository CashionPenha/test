
VL53L0X_GestureDetect_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012d0  0800abb4  0800abb4  0001abb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800be84  0800be84  0001be84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800be88  0800be88  0001be88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000004b8  20000000  0800be8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002ec  200004b8  0800c344  000204b8  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200007a4  0800c344  000207a4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000204b8  2**0
                  CONTENTS, READONLY
  9 .debug_line   000130e6  00000000  00000000  000204e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00022000  00000000  00000000  000335ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003800  00000000  00000000  000555ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001380  00000000  00000000  00058dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000657df  00000000  00000000  0005a150  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001218  00000000  00000000  000bf930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00013826  00000000  00000000  000c0b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  000d436e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005734  00000000  00000000  000d43ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004b8 	.word	0x200004b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab9c 	.word	0x0800ab9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004bc 	.word	0x200004bc
 80001dc:	0800ab9c 	.word	0x0800ab9c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000284:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000286:	e003      	b.n	8000290 <LoopCopyDataInit>

08000288 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800028a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800028c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800028e:	3104      	adds	r1, #4

08000290 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000290:	480b      	ldr	r0, [pc, #44]	; (80002c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000292:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000294:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000296:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000298:	d3f6      	bcc.n	8000288 <CopyDataInit>
  ldr  r2, =_sbss
 800029a:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800029c:	e002      	b.n	80002a4 <LoopFillZerobss>

0800029e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800029e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002a0:	f842 3b04 	str.w	r3, [r2], #4

080002a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002a4:	4b09      	ldr	r3, [pc, #36]	; (80002cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002a8:	d3f9      	bcc.n	800029e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002aa:	f006 fce3 	bl	8006c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ae:	f009 ffff 	bl	800a2b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002b2:	f000 f9c1 	bl	8000638 <main>
  bx  lr    
 80002b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80002b8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80002bc:	0800be8c 	.word	0x0800be8c
  ldr  r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002c4:	200004b8 	.word	0x200004b8
  ldr  r2, =_sbss
 80002c8:	200004b8 	.word	0x200004b8
  ldr  r3, = _ebss
 80002cc:	200007a4 	.word	0x200007a4

080002d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <ADC_IRQHandler>
	...

080002d4 <VL53L0A1_EXTI_Callback>:
//    }
//    return  HAL_GetTick() - TimeStarted>PressBPSwicthTime;
//
//}

void VL53L0A1_EXTI_Callback(int DevNo, int GPIO_Pin){
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
    IntrCount++;
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <VL53L0A1_EXTI_Callback+0x44>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	3301      	adds	r3, #1
 80002e4:	4a0c      	ldr	r2, [pc, #48]	; (8000318 <VL53L0A1_EXTI_Callback+0x44>)
 80002e6:	6013      	str	r3, [r2, #0]
    LastIntrPin=GPIO_Pin;
 80002e8:	4a0c      	ldr	r2, [pc, #48]	; (800031c <VL53L0A1_EXTI_Callback+0x48>)
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	6013      	str	r3, [r2, #0]
    LastIntrId=DevNo;
 80002ee:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <VL53L0A1_EXTI_Callback+0x4c>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6013      	str	r3, [r2, #0]

    if( DevNo< ARRAY_SIZE(IntrCounts)  ){
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b02      	cmp	r3, #2
 80002f8:	d808      	bhi.n	800030c <VL53L0A1_EXTI_Callback+0x38>
        IntrCounts[DevNo]++;
 80002fa:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <VL53L0A1_EXTI_Callback+0x50>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000302:	1c5a      	adds	r2, r3, #1
 8000304:	4907      	ldr	r1, [pc, #28]	; (8000324 <VL53L0A1_EXTI_Callback+0x50>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	20000648 	.word	0x20000648
 800031c:	20000640 	.word	0x20000640
 8000320:	20000644 	.word	0x20000644
 8000324:	20000634 	.word	0x20000634

08000328 <MX_TIM5_Init>:
 */
TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b08a      	sub	sp, #40	; 0x28
 800032c:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim5.Instance = TIM5;
 800032e:	4b17      	ldr	r3, [pc, #92]	; (800038c <MX_TIM5_Init+0x64>)
 8000330:	4a17      	ldr	r2, [pc, #92]	; (8000390 <MX_TIM5_Init+0x68>)
 8000332:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000334:	4b15      	ldr	r3, [pc, #84]	; (800038c <MX_TIM5_Init+0x64>)
 8000336:	2253      	movs	r2, #83	; 0x53
 8000338:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033a:	4b14      	ldr	r3, [pc, #80]	; (800038c <MX_TIM5_Init+0x64>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 8000340:	4b12      	ldr	r3, [pc, #72]	; (800038c <MX_TIM5_Init+0x64>)
 8000342:	f04f 32ff 	mov.w	r2, #4294967295
 8000346:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000348:	4b10      	ldr	r3, [pc, #64]	; (800038c <MX_TIM5_Init+0x64>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  HAL_TIM_OC_Init(&htim5);
 800034e:	480f      	ldr	r0, [pc, #60]	; (800038c <MX_TIM5_Init+0x64>)
 8000350:	f008 fef1 	bl	8009136 <HAL_TIM_OC_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000354:	2300      	movs	r3, #0
 8000356:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);
 800035c:	f107 0320 	add.w	r3, r7, #32
 8000360:	4619      	mov	r1, r3
 8000362:	480a      	ldr	r0, [pc, #40]	; (800038c <MX_TIM5_Init+0x64>)
 8000364:	f009 f98e 	bl	8009684 <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000368:	2300      	movs	r3, #0
 800036a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
  HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1);
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2200      	movs	r2, #0
 800037c:	4619      	mov	r1, r3
 800037e:	4803      	ldr	r0, [pc, #12]	; (800038c <MX_TIM5_Init+0x64>)
 8000380:	f008 ff04 	bl	800918c <HAL_TIM_OC_ConfigChannel>

}
 8000384:	bf00      	nop
 8000386:	3728      	adds	r7, #40	; 0x28
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	200005f8 	.word	0x200005f8
 8000390:	40000c00 	.word	0x40000c00

08000394 <TimeStamp_Init>:

void TimeStamp_Init(){
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
    MX_TIM5_Init();
 8000398:	f7ff ffc6 	bl	8000328 <MX_TIM5_Init>
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}

080003a0 <TimeStamp_Reset>:

void TimeStamp_Reset(){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim5);
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <TimeStamp_Reset+0x18>)
 80003a6:	f008 feab 	bl	8009100 <HAL_TIM_Base_Start>
    htim5.Instance->CNT=0;
 80003aa:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <TimeStamp_Reset+0x18>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2200      	movs	r2, #0
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200005f8 	.word	0x200005f8

080003bc <TimeStamp_Get>:

uint32_t TimeStamp_Get(){
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
    return htim5.Instance->CNT;
 80003c0:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <TimeStamp_Get+0x14>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	200005f8 	.word	0x200005f8

080003d4 <DetectSensors>:
 * Reset all sensor then goes true presence detection
 *
 * All present devices are data initiated and assigned with their final address
 * @return
 */
void DetectSensors() {//changed from int to void (int SetDisplay)
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
    int FinalAddress;

//    char PresentMsg[5]="    ";
    /* Reset all */
//    for (i = 0; i < 3; i++)
        status = XNUCLEO53L0A1_ResetId(0, 0);
 80003da:	2100      	movs	r1, #0
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 fc61 	bl	8000ca4 <XNUCLEO53L0A1_ResetId>
 80003e2:	60f8      	str	r0, [r7, #12]

    /* detect all sensors (even on-board)*/
//    for (i = 0; i < 3; i++) {
        VL53L0X_Dev_t *pDev;
        pDev = &VL53L0XDevs[0];
 80003e4:	4b3c      	ldr	r3, [pc, #240]	; (80004d8 <DetectSensors+0x104>)
 80003e6:	60bb      	str	r3, [r7, #8]
        pDev->I2cDevAddr = 0x52;
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	2252      	movs	r2, #82	; 0x52
 80003ec:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        pDev->Present = 0;
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	2200      	movs	r2, #0
 80003f4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        status = XNUCLEO53L0A1_ResetId( pDev->Id, 1);//revise
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80003fe:	2101      	movs	r1, #1
 8000400:	4618      	mov	r0, r3
 8000402:	f000 fc4f 	bl	8000ca4 <XNUCLEO53L0A1_ResetId>
 8000406:	60f8      	str	r0, [r7, #12]
        HAL_Delay(2);
 8000408:	2002      	movs	r0, #2
 800040a:	f006 fcc1 	bl	8006d90 <HAL_Delay>
        FinalAddress=0x52+(0+1)*2;
 800040e:	2354      	movs	r3, #84	; 0x54
 8000410:	607b      	str	r3, [r7, #4]

        do {
            /* Try to read one register using default 0x52 address */
            status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 8000412:	1cbb      	adds	r3, r7, #2
 8000414:	461a      	mov	r2, r3
 8000416:	21c0      	movs	r1, #192	; 0xc0
 8000418:	68b8      	ldr	r0, [r7, #8]
 800041a:	f000 fff3 	bl	8001404 <VL53L0X_RdWord>
 800041e:	4603      	mov	r3, r0
 8000420:	60fb      	str	r3, [r7, #12]
            if (status) {
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d004      	beq.n	8000432 <DetectSensors+0x5e>
                debug_printf("#%d Read id fail\n", 0);
 8000428:	2100      	movs	r1, #0
 800042a:	482c      	ldr	r0, [pc, #176]	; (80004dc <DetectSensors+0x108>)
 800042c:	f000 fd8a 	bl	8000f44 <uart_printf>
                break;
 8000430:	e047      	b.n	80004c2 <DetectSensors+0xee>
            }
            if (Id == 0xEEAA) {
 8000432:	887b      	ldrh	r3, [r7, #2]
 8000434:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 8000438:	4293      	cmp	r3, r2
 800043a:	d13a      	bne.n	80004b2 <DetectSensors+0xde>
                /* Sensor is found => Change its I2C address to final one */
                status = VL53L0X_SetDeviceAddress(pDev,FinalAddress);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	b2db      	uxtb	r3, r3
 8000440:	4619      	mov	r1, r3
 8000442:	68b8      	ldr	r0, [r7, #8]
 8000444:	f001 f8a0 	bl	8001588 <VL53L0X_SetDeviceAddress>
 8000448:	4603      	mov	r3, r0
 800044a:	60fb      	str	r3, [r7, #12]
                if (status != 0) {
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d004      	beq.n	800045c <DetectSensors+0x88>
                    debug_printf("#i VL53L0X_SetDeviceAddress fail\n", 0);
 8000452:	2100      	movs	r1, #0
 8000454:	4822      	ldr	r0, [pc, #136]	; (80004e0 <DetectSensors+0x10c>)
 8000456:	f000 fd75 	bl	8000f44 <uart_printf>
                    break;
 800045a:	e032      	b.n	80004c2 <DetectSensors+0xee>
                }
                pDev->I2cDevAddr = FinalAddress;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	b2da      	uxtb	r2, r3
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
                /* Check all is OK with the new I2C address and initialize the sensor */
                status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 8000466:	1cbb      	adds	r3, r7, #2
 8000468:	461a      	mov	r2, r3
 800046a:	21c0      	movs	r1, #192	; 0xc0
 800046c:	68b8      	ldr	r0, [r7, #8]
 800046e:	f000 ffc9 	bl	8001404 <VL53L0X_RdWord>
 8000472:	4603      	mov	r3, r0
 8000474:	60fb      	str	r3, [r7, #12]
                status = VL53L0X_DataInit(pDev);
 8000476:	68b8      	ldr	r0, [r7, #8]
 8000478:	f001 f8ca 	bl	8001610 <VL53L0X_DataInit>
 800047c:	4603      	mov	r3, r0
 800047e:	60fb      	str	r3, [r7, #12]
                if( status == 0 ){
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d110      	bne.n	80004a8 <DetectSensors+0xd4>
                    pDev->Present = 1;
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	2201      	movs	r2, #1
 800048a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                }
                else{
                    debug_printf("VL53L0X_DataInit %d fail\n", 0);
                    break;
                }
                debug_printf("VL53L0X %d Present and initiated to final 0x%x\n", 0, pDev->I2cDevAddr);
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8000494:	461a      	mov	r2, r3
 8000496:	2100      	movs	r1, #0
 8000498:	4812      	ldr	r0, [pc, #72]	; (80004e4 <DetectSensors+0x110>)
 800049a:	f000 fd53 	bl	8000f44 <uart_printf>
//                nDevPresent++;
//                nDevMask |= 1 << 0;
                pDev->Present = 1;
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	2201      	movs	r2, #1
 80004a2:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 80004a6:	e00c      	b.n	80004c2 <DetectSensors+0xee>
                    debug_printf("VL53L0X_DataInit %d fail\n", 0);
 80004a8:	2100      	movs	r1, #0
 80004aa:	480f      	ldr	r0, [pc, #60]	; (80004e8 <DetectSensors+0x114>)
 80004ac:	f000 fd4a 	bl	8000f44 <uart_printf>
                    break;
 80004b0:	e007      	b.n	80004c2 <DetectSensors+0xee>
            }
            else {
                debug_printf("#%d unknown ID %x\n", 0, Id);
 80004b2:	887b      	ldrh	r3, [r7, #2]
 80004b4:	461a      	mov	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	480c      	ldr	r0, [pc, #48]	; (80004ec <DetectSensors+0x118>)
 80004ba:	f000 fd43 	bl	8000f44 <uart_printf>
                status = 1;
 80004be:	2301      	movs	r3, #1
 80004c0:	60fb      	str	r3, [r7, #12]
            }
        } while (0);
        /* if fail r can't use for any reason then put the  device back to reset */
        if (status) {
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d003      	beq.n	80004d0 <DetectSensors+0xfc>
            XNUCLEO53L0A1_ResetId(0, 0);
 80004c8:	2100      	movs	r1, #0
 80004ca:	2000      	movs	r0, #0
 80004cc:	f000 fbea 	bl	8000ca4 <XNUCLEO53L0A1_ResetId>
        }
    }
 80004d0:	bf00      	nop
 80004d2:	3710      	adds	r7, #16
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000000 	.word	0x20000000
 80004dc:	0800abb4 	.word	0x0800abb4
 80004e0:	0800abc8 	.word	0x0800abc8
 80004e4:	0800ac08 	.word	0x0800ac08
 80004e8:	0800abec 	.word	0x0800abec
 80004ec:	0800ac38 	.word	0x0800ac38

080004f0 <SetupSingleShot>:
//}

/**
 *  Setup all sensors for single shot mode
 */
void SetupSingleShot(){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
    uint8_t PhaseCal;
    uint32_t refSpadCount;
    uint8_t isApertureSpads;

//    for( i=0; i<3; i++){
        if( VL53L0XDevs[0].Present){
 80004f6:	4b28      	ldr	r3, [pc, #160]	; (8000598 <SetupSingleShot+0xa8>)
 80004f8:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d046      	beq.n	800058e <SetupSingleShot+0x9e>
            status=VL53L0X_StaticInit(&VL53L0XDevs[0]);
 8000500:	4825      	ldr	r0, [pc, #148]	; (8000598 <SetupSingleShot+0xa8>)
 8000502:	f001 fa13 	bl	800192c <VL53L0X_StaticInit>
 8000506:	4603      	mov	r3, r0
 8000508:	60fb      	str	r3, [r7, #12]
            if( status ){
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d003      	beq.n	8000518 <SetupSingleShot+0x28>
                debug_printf("VL53L0X_StaticInit %d fail",0);
 8000510:	2100      	movs	r1, #0
 8000512:	4822      	ldr	r0, [pc, #136]	; (800059c <SetupSingleShot+0xac>)
 8000514:	f000 fd16 	bl	8000f44 <uart_printf>
            }

            status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[0], &VhvSettings, &PhaseCal);
 8000518:	f107 020a 	add.w	r2, r7, #10
 800051c:	f107 030b 	add.w	r3, r7, #11
 8000520:	4619      	mov	r1, r3
 8000522:	481d      	ldr	r0, [pc, #116]	; (8000598 <SetupSingleShot+0xa8>)
 8000524:	f002 fbf2 	bl	8002d0c <VL53L0X_PerformRefCalibration>
 8000528:	4603      	mov	r3, r0
 800052a:	60fb      	str	r3, [r7, #12]
            if( status ){
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d002      	beq.n	8000538 <SetupSingleShot+0x48>
               debug_printf("VL53L0X_PerformRefCalibration");
 8000532:	481b      	ldr	r0, [pc, #108]	; (80005a0 <SetupSingleShot+0xb0>)
 8000534:	f000 fd06 	bl	8000f44 <uart_printf>
            }

            status = VL53L0X_PerformRefSpadManagement(&VL53L0XDevs[0], &refSpadCount, &isApertureSpads);
 8000538:	1cfa      	adds	r2, r7, #3
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4619      	mov	r1, r3
 800053e:	4816      	ldr	r0, [pc, #88]	; (8000598 <SetupSingleShot+0xa8>)
 8000540:	f003 f9fc 	bl	800393c <VL53L0X_PerformRefSpadManagement>
 8000544:	4603      	mov	r3, r0
 8000546:	60fb      	str	r3, [r7, #12]
            if( status ){
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d002      	beq.n	8000554 <SetupSingleShot+0x64>
               debug_printf("VL53L0X_PerformRefSpadManagement");
 800054e:	4815      	ldr	r0, [pc, #84]	; (80005a4 <SetupSingleShot+0xb4>)
 8000550:	f000 fcf8 	bl	8000f44 <uart_printf>
            }

            status = VL53L0X_SetDeviceMode(&VL53L0XDevs[0], VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 8000554:	2100      	movs	r1, #0
 8000556:	4810      	ldr	r0, [pc, #64]	; (8000598 <SetupSingleShot+0xa8>)
 8000558:	f001 fc50 	bl	8001dfc <VL53L0X_SetDeviceMode>
 800055c:	4603      	mov	r3, r0
 800055e:	60fb      	str	r3, [r7, #12]
            if( status ){
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d002      	beq.n	800056c <SetupSingleShot+0x7c>
               debug_printf("VL53L0X_SetDeviceMode");
 8000566:	4810      	ldr	r0, [pc, #64]	; (80005a8 <SetupSingleShot+0xb8>)
 8000568:	f000 fcec 	bl	8000f44 <uart_printf>
            }

            status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&VL53L0XDevs[0],  20*1000);
 800056c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000570:	4809      	ldr	r0, [pc, #36]	; (8000598 <SetupSingleShot+0xa8>)
 8000572:	f001 fd3d 	bl	8001ff0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8000576:	4603      	mov	r3, r0
 8000578:	60fb      	str	r3, [r7, #12]
            if( status ){
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d002      	beq.n	8000586 <SetupSingleShot+0x96>
               debug_printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds");
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <SetupSingleShot+0xbc>)
 8000582:	f000 fcdf 	bl	8000f44 <uart_printf>
            }
            VL53L0XDevs[0].LeakyFirst=1;
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <SetupSingleShot+0xa8>)
 8000588:	2201      	movs	r2, #1
 800058a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        }
    }
 800058e:	bf00      	nop
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000000 	.word	0x20000000
 800059c:	0800ac4c 	.word	0x0800ac4c
 80005a0:	0800ac68 	.word	0x0800ac68
 80005a4:	0800ac88 	.word	0x0800ac88
 80005a8:	0800acac 	.word	0x0800acac
 80005ac:	0800acc4 	.word	0x0800acc4

080005b0 <Sensor_SetNewRange>:
//        *_digitPtr++ = (i==position) ? (right_notleft ? ']' : '[') : '-';
//    }
//}

/* Store new ranging data into the device structure, apply leaky integrator if needed */
void Sensor_SetNewRange(VL53L0X_Dev_t *pDev, VL53L0X_RangingMeasurementData_t *pRange){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
    if( pRange->RangeStatus == 0 ){
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	7e1b      	ldrb	r3, [r3, #24]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d128      	bne.n	8000614 <Sensor_SetNewRange+0x64>
        pDev->RangeStatus = 0;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        if( pDev->LeakyFirst ){
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00a      	beq.n	80005ea <Sensor_SetNewRange+0x3a>
            pDev->LeakyFirst = 0;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
            pDev->LeakyRange = pRange->RangeMilliMeter;
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	891b      	ldrh	r3, [r3, #8]
 80005e0:	461a      	mov	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    }
    else{
        pDev->RangeStatus = pRange->RangeStatus;
        pDev->LeakyFirst = 1;
    }
}
 80005e8:	e01d      	b.n	8000626 <Sensor_SetNewRange+0x76>
            pDev->LeakyRange = (pDev->LeakyRange*LeakyFactorFix8 + (256-LeakyFactorFix8)*pRange->RangeMilliMeter)>>8;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80005f0:	4a10      	ldr	r2, [pc, #64]	; (8000634 <Sensor_SetNewRange+0x84>)
 80005f2:	6812      	ldr	r2, [r2, #0]
 80005f4:	fb02 f203 	mul.w	r2, r2, r3
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <Sensor_SetNewRange+0x84>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000600:	6839      	ldr	r1, [r7, #0]
 8000602:	8909      	ldrh	r1, [r1, #8]
 8000604:	fb01 f303 	mul.w	r3, r1, r3
 8000608:	4413      	add	r3, r2
 800060a:	121a      	asrs	r2, r3, #8
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
}
 8000612:	e008      	b.n	8000626 <Sensor_SetNewRange+0x76>
        pDev->RangeStatus = pRange->RangeStatus;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	7e1a      	ldrb	r2, [r3, #24]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        pDev->LeakyFirst = 1;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2201      	movs	r2, #1
 8000622:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	200004d4 	.word	0x200004d4

08000638 <main>:


/* USER CODE END 0 */

int main(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b089      	sub	sp, #36	; 0x24
 800063c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
//  int i;
  char StrDisplay[5];
//  int nSensorPresent=0;
  int nSensorEnabled=0;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  int nReady;
  int status;
  uint8_t NewDataReady=0;
 8000642:	2300      	movs	r3, #0
 8000644:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f006 fb4b 	bl	8006ce0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f8bd 	bl	80007c8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f90d 	bl	800086c <MX_GPIO_Init>

  /* Initialize and start timestamping for UART logging */
  TimeStamp_Init();
 8000652:	f7ff fe9f 	bl	8000394 <TimeStamp_Init>
  TimeStamp_Reset();
 8000656:	f7ff fea3 	bl	80003a0 <TimeStamp_Reset>

  /* USER CODE BEGIN 2 */

  XNUCLEO53L0A1_Init();
 800065a:	f000 fa9b 	bl	8000b94 <XNUCLEO53L0A1_Init>

//  uart_printf(WelcomeMsg);
//  XNUCLEO53L0A1_SetDisplayString("53L0");
//  HAL_Delay(WelcomeTime);
//  nSensorPresent = ResetAndDetectSensor(1);
  DetectSensors();
 800065e:	f7ff feb9 	bl	80003d4 <DetectSensors>


  /* Set VL53L0X API trace level */
  VL53L0X_trace_config(NULL, TRACE_MODULE_NONE, TRACE_LEVEL_NONE, TRACE_FUNCTION_NONE); // No Trace
 8000662:	2300      	movs	r3, #0
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	2000      	movs	r0, #0
 800066a:	f006 fab7 	bl	8006bdc <VL53L0X_trace_config>
  //VL53L0X_trace_config(NULL,TRACE_MODULE_ALL, TRACE_LEVEL_ALL, TRACE_FUNCTION_ALL); // Full trace

  /* First enable only the center device */
  VL53L0XDevs[XNUCLEO53L0A1_DEV_LEFT].Enabled = 0;
 800066e:	4b4d      	ldr	r3, [pc, #308]	; (80007a4 <main+0x16c>)
 8000670:	2200      	movs	r2, #0
 8000672:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  VL53L0XDevs[XNUCLEO53L0A1_DEV_CENTER].Enabled = 1;
 8000676:	4b4b      	ldr	r3, [pc, #300]	; (80007a4 <main+0x16c>)
 8000678:	2201      	movs	r2, #1
 800067a:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  VL53L0XDevs[XNUCLEO53L0A1_DEV_RIGHT].Enabled = 0;
 800067e:	4b49      	ldr	r3, [pc, #292]	; (80007a4 <main+0x16c>)
 8000680:	2200      	movs	r2, #0
 8000682:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
//  tof_gestures_initDIRSWIPE_1(400, 0, 1000, false, &gestureDirSwipeData);
//  /* Select which module to debug (code must be compiled with TRACE defined in compiler command line) */
//  TOF_GESTURES_DEBUG_SET_MODULES(NONE); // Could be NONE or TAP_1|TAP_SWIPE_2|DIRSWIPE_1 for instance (or any other combinations);

  /* Setup sensors in single mode */
  SetupSingleShot();
 8000686:	f7ff ff33 	bl	80004f0 <SetupSingleShot>

      /* kick off measure on enabled devices */
//      for( i=0; i<3; i++){
//          if( ! VL53L0XDevs[i].Present  || ! VL53L0XDevs[i].Enabled )
//              continue;
          status = VL53L0X_StartMeasurement(&VL53L0XDevs[0]);
 800068a:	4846      	ldr	r0, [pc, #280]	; (80007a4 <main+0x16c>)
 800068c:	f002 fbe6 	bl	8002e5c <VL53L0X_StartMeasurement>
 8000690:	4603      	mov	r3, r0
 8000692:	60fb      	str	r3, [r7, #12]
          if( status ){
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d003      	beq.n	80006a2 <main+0x6a>
              debug_printf("VL53L0X_StartMeasurement failed on device %d",0);
 800069a:	2100      	movs	r1, #0
 800069c:	4842      	ldr	r0, [pc, #264]	; (80007a8 <main+0x170>)
 800069e:	f000 fc51 	bl	8000f44 <uart_printf>
          }
          VL53L0XDevs[0].Ready=0;
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <main+0x16c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
//      }

      /* wait for all enabled devices to have a measure */
      nReady=0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
      do{
          HAL_Delay(1);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f006 fb6e 	bl	8006d90 <HAL_Delay>
          //for( i=0; i<3; i++){
              /* Skip devices not present or not enabled */
              if( ! VL53L0XDevs[0].Present  || ! VL53L0XDevs[0].Enabled )
 80006b4:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <main+0x16c>)
 80006b6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d04a      	beq.n	8000754 <main+0x11c>
 80006be:	4b39      	ldr	r3, [pc, #228]	; (80007a4 <main+0x16c>)
 80006c0:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d045      	beq.n	8000754 <main+0x11c>
                  continue;
              /* Is new sample ready ? */
              status = VL53L0X_GetMeasurementDataReady(&VL53L0XDevs[0], &NewDataReady);
 80006c8:	1cfb      	adds	r3, r7, #3
 80006ca:	4619      	mov	r1, r3
 80006cc:	4835      	ldr	r0, [pc, #212]	; (80007a4 <main+0x16c>)
 80006ce:	f002 fcaf 	bl	8003030 <VL53L0X_GetMeasurementDataReady>
 80006d2:	4603      	mov	r3, r0
 80006d4:	60fb      	str	r3, [r7, #12]
              if( status ){
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d003      	beq.n	80006e4 <main+0xac>
                  debug_printf("VL53L0X_GetMeasurementDataReady failed on device %d",0);
 80006dc:	2100      	movs	r1, #0
 80006de:	4833      	ldr	r0, [pc, #204]	; (80007ac <main+0x174>)
 80006e0:	f000 fc30 	bl	8000f44 <uart_printf>
              }
              /* Skip if new sample not ready */
              if (NewDataReady == 0)
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d036      	beq.n	8000758 <main+0x120>
                  continue;

              /* Clear Interrupt */
              status = VL53L0X_ClearInterruptMask(&VL53L0XDevs[0], 0);
 80006ea:	2100      	movs	r1, #0
 80006ec:	482d      	ldr	r0, [pc, #180]	; (80007a4 <main+0x16c>)
 80006ee:	f003 f86b 	bl	80037c8 <VL53L0X_ClearInterruptMask>
 80006f2:	4603      	mov	r3, r0
 80006f4:	60fb      	str	r3, [r7, #12]

              /* Otherwise, get new sample data and store */
              status = VL53L0X_GetRangingMeasurementData(&VL53L0XDevs[0], &RangingMeasurementData);
 80006f6:	492e      	ldr	r1, [pc, #184]	; (80007b0 <main+0x178>)
 80006f8:	482a      	ldr	r0, [pc, #168]	; (80007a4 <main+0x16c>)
 80006fa:	f002 fd05 	bl	8003108 <VL53L0X_GetRangingMeasurementData>
 80006fe:	4603      	mov	r3, r0
 8000700:	60fb      	str	r3, [r7, #12]
              if( status ){
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d003      	beq.n	8000710 <main+0xd8>
                  debug_printf("VL53L0X_GetRangingMeasurementData failed on device %d",0);
 8000708:	2100      	movs	r1, #0
 800070a:	482a      	ldr	r0, [pc, #168]	; (80007b4 <main+0x17c>)
 800070c:	f000 fc1a 	bl	8000f44 <uart_printf>
              }
              /* Data logging */
              trace_printf("%d,%u,%d,%d,%d\n", VL53L0XDevs[0].Id, TimeStamp_Get(), RangingMeasurementData.RangeStatus, RangingMeasurementData.RangeMilliMeter, RangingMeasurementData.SignalRateRtnMegaCps);
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <main+0x16c>)
 8000712:	f8d3 4164 	ldr.w	r4, [r3, #356]	; 0x164
 8000716:	f7ff fe51 	bl	80003bc <TimeStamp_Get>
 800071a:	4601      	mov	r1, r0
 800071c:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <main+0x178>)
 800071e:	7e1b      	ldrb	r3, [r3, #24]
 8000720:	4618      	mov	r0, r3
 8000722:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <main+0x178>)
 8000724:	891b      	ldrh	r3, [r3, #8]
 8000726:	461a      	mov	r2, r3
 8000728:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <main+0x178>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	9200      	str	r2, [sp, #0]
 8000730:	4603      	mov	r3, r0
 8000732:	460a      	mov	r2, r1
 8000734:	4621      	mov	r1, r4
 8000736:	4820      	ldr	r0, [pc, #128]	; (80007b8 <main+0x180>)
 8000738:	f000 fc04 	bl	8000f44 <uart_printf>
              Sensor_SetNewRange(&VL53L0XDevs[0],&RangingMeasurementData);
 800073c:	491c      	ldr	r1, [pc, #112]	; (80007b0 <main+0x178>)
 800073e:	4819      	ldr	r0, [pc, #100]	; (80007a4 <main+0x16c>)
 8000740:	f7ff ff36 	bl	80005b0 <Sensor_SetNewRange>
              VL53L0XDevs[0].Ready=1;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <main+0x16c>)
 8000746:	2201      	movs	r2, #1
 8000748:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
              nReady++;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	3301      	adds	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	e002      	b.n	800075a <main+0x122>
                  continue;
 8000754:	bf00      	nop
 8000756:	e000      	b.n	800075a <main+0x122>
                  continue;
 8000758:	bf00      	nop
          }
//      }
      while(nReady<nSensorEnabled);
 800075a:	697a      	ldr	r2, [r7, #20]
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	429a      	cmp	r2, r3
 8000760:	dba5      	blt.n	80006ae <main+0x76>
      /********************************************************************************/
      /* GESTURES : Apply gestures detection functions on the measures                */
      /********************************************************************************/
//      switch(state){
//          case RANGE:
              if( VL53L0XDevs[XNUCLEO53L0A1_DEV_CENTER].RangeStatus == 0 ){
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <main+0x16c>)
 8000764:	f893 3310 	ldrb.w	r3, [r3, #784]	; 0x310
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10e      	bne.n	800078a <main+0x152>
                  sprintf(StrDisplay, "%3dc",(int)VL53L0XDevs[XNUCLEO53L0A1_DEV_CENTER].LeakyRange/10);
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <main+0x16c>)
 800076e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <main+0x184>)
 8000774:	fb82 1203 	smull	r1, r2, r2, r3
 8000778:	1092      	asrs	r2, r2, #2
 800077a:	17db      	asrs	r3, r3, #31
 800077c:	1ad2      	subs	r2, r2, r3
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	490f      	ldr	r1, [pc, #60]	; (80007c0 <main+0x188>)
 8000782:	4618      	mov	r0, r3
 8000784:	f009 fdcc 	bl	800a320 <siprintf>
 8000788:	e77f      	b.n	800068a <main+0x52>
              }else{
                  sprintf(StrDisplay, "r---");
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <main+0x18c>)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000792:	6018      	str	r0, [r3, #0]
 8000794:	3304      	adds	r3, #4
 8000796:	7019      	strb	r1, [r3, #0]
                  StrDisplay[0]=VL53L0XDevs[XNUCLEO53L0A1_DEV_CENTER].DevLetter;
 8000798:	4b02      	ldr	r3, [pc, #8]	; (80007a4 <main+0x16c>)
 800079a:	f893 32f1 	ldrb.w	r3, [r3, #753]	; 0x2f1
 800079e:	713b      	strb	r3, [r7, #4]
          status = VL53L0X_StartMeasurement(&VL53L0XDevs[0]);
 80007a0:	e773      	b.n	800068a <main+0x52>
 80007a2:	bf00      	nop
 80007a4:	20000000 	.word	0x20000000
 80007a8:	0800acf4 	.word	0x0800acf4
 80007ac:	0800ad24 	.word	0x0800ad24
 80007b0:	2000064c 	.word	0x2000064c
 80007b4:	0800ad58 	.word	0x0800ad58
 80007b8:	0800ad90 	.word	0x0800ad90
 80007bc:	66666667 	.word	0x66666667
 80007c0:	0800ada0 	.word	0x0800ada0
 80007c4:	0800ada8 	.word	0x0800ada8

080007c8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
#ifdef STM32F401xE
void SystemClock_Config(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	; 0x50
 80007cc:	af00      	add	r7, sp, #0

    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    RCC_OscInitTypeDef RCC_OscInitStruct;

    __PWR_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b24      	ldr	r3, [pc, #144]	; (8000864 <SystemClock_Config+0x9c>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	4a23      	ldr	r2, [pc, #140]	; (8000864 <SystemClock_Config+0x9c>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	6413      	str	r3, [r2, #64]	; 0x40
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <SystemClock_Config+0x9c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <SystemClock_Config+0xa0>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <SystemClock_Config+0xa0>)
 80007f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007fc:	6013      	str	r3, [r2, #0]
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <SystemClock_Config+0xa0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080a:	2302      	movs	r3, #2
 800080c:	60fb      	str	r3, [r7, #12]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080e:	2301      	movs	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSICalibrationValue = 6;
 8000812:	2306      	movs	r3, #6
 8000814:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLM = 16;
 800081e:	2310      	movs	r3, #16
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000822:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000828:	2304      	movs	r3, #4
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLQ = 7;
 800082c:	2307      	movs	r3, #7
 800082e:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4618      	mov	r0, r3
 8000836:	f008 f86f 	bl	8008918 <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 800083a:	2305      	movs	r3, #5
 800083c:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083e:	2302      	movs	r3, #2
 8000840:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084a:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8000850:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000854:	2102      	movs	r1, #2
 8000856:	4618      	mov	r0, r3
 8000858:	f008 fa72 	bl	8008d40 <HAL_RCC_ClockConfig>

}
 800085c:	bf00      	nop
 800085e:	3750      	adds	r7, #80	; 0x50
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
//  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_GPIO_Init+0x84>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <MX_GPIO_Init+0x84>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_GPIO_Init+0x84>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __GPIOH_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_GPIO_Init+0x84>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <MX_GPIO_Init+0x84>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_GPIO_Init+0x84>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_GPIO_Init+0x84>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a0f      	ldr	r2, [pc, #60]	; (80008f0 <MX_GPIO_Init+0x84>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <MX_GPIO_Init+0x84>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __GPIOB_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_GPIO_Init+0x84>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <MX_GPIO_Init+0x84>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_GPIO_Init+0x84>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
//  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008f8:	2007      	movs	r0, #7
 80008fa:	f006 fb2b 	bl	8006f54 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	f04f 30ff 	mov.w	r0, #4294967295
 8000906:	f006 fb30 	bl	8006f6a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

  if(htim_oc->Instance==TIM2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000920:	d10e      	bne.n	8000940 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __TIM2_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_TIM_OC_MspInit+0x64>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <HAL_TIM_OC_MspInit+0x64>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_TIM_OC_MspInit+0x64>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800093e:	e012      	b.n	8000966 <HAL_TIM_OC_MspInit+0x56>
  else if(htim_oc->Instance==TIM5)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <HAL_TIM_OC_MspInit+0x68>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d10d      	bne.n	8000966 <HAL_TIM_OC_MspInit+0x56>
    __TIM5_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_TIM_OC_MspInit+0x64>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_TIM_OC_MspInit+0x64>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_TIM_OC_MspInit+0x64>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40000c00 	.word	0x40000c00

0800097c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f006 f9ec 	bl	8006d5c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000984:	f006 fb27 	bl	8006fd6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <_I2cFailRecover>:
 *
 * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
 * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
 * this routine does use gpio to manipulate and recover i2c bus line in all cases.
 */
static void _I2cFailRecover(){
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    int i, nRetry=0;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
    // We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
    // by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
    // all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state

    // Enable I/O
    __GPIOB_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	4b4a      	ldr	r3, [pc, #296]	; (8000ac4 <_I2cFailRecover+0x138>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a49      	ldr	r2, [pc, #292]	; (8000ac4 <_I2cFailRecover+0x138>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b47      	ldr	r3, [pc, #284]	; (8000ac4 <_I2cFailRecover+0x138>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009b8:	4843      	ldr	r0, [pc, #268]	; (8000ac8 <_I2cFailRecover+0x13c>)
 80009ba:	f007 f85d 	bl	8007a78 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c4:	4840      	ldr	r0, [pc, #256]	; (8000ac8 <_I2cFailRecover+0x13c>)
 80009c6:	f007 f857 	bl	8007a78 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9 ;
 80009ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009d0:	2311      	movs	r3, #17
 80009d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4619      	mov	r1, r3
 80009de:	483a      	ldr	r0, [pc, #232]	; (8000ac8 <_I2cFailRecover+0x13c>)
 80009e0:	f006 feb0 	bl	8007744 <HAL_GPIO_Init>
    //TODO we could do this faster by not using HAL delay 1ms for clk timing
    do{
        for( i=0; i<10; i++){
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
 80009e8:	e014      	b.n	8000a14 <_I2cFailRecover+0x88>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f0:	4835      	ldr	r0, [pc, #212]	; (8000ac8 <_I2cFailRecover+0x13c>)
 80009f2:	f007 f841 	bl	8007a78 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f006 f9ca 	bl	8006d90 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a02:	4831      	ldr	r0, [pc, #196]	; (8000ac8 <_I2cFailRecover+0x13c>)
 8000a04:	f007 f838 	bl	8007a78 <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f006 f9c1 	bl	8006d90 <HAL_Delay>
        for( i=0; i<10; i++){
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	3301      	adds	r3, #1
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
 8000a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a16:	2b09      	cmp	r3, #9
 8000a18:	dde7      	ble.n	80009ea <_I2cFailRecover+0x5e>
        }
//        if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
//            static int RetryRecover;
//            RetryRecover++;
//        }
    }while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++<7);
 8000a1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1e:	482a      	ldr	r0, [pc, #168]	; (8000ac8 <_I2cFailRecover+0x13c>)
 8000a20:	f007 f812 	bl	8007a48 <HAL_GPIO_ReadPin>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d104      	bne.n	8000a34 <_I2cFailRecover+0xa8>
 8000a2a:	6a3b      	ldr	r3, [r7, #32]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	623a      	str	r2, [r7, #32]
 8000a30:	2b06      	cmp	r3, #6
 8000a32:	ddd7      	ble.n	80009e4 <_I2cFailRecover+0x58>

    if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
 8000a34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a38:	4823      	ldr	r0, [pc, #140]	; (8000ac8 <_I2cFailRecover+0x13c>)
 8000a3a:	f007 f805 	bl	8007a48 <HAL_GPIO_ReadPin>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d13b      	bne.n	8000abc <_I2cFailRecover+0x130>
        __GPIOA_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <_I2cFailRecover+0x138>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ac4 <_I2cFailRecover+0x138>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6313      	str	r3, [r2, #48]	; 0x30
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <_I2cFailRecover+0x138>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
        //We are still in bad i2c state warm user by blinking led but stay here
        GPIO_InitStruct.Pin = GPIO_PIN_5 ;
 8000a60:	2320      	movs	r3, #32
 8000a62:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4619      	mov	r1, r3
 8000a72:	4816      	ldr	r0, [pc, #88]	; (8000acc <_I2cFailRecover+0x140>)
 8000a74:	f006 fe66 	bl	8007744 <HAL_GPIO_Init>
        do{
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	4813      	ldr	r0, [pc, #76]	; (8000acc <_I2cFailRecover+0x140>)
 8000a7e:	f006 fffb 	bl	8007a78 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8000a82:	2021      	movs	r0, #33	; 0x21
 8000a84:	f006 f984 	bl	8006d90 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	480f      	ldr	r0, [pc, #60]	; (8000acc <_I2cFailRecover+0x140>)
 8000a8e:	f006 fff3 	bl	8007a78 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8000a92:	2021      	movs	r0, #33	; 0x21
 8000a94:	f006 f97c 	bl	8006d90 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2120      	movs	r1, #32
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <_I2cFailRecover+0x140>)
 8000a9e:	f006 ffeb 	bl	8007a78 <HAL_GPIO_WritePin>
            HAL_Delay(33);
 8000aa2:	2021      	movs	r0, #33	; 0x21
 8000aa4:	f006 f974 	bl	8006d90 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2120      	movs	r1, #32
 8000aac:	4807      	ldr	r0, [pc, #28]	; (8000acc <_I2cFailRecover+0x140>)
 8000aae:	f006 ffe3 	bl	8007a78 <HAL_GPIO_WritePin>
            HAL_Delay(33*20);
 8000ab2:	f44f 7025 	mov.w	r0, #660	; 0x294
 8000ab6:	f006 f96b 	bl	8006d90 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000aba:	e7dd      	b.n	8000a78 <_I2cFailRecover+0xec>
        }while(1);
    }
}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	40020000 	.word	0x40020000

08000ad0 <XNUCLEO53L0A1_I2C1Configure>:



int XNUCLEO53L0A1_I2C1Configure() {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
    int status;
    GPIO_InitTypeDef GPIO_InitStruct;

    _I2cFailRecover();
 8000ad6:	f7ff ff59 	bl	800098c <_I2cFailRecover>

    /* Peripheral clock enable */
    __GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a27      	ldr	r2, [pc, #156]	; (8000b80 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
    __I2C1_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8000b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <XNUCLEO53L0A1_I2C1Configure+0xb0>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

    /**I2C1 GPIO Configuration\n
     PB8     ------> I2C1_SCL\n
     PB9     ------> I2C1_SDA
     */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000b12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b16:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b18:	2312      	movs	r3, #18
 8000b1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b24:	2304      	movs	r3, #4
 8000b26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4815      	ldr	r0, [pc, #84]	; (8000b84 <XNUCLEO53L0A1_I2C1Configure+0xb4>)
 8000b30:	f006 fe08 	bl	8007744 <HAL_GPIO_Init>

    XNUCLEO53L0A1_hi2c.Instance = I2C1;
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8000b36:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <XNUCLEO53L0A1_I2C1Configure+0xbc>)
 8000b38:	601a      	str	r2, [r3, #0]
#ifdef __STM32F4xx_HAL_H
    XNUCLEO53L0A1_hi2c.Init.ClockSpeed = 400000;
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <XNUCLEO53L0A1_I2C1Configure+0xc0>)
 8000b3e:	605a      	str	r2, [r3, #4]
    XNUCLEO53L0A1_hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
#else
    /* STM32L4xx and L053 */
    XNUCLEO53L0A1_hi2c.Init.Timing = 0x00300F38; /* set 400KHz fast mode i2c*/
#endif
    XNUCLEO53L0A1_hi2c.Init.OwnAddress1 = 0;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
    XNUCLEO53L0A1_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8000b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b52:	611a      	str	r2, [r3, #16]
    XNUCLEO53L0A1_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
    XNUCLEO53L0A1_hi2c.Init.OwnAddress2 = 0;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
    XNUCLEO53L0A1_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
    XNUCLEO53L0A1_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
    status = HAL_I2C_Init(&XNUCLEO53L0A1_hi2c);
 8000b6c:	4806      	ldr	r0, [pc, #24]	; (8000b88 <XNUCLEO53L0A1_I2C1Configure+0xb8>)
 8000b6e:	f006 ffb5 	bl	8007adc <HAL_I2C_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	61fb      	str	r3, [r7, #28]
    return status;
 8000b76:	69fb      	ldr	r3, [r7, #28]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3720      	adds	r7, #32
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020400 	.word	0x40020400
 8000b88:	20000668 	.word	0x20000668
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	00061a80 	.word	0x00061a80

08000b94 <XNUCLEO53L0A1_Init>:
done:
    return status;
}


int XNUCLEO53L0A1_Init(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
    int status;
    uint8_t ExpanderData[2];
    XNUCLEO53L0A1_USART2_UART_Init();
 8000b9a:	f000 fa19 	bl	8000fd0 <XNUCLEO53L0A1_USART2_UART_Init>
    XNUCLEO53L0A1_I2C1Configure();
 8000b9e:	f7ff ff97 	bl	8000ad0 <XNUCLEO53L0A1_I2C1Configure>

    status = _ExpanderRd( I2cExpAddr0, 0, ExpanderData, 2);
 8000ba2:	463a      	mov	r2, r7
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2086      	movs	r0, #134	; 0x86
 8000baa:	f000 f925 	bl	8000df8 <_ExpanderRd>
 8000bae:	6078      	str	r0, [r7, #4]
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d105      	bne.n	8000bc2 <XNUCLEO53L0A1_Init+0x2e>
 8000bb6:	783b      	ldrb	r3, [r7, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <XNUCLEO53L0A1_Init+0x2e>
 8000bbc:	787b      	ldrb	r3, [r7, #1]
 8000bbe:	2b16      	cmp	r3, #22
 8000bc0:	d007      	beq.n	8000bd2 <XNUCLEO53L0A1_Init+0x3e>
        XNUCLEO53L0A1_ErrLog("I2C Expander @0x%02X not detected",(int)I2cExpAddr0 );
 8000bc2:	2386      	movs	r3, #134	; 0x86
 8000bc4:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8000bc8:	4931      	ldr	r1, [pc, #196]	; (8000c90 <XNUCLEO53L0A1_Init+0xfc>)
 8000bca:	4832      	ldr	r0, [pc, #200]	; (8000c94 <XNUCLEO53L0A1_Init+0x100>)
 8000bcc:	f000 f9ba 	bl	8000f44 <uart_printf>
        goto done_err;
 8000bd0:	e058      	b.n	8000c84 <XNUCLEO53L0A1_Init+0xf0>

    }
    status = _ExpanderRd( I2cExpAddr1, 0, ExpanderData, 2);
 8000bd2:	463a      	mov	r2, r7
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2084      	movs	r0, #132	; 0x84
 8000bda:	f000 f90d 	bl	8000df8 <_ExpanderRd>
 8000bde:	6078      	str	r0, [r7, #4]
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d105      	bne.n	8000bf2 <XNUCLEO53L0A1_Init+0x5e>
 8000be6:	783b      	ldrb	r3, [r7, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <XNUCLEO53L0A1_Init+0x5e>
 8000bec:	787b      	ldrb	r3, [r7, #1]
 8000bee:	2b16      	cmp	r3, #22
 8000bf0:	d007      	beq.n	8000c02 <XNUCLEO53L0A1_Init+0x6e>
        XNUCLEO53L0A1_ErrLog("I2C Expander @0x%02X not detected",(int)I2cExpAddr1);
 8000bf2:	2384      	movs	r3, #132	; 0x84
 8000bf4:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8000bf8:	4925      	ldr	r1, [pc, #148]	; (8000c90 <XNUCLEO53L0A1_Init+0xfc>)
 8000bfa:	4826      	ldr	r0, [pc, #152]	; (8000c94 <XNUCLEO53L0A1_Init+0x100>)
 8000bfc:	f000 f9a2 	bl	8000f44 <uart_printf>
        goto done_err;
 8000c00:	e040      	b.n	8000c84 <XNUCLEO53L0A1_Init+0xf0>
    }

    CurIOVal.u32=0x0;
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <XNUCLEO53L0A1_Init+0x104>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
    /* setup expender   i/o direction  all output but exp1 bit 14*/
    ExpanderData[0] = 0xFF;
 8000c08:	23ff      	movs	r3, #255	; 0xff
 8000c0a:	703b      	strb	r3, [r7, #0]
    ExpanderData[1] = 0xFF;
 8000c0c:	23ff      	movs	r3, #255	; 0xff
 8000c0e:	707b      	strb	r3, [r7, #1]
    status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 8000c10:	463a      	mov	r2, r7
 8000c12:	2302      	movs	r3, #2
 8000c14:	2114      	movs	r1, #20
 8000c16:	2086      	movs	r0, #134	; 0x86
 8000c18:	f000 f920 	bl	8000e5c <_ExpanderWR>
 8000c1c:	6078      	str	r0, [r7, #4]
    if (status) {
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d007      	beq.n	8000c34 <XNUCLEO53L0A1_Init+0xa0>
        XNUCLEO53L0A1_ErrLog("Set Expander @0x%02X DR", I2cExpAddr0);
 8000c24:	2386      	movs	r3, #134	; 0x86
 8000c26:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8000c2a:	4919      	ldr	r1, [pc, #100]	; (8000c90 <XNUCLEO53L0A1_Init+0xfc>)
 8000c2c:	481b      	ldr	r0, [pc, #108]	; (8000c9c <XNUCLEO53L0A1_Init+0x108>)
 8000c2e:	f000 f989 	bl	8000f44 <uart_printf>
        goto done_err;
 8000c32:	e027      	b.n	8000c84 <XNUCLEO53L0A1_Init+0xf0>
    }
    ExpanderData[0] = 0xFF;
 8000c34:	23ff      	movs	r3, #255	; 0xff
 8000c36:	703b      	strb	r3, [r7, #0]
    ExpanderData[1] = 0xBF; // all but bit 14-15 that is pb1 and xhurt
 8000c38:	23bf      	movs	r3, #191	; 0xbf
 8000c3a:	707b      	strb	r3, [r7, #1]
    status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 8000c3c:	463a      	mov	r2, r7
 8000c3e:	2302      	movs	r3, #2
 8000c40:	2114      	movs	r1, #20
 8000c42:	2084      	movs	r0, #132	; 0x84
 8000c44:	f000 f90a 	bl	8000e5c <_ExpanderWR>
 8000c48:	6078      	str	r0, [r7, #4]
    if (status) {
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d007      	beq.n	8000c60 <XNUCLEO53L0A1_Init+0xcc>
        XNUCLEO53L0A1_ErrLog("Set Expander @0x%02X DR", I2cExpAddr1);
 8000c50:	2384      	movs	r3, #132	; 0x84
 8000c52:	f240 129f 	movw	r2, #415	; 0x19f
 8000c56:	490e      	ldr	r1, [pc, #56]	; (8000c90 <XNUCLEO53L0A1_Init+0xfc>)
 8000c58:	4810      	ldr	r0, [pc, #64]	; (8000c9c <XNUCLEO53L0A1_Init+0x108>)
 8000c5a:	f000 f973 	bl	8000f44 <uart_printf>
        goto done_err;
 8000c5e:	e011      	b.n	8000c84 <XNUCLEO53L0A1_Init+0xf0>
    }
    /* shut down all segment and all device */
    CurIOVal.u32=0x7F + (0x7F<<7) + (0x7F<<16)+(0x7F<<(16+7));
 8000c60:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <XNUCLEO53L0A1_Init+0x104>)
 8000c62:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8000c66:	601a      	str	r2, [r3, #0]
    status= _ExpandersSetAllIO();
 8000c68:	f000 f8a6 	bl	8000db8 <_ExpandersSetAllIO>
 8000c6c:	6078      	str	r0, [r7, #4]
    if( status ){
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d006      	beq.n	8000c82 <XNUCLEO53L0A1_Init+0xee>
        XNUCLEO53L0A1_ErrLog("Set initial i/o ");
 8000c74:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8000c78:	4905      	ldr	r1, [pc, #20]	; (8000c90 <XNUCLEO53L0A1_Init+0xfc>)
 8000c7a:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <XNUCLEO53L0A1_Init+0x10c>)
 8000c7c:	f000 f962 	bl	8000f44 <uart_printf>
 8000c80:	e000      	b.n	8000c84 <XNUCLEO53L0A1_Init+0xf0>
    }

done_err:
 8000c82:	bf00      	nop
    return status;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	0800afe4 	.word	0x0800afe4
 8000c94:	0800add4 	.word	0x0800add4
 8000c98:	200004d8 	.word	0x200004d8
 8000c9c:	0800ae08 	.word	0x0800ae08
 8000ca0:	0800ae30 	.word	0x0800ae30

08000ca4 <XNUCLEO53L0A1_ResetId>:
    }
    *state = PortValue;
    return status;
}

int XNUCLEO53L0A1_ResetId(int DevNo, int state) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af02      	add	r7, sp, #8
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
    int status;
    switch( DevNo ){
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d03e      	beq.n	8000d32 <XNUCLEO53L0A1_ResetId+0x8e>
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	dc04      	bgt.n	8000cc2 <XNUCLEO53L0A1_ResetId+0x1e>
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d021      	beq.n	8000d00 <XNUCLEO53L0A1_ResetId+0x5c>
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d006      	beq.n	8000cce <XNUCLEO53L0A1_ResetId+0x2a>
 8000cc0:	e050      	b.n	8000d64 <XNUCLEO53L0A1_ResetId+0xc0>
 8000cc2:	2b6c      	cmp	r3, #108	; 0x6c
 8000cc4:	d01c      	beq.n	8000d00 <XNUCLEO53L0A1_ResetId+0x5c>
 8000cc6:	2b72      	cmp	r3, #114	; 0x72
 8000cc8:	d033      	beq.n	8000d32 <XNUCLEO53L0A1_ResetId+0x8e>
 8000cca:	2b63      	cmp	r3, #99	; 0x63
 8000ccc:	d14a      	bne.n	8000d64 <XNUCLEO53L0A1_ResetId+0xc0>
    case XNUCLEO53L0A1_DEV_CENTER :
    case 'c' :
        CurIOVal.bytes[3]&=~0x80; /* bit 15 expender 1  => byte #3 */
 8000cce:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000cd0:	78db      	ldrb	r3, [r3, #3]
 8000cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000cda:	70da      	strb	r2, [r3, #3]
        if( state )
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d006      	beq.n	8000cf0 <XNUCLEO53L0A1_ResetId+0x4c>
            CurIOVal.bytes[3]|=0x80; /* bit 15 expender 1  => byte #3 */
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000ce4:	78db      	ldrb	r3, [r3, #3]
 8000ce6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000cee:	70da      	strb	r2, [r3, #3]
        status= _ExpanderWR(I2cExpAddr1, GPSR+1, &CurIOVal.bytes[3], 1);
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	4a2c      	ldr	r2, [pc, #176]	; (8000da4 <XNUCLEO53L0A1_ResetId+0x100>)
 8000cf4:	2113      	movs	r1, #19
 8000cf6:	2084      	movs	r0, #132	; 0x84
 8000cf8:	f000 f8b0 	bl	8000e5c <_ExpanderWR>
 8000cfc:	60f8      	str	r0, [r7, #12]
        break;
 8000cfe:	e03c      	b.n	8000d7a <XNUCLEO53L0A1_ResetId+0xd6>
    case XNUCLEO53L0A1_DEV_LEFT :
    case 'l' :
        CurIOVal.bytes[1]&=~0x40; /* bit 14 expender 0 => byte #1*/
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000d02:	785b      	ldrb	r3, [r3, #1]
 8000d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000d0c:	705a      	strb	r2, [r3, #1]
        if( state )
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d006      	beq.n	8000d22 <XNUCLEO53L0A1_ResetId+0x7e>
            CurIOVal.bytes[1]|=0x40; /* bit 14 expender 0 => byte #1*/
 8000d14:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000d16:	785b      	ldrb	r3, [r3, #1]
 8000d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000d20:	705a      	strb	r2, [r3, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 8000d22:	2301      	movs	r3, #1
 8000d24:	4a20      	ldr	r2, [pc, #128]	; (8000da8 <XNUCLEO53L0A1_ResetId+0x104>)
 8000d26:	2113      	movs	r1, #19
 8000d28:	2086      	movs	r0, #134	; 0x86
 8000d2a:	f000 f897 	bl	8000e5c <_ExpanderWR>
 8000d2e:	60f8      	str	r0, [r7, #12]
        break;
 8000d30:	e023      	b.n	8000d7a <XNUCLEO53L0A1_ResetId+0xd6>
    case 'r' :
    case XNUCLEO53L0A1_DEV_RIGHT :
        CurIOVal.bytes[1]&=~0x80; /* bit 15 expender 0  => byte #1 */
 8000d32:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000d34:	785b      	ldrb	r3, [r3, #1]
 8000d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000d3e:	705a      	strb	r2, [r3, #1]
        if( state )
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d006      	beq.n	8000d54 <XNUCLEO53L0A1_ResetId+0xb0>
            CurIOVal.bytes[1]|=0x80; /* bit 15 expender 0 => byte #1*/
 8000d46:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000d48:	785b      	ldrb	r3, [r3, #1]
 8000d4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <XNUCLEO53L0A1_ResetId+0xfc>)
 8000d52:	705a      	strb	r2, [r3, #1]
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 8000d54:	2301      	movs	r3, #1
 8000d56:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <XNUCLEO53L0A1_ResetId+0x104>)
 8000d58:	2113      	movs	r1, #19
 8000d5a:	2086      	movs	r0, #134	; 0x86
 8000d5c:	f000 f87e 	bl	8000e5c <_ExpanderWR>
 8000d60:	60f8      	str	r0, [r7, #12]
        break;
 8000d62:	e00a      	b.n	8000d7a <XNUCLEO53L0A1_ResetId+0xd6>
    default:
        XNUCLEO53L0A1_ErrLog("Invalid DevNo %d",DevNo);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8000d6a:	4910      	ldr	r1, [pc, #64]	; (8000dac <XNUCLEO53L0A1_ResetId+0x108>)
 8000d6c:	4810      	ldr	r0, [pc, #64]	; (8000db0 <XNUCLEO53L0A1_ResetId+0x10c>)
 8000d6e:	f000 f8e9 	bl	8000f44 <uart_printf>
        status = -1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	60fb      	str	r3, [r7, #12]
        goto done;
 8000d78:	e00d      	b.n	8000d96 <XNUCLEO53L0A1_ResetId+0xf2>
    }
//error with valid id
    if( status ){
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d009      	beq.n	8000d94 <XNUCLEO53L0A1_ResetId+0xf0>
        XNUCLEO53L0A1_ErrLog("expander i/o error for DevNo %d state %d ",DevNo, state);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <XNUCLEO53L0A1_ResetId+0x108>)
 8000d8c:	4809      	ldr	r0, [pc, #36]	; (8000db4 <XNUCLEO53L0A1_ResetId+0x110>)
 8000d8e:	f000 f8d9 	bl	8000f44 <uart_printf>
 8000d92:	e000      	b.n	8000d96 <XNUCLEO53L0A1_ResetId+0xf2>
    }
done:
 8000d94:	bf00      	nop
    return status;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200004d8 	.word	0x200004d8
 8000da4:	200004db 	.word	0x200004db
 8000da8:	200004d9 	.word	0x200004d9
 8000dac:	0800b010 	.word	0x0800b010
 8000db0:	0800adb0 	.word	0x0800adb0
 8000db4:	0800ae70 	.word	0x0800ae70

08000db8 <_ExpandersSetAllIO>:
}
/**
 * Set all i2c expended gpio in one go
 * @return i/o operation status
 */
static int _ExpandersSetAllIO(void){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
    int status;
    status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <_ExpandersSetAllIO+0x38>)
 8000dc2:	2112      	movs	r1, #18
 8000dc4:	2086      	movs	r0, #134	; 0x86
 8000dc6:	f000 f849 	bl	8000e5c <_ExpanderWR>
 8000dca:	6078      	str	r0, [r7, #4]
    if( status ){
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d107      	bne.n	8000de2 <_ExpandersSetAllIO+0x2a>
        goto done_err;
    }
    status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <_ExpandersSetAllIO+0x3c>)
 8000dd6:	2112      	movs	r1, #18
 8000dd8:	2084      	movs	r0, #132	; 0x84
 8000dda:	f000 f83f 	bl	8000e5c <_ExpanderWR>
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	e000      	b.n	8000de4 <_ExpandersSetAllIO+0x2c>
        goto done_err;
 8000de2:	bf00      	nop
done_err:
    return status;
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200004d8 	.word	0x200004d8
 8000df4:	200004da 	.word	0x200004da

08000df8 <_ExpanderRd>:
 * @param index      register index
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af02      	add	r7, sp, #8
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr;
    RegAddr = index;
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	74fb      	strb	r3, [r7, #19]
    XNUCLEO53L0A1_GetI2cBus();
    do {
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L0A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	b299      	uxth	r1, r3
 8000e10:	f107 0213 	add.w	r2, r7, #19
 8000e14:	2364      	movs	r3, #100	; 0x64
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	480f      	ldr	r0, [pc, #60]	; (8000e58 <_ExpanderRd+0x60>)
 8000e1c:	f006 ff48 	bl	8007cb0 <HAL_I2C_Master_Transmit>
 8000e20:	4603      	mov	r3, r0
 8000e22:	617b      	str	r3, [r7, #20]
        if (status)
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d110      	bne.n	8000e4c <_ExpanderRd+0x54>
            break;
        status = HAL_I2C_Master_Receive(&XNUCLEO53L0A1_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	b299      	uxth	r1, r3
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b298      	uxth	r0, r3
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	2264      	movs	r2, #100	; 0x64
 8000e36:	fb02 f303 	mul.w	r3, r2, r3
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <_ExpanderRd+0x60>)
 8000e42:	f007 f841 	bl	8007ec8 <HAL_I2C_Master_Receive>
 8000e46:	4603      	mov	r3, r0
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	e000      	b.n	8000e4e <_ExpanderRd+0x56>
            break;
 8000e4c:	bf00      	nop
    } while (0);
    XNUCLEO53L0A1_PutI2cBus();
    return status;
 8000e4e:	697b      	ldr	r3, [r7, #20]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000668 	.word	0x20000668

08000e5c <_ExpanderWR>:
 * @param index      register index
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08c      	sub	sp, #48	; 0x30
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0] = index;
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr + 1, data, n_data);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	3301      	adds	r3, #1
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f009 fa3c 	bl	800a2f8 <memcpy>
    XNUCLEO53L0A1_GetI2cBus();
    status = HAL_I2C_Master_Transmit(&XNUCLEO53L0A1_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	b299      	uxth	r1, r3
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	3301      	adds	r3, #1
 8000e8a:	b298      	uxth	r0, r3
 8000e8c:	f107 0214 	add.w	r2, r7, #20
 8000e90:	2364      	movs	r3, #100	; 0x64
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	4603      	mov	r3, r0
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <_ExpanderWR+0x50>)
 8000e98:	f006 ff0a 	bl	8007cb0 <HAL_I2C_Master_Transmit>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    XNUCLEO53L0A1_PutI2cBus();
    return status;
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3728      	adds	r7, #40	; 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000668 	.word	0x20000668

08000eb0 <HAL_UART_TxCpltCallback>:

static volatile int InUsed=0;
static char uart_buffer[256];
static uint32_t UartErrCnt=0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
    // TODO check if any more to send and do it
    InUsed=0;
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HAL_UART_TxCpltCallback+0x1c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200004dc 	.word	0x200004dc

08000ed0 <uart_vprintf>:

int uart_vprintf(const char *msg, va_list ap){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
    int n;
    int status;
    while( InUsed ){
 8000eda:	e000      	b.n	8000ede <uart_vprintf+0xe>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8000edc:	bf30      	wfi
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <uart_vprintf+0x64>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1fa      	bne.n	8000edc <uart_vprintf+0xc>
           //
        __WFI();
    }
    InUsed|=1;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <uart_vprintf+0x64>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <uart_vprintf+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]
    n=vsnprintf(uart_buffer, sizeof(uart_buffer),  msg, ap);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efa:	480f      	ldr	r0, [pc, #60]	; (8000f38 <uart_vprintf+0x68>)
 8000efc:	f009 fa64 	bl	800a3c8 <vsniprintf>
 8000f00:	60f8      	str	r0, [r7, #12]
    status = HAL_UART_Transmit_DMA(&huart2, (uint8_t*)uart_buffer, n );
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	461a      	mov	r2, r3
 8000f08:	490b      	ldr	r1, [pc, #44]	; (8000f38 <uart_vprintf+0x68>)
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <uart_vprintf+0x6c>)
 8000f0c:	f008 fc4c 	bl	80097a8 <HAL_UART_Transmit_DMA>
 8000f10:	4603      	mov	r3, r0
 8000f12:	60bb      	str	r3, [r7, #8]
    if( status ){
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d007      	beq.n	8000f2a <uart_vprintf+0x5a>
        UartErrCnt++;
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <uart_vprintf+0x70>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <uart_vprintf+0x70>)
 8000f22:	6013      	str	r3, [r2, #0]
        InUsed=0;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <uart_vprintf+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
    }
    return n;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200004dc 	.word	0x200004dc
 8000f38:	200004e0 	.word	0x200004e0
 8000f3c:	2000071c 	.word	0x2000071c
 8000f40:	200005e0 	.word	0x200005e0

08000f44 <uart_printf>:

int uart_printf(const char *msg, ...){
 8000f44:	b40f      	push	{r0, r1, r2, r3}
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
	va_list ap;
    int n;
    while( InUsed ){
 8000f4c:	e000      	b.n	8000f50 <uart_printf+0xc>
 8000f4e:	bf30      	wfi
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <uart_printf+0x34>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1fa      	bne.n	8000f4e <uart_printf+0xa>
        //
        __WFI();
    }
    va_start(ap, msg);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	603b      	str	r3, [r7, #0]
    n=uart_vprintf(msg, ap);
 8000f5e:	6839      	ldr	r1, [r7, #0]
 8000f60:	6938      	ldr	r0, [r7, #16]
 8000f62:	f7ff ffb5 	bl	8000ed0 <uart_vprintf>
 8000f66:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return n;
 8000f68:	687b      	ldr	r3, [r7, #4]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f74:	b004      	add	sp, #16
 8000f76:	4770      	bx	lr
 8000f78:	200004dc 	.word	0x200004dc

08000f7c <DMA1_Stream6_IRQHandler>:
#if VL53L0A1_UART_DMA_TX
/**
* @brief This function handles DMA1 stream6 global interrupt.
*/
void DMA1_Stream6_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <DMA1_Stream6_IRQHandler+0x10>)
 8000f82:	f006 f961 	bl	8007248 <HAL_DMA_IRQHandler>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200006bc 	.word	0x200006bc

08000f90 <XNUCLEO53L0A1_DMA_Init>:
#endif  //VL53L0A1_UART_DMA_TX


static void XNUCLEO53L0A1_DMA_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __DMA1_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <XNUCLEO53L0A1_DMA_Init+0x3c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <XNUCLEO53L0A1_DMA_Init+0x3c>)
 8000fa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <XNUCLEO53L0A1_DMA_Init+0x3c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
#if  VL53L0A1_UART_DMA_RX
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, VL53L0A1_UART_DMA_TX_IRQ_PRI, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
#endif
#if  VL53L0A1_UART_DMA_TX
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, VL53L0A1_UART_DMA_TX_IRQ_PRI, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2011      	movs	r0, #17
 8000fb8:	f005 ffd7 	bl	8006f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000fbc:	2011      	movs	r0, #17
 8000fbe:	f005 fff0 	bl	8006fa2 <HAL_NVIC_EnableIRQ>
#endif

}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <XNUCLEO53L0A1_USART2_UART_Init>:
/* USART2 init function */

void XNUCLEO53L0A1_USART2_UART_Init(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

    XNUCLEO53L0A1_DMA_Init();
 8000fd4:	f7ff ffdc 	bl	8000f90 <XNUCLEO53L0A1_DMA_Init>

    huart2.Instance = USART2;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 8000fda:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <XNUCLEO53L0A1_USART2_UART_Init+0x48>)
 8000fdc:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = USART2_BAUD_RATE;
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 8000fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe4:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart2);
 800100a:	4802      	ldr	r0, [pc, #8]	; (8001014 <XNUCLEO53L0A1_USART2_UART_Init+0x44>)
 800100c:	f008 fb7f 	bl	800970e <HAL_UART_Init>


}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000071c 	.word	0x2000071c
 8001018:	40004400 	.word	0x40004400

0800101c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a2a      	ldr	r2, [pc, #168]	; (80010d4 <HAL_UART_MspInit+0xb8>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d14e      	bne.n	80010cc <HAL_UART_MspInit+0xb0>
  {
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <HAL_UART_MspInit+0xbc>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <HAL_UART_MspInit+0xbc>)
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <HAL_UART_MspInit+0xbc>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800104a:	230c      	movs	r3, #12
 800104c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800105a:	2307      	movs	r3, #7
 800105c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	4619      	mov	r1, r3
 8001064:	481d      	ldr	r0, [pc, #116]	; (80010dc <HAL_UART_MspInit+0xc0>)
 8001066:	f006 fb6d 	bl	8007744 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
#if VL53L0A1_UART_DMA_TX
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <HAL_UART_MspInit+0xc4>)
 800106c:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <HAL_UART_MspInit+0xc8>)
 800106e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <HAL_UART_MspInit+0xc4>)
 8001072:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001076:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <HAL_UART_MspInit+0xc4>)
 800107a:	2240      	movs	r2, #64	; 0x40
 800107c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_UART_MspInit+0xc4>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <HAL_UART_MspInit+0xc4>)
 8001086:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800108a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_UART_MspInit+0xc4>)
 800108e:	2200      	movs	r2, #0
 8001090:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <HAL_UART_MspInit+0xc4>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_UART_MspInit+0xc4>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_UART_MspInit+0xc4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_UART_MspInit+0xc4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_DMA_Init(&hdma_usart2_tx);
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <HAL_UART_MspInit+0xc4>)
 80010ac:	f005 ffa0 	bl	8006ff0 <HAL_DMA_Init>

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <HAL_UART_MspInit+0xc4>)
 80010b4:	631a      	str	r2, [r3, #48]	; 0x30
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <HAL_UART_MspInit+0xc4>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    HAL_DMA_Init(&hdma_usart2_rx);

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
#endif
    HAL_NVIC_SetPriority(USART2_IRQn, VL53L0A1_UART_IRQ_PRI, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	2026      	movs	r0, #38	; 0x26
 80010c2:	f005 ff52 	bl	8006f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010c6:	2026      	movs	r0, #38	; 0x26
 80010c8:	f005 ff6b 	bl	8006fa2 <HAL_NVIC_EnableIRQ>
  }
}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40004400 	.word	0x40004400
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	200006bc 	.word	0x200006bc
 80010e4:	400260a0 	.word	0x400260a0

080010e8 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <USART2_IRQHandler+0x10>)
 80010ee:	f008 fbc7 	bl	8009880 <HAL_UART_IRQHandler>
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000071c 	.word	0x2000071c

080010fc <HAL_GPIO_EXTI_Callback>:

/**
 * HAl Callback for EXTI
 * @param GPIO_Pin The GPIO pin EXTI was invoked
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
#if VL53L0A1_GPIO1_SHARED
    if( GPIO_Pin == VL53L0A1_GPIO1_C_GPIO_PIN ){
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_CENTER, GPIO_Pin);
    }
#else
    switch(  GPIO_Pin  ){
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	2b80      	cmp	r3, #128	; 0x80
 800110a:	d00b      	beq.n	8001124 <HAL_GPIO_EXTI_Callback+0x28>
 800110c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001110:	d00e      	beq.n	8001130 <HAL_GPIO_EXTI_Callback+0x34>
 8001112:	2b10      	cmp	r3, #16
 8001114:	d000      	beq.n	8001118 <HAL_GPIO_EXTI_Callback+0x1c>
    case VL53L0A1_GPIO1_R_GPIO_PIN :
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_RIGHT, GPIO_Pin);
        break;

    default:
        break;
 8001116:	e011      	b.n	800113c <HAL_GPIO_EXTI_Callback+0x40>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_CENTER, GPIO_Pin);
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	4619      	mov	r1, r3
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff f8d9 	bl	80002d4 <VL53L0A1_EXTI_Callback>
        break;
 8001122:	e00b      	b.n	800113c <HAL_GPIO_EXTI_Callback+0x40>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_LEFT, GPIO_Pin);
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	4619      	mov	r1, r3
 8001128:	2000      	movs	r0, #0
 800112a:	f7ff f8d3 	bl	80002d4 <VL53L0A1_EXTI_Callback>
        break;
 800112e:	e005      	b.n	800113c <HAL_GPIO_EXTI_Callback+0x40>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_RIGHT, GPIO_Pin);
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	4619      	mov	r1, r3
 8001134:	2002      	movs	r0, #2
 8001136:	f7ff f8cd 	bl	80002d4 <VL53L0A1_EXTI_Callback>
        break;
 800113a:	bf00      	nop
    }
#endif
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <EXTI4_IRQHandler>:
 * interrupt Handler for EXTI lines 4
 *
 * @note is only implemented if needed by configuration
 */
void EXTI4_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI4_USE_PIN);
 8001148:	2010      	movs	r0, #16
 800114a:	f006 fcaf 	bl	8007aac <HAL_GPIO_EXTI_IRQHandler>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}

08001152 <EXTI9_5_IRQHandler>:
 * @warning this handler assume ther's no shared pin on the EXTI
 * For share interrupt  end user must fix this code to find the originating pins
 * and dispatch accordingly see __HAL_GPIO_EXTI_GET_FLAG  etc ..
 */
void EXTI9_5_IRQHandler(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI9_5_USE_PIN);
 8001156:	2080      	movs	r0, #128	; 0x80
 8001158:	f006 fca8 	bl	8007aac <HAL_GPIO_EXTI_IRQHandler>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <EXTI15_10_IRQHandler>:
 * @note is only implemented if needed by configuration
 * @warning this handler assume ther's no shared pin on the EXTI
 * For share interrupt  end user must fix this code to find the originating pins
 * and dispatch accordingly see __HAL_GPIO_EXTI_GET_FLAG  etc ..
 */
void EXTI15_10_IRQHandler(void){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI15_10_USE_PIN);
 8001164:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001168:	f006 fca0 	bl	8007aac <HAL_GPIO_EXTI_IRQHandler>
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af02      	add	r7, sp, #8
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	330a      	adds	r3, #10
 8001180:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800118e:	b299      	uxth	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	b29a      	uxth	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	4613      	mov	r3, r2
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f006 fd88 	bl	8007cb0 <HAL_I2C_Master_Transmit>
 80011a0:	4603      	mov	r3, r0
 80011a2:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80011a4:	693b      	ldr	r3, [r7, #16]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b088      	sub	sp, #32
 80011b2:	af02      	add	r7, sp, #8
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	330a      	adds	r3, #10
 80011be:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	b299      	uxth	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	4613      	mov	r3, r2
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f006 fe72 	bl	8007ec8 <HAL_I2C_Master_Receive>
 80011e4:	4603      	mov	r3, r0
 80011e6:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80011e8:	693b      	ldr	r3, [r7, #16]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	460b      	mov	r3, r1
 8001202:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001204:	2300      	movs	r3, #0
 8001206:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	2b3f      	cmp	r3, #63	; 0x3f
 800120c:	d902      	bls.n	8001214 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800120e:	f06f 0303 	mvn.w	r3, #3
 8001212:	e016      	b.n	8001242 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <VL53L0X_WriteMulti+0x58>)
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	480c      	ldr	r0, [pc, #48]	; (8001250 <VL53L0X_WriteMulti+0x5c>)
 8001220:	f009 f86a 	bl	800a2f8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	461a      	mov	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <VL53L0X_WriteMulti+0x58>)
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f7ff ff9f 	bl	8001170 <_I2CWrite>
 8001232:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800123a:	23ec      	movs	r3, #236	; 0xec
 800123c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800123e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2000075c 	.word	0x2000075c
 8001250:	2000075d 	.word	0x2000075d

08001254 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	460b      	mov	r3, r1
 8001262:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001264:	2300      	movs	r3, #0
 8001266:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001268:	f107 030b 	add.w	r3, r7, #11
 800126c:	2201      	movs	r2, #1
 800126e:	4619      	mov	r1, r3
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f7ff ff7d 	bl	8001170 <_I2CWrite>
 8001276:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800127e:	23ec      	movs	r3, #236	; 0xec
 8001280:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001282:	e00c      	b.n	800129e <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f7ff ff90 	bl	80011ae <_I2CRead>
 800128e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d002      	beq.n	800129c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001296:	23ec      	movs	r3, #236	; 0xec
 8001298:	75fb      	strb	r3, [r7, #23]
 800129a:	e000      	b.n	800129e <VL53L0X_ReadMulti+0x4a>
    }
done:
 800129c:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800129e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
 80012b8:	4613      	mov	r3, r2
 80012ba:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80012c0:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <VL53L0X_WrByte+0x44>)
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <VL53L0X_WrByte+0x44>)
 80012c8:	78bb      	ldrb	r3, [r7, #2]
 80012ca:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80012cc:	2202      	movs	r2, #2
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <VL53L0X_WrByte+0x44>)
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff4d 	bl	8001170 <_I2CWrite>
 80012d6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80012de:	23ec      	movs	r3, #236	; 0xec
 80012e0:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000075c 	.word	0x2000075c

080012f4 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
 8001300:	4613      	mov	r3, r2
 8001302:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001304:	2300      	movs	r3, #0
 8001306:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8001308:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <VL53L0X_WrWord+0x50>)
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800130e:	883b      	ldrh	r3, [r7, #0]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	b29b      	uxth	r3, r3
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <VL53L0X_WrWord+0x50>)
 8001318:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800131a:	883b      	ldrh	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <VL53L0X_WrWord+0x50>)
 8001320:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8001322:	2203      	movs	r2, #3
 8001324:	4907      	ldr	r1, [pc, #28]	; (8001344 <VL53L0X_WrWord+0x50>)
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff22 	bl	8001170 <_I2CWrite>
 800132c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001334:	23ec      	movs	r3, #236	; 0xec
 8001336:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8001338:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000075c 	.word	0x2000075c

08001348 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	4608      	mov	r0, r1
 8001352:	4611      	mov	r1, r2
 8001354:	461a      	mov	r2, r3
 8001356:	4603      	mov	r3, r0
 8001358:	70fb      	strb	r3, [r7, #3]
 800135a:	460b      	mov	r3, r1
 800135c:	70bb      	strb	r3, [r7, #2]
 800135e:	4613      	mov	r3, r2
 8001360:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001362:	2300      	movs	r3, #0
 8001364:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8001366:	f107 020e 	add.w	r2, r7, #14
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	4619      	mov	r1, r3
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f81e 	bl	80013b0 <VL53L0X_RdByte>
 8001374:	4603      	mov	r3, r0
 8001376:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8001378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d110      	bne.n	80013a2 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8001380:	7bba      	ldrb	r2, [r7, #14]
 8001382:	78bb      	ldrb	r3, [r7, #2]
 8001384:	4013      	ands	r3, r2
 8001386:	b2da      	uxtb	r2, r3
 8001388:	787b      	ldrb	r3, [r7, #1]
 800138a:	4313      	orrs	r3, r2
 800138c:	b2db      	uxtb	r3, r3
 800138e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8001390:	7bba      	ldrb	r2, [r7, #14]
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	4619      	mov	r1, r3
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ff88 	bl	80012ac <VL53L0X_WrByte>
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e000      	b.n	80013a4 <VL53L0X_UpdateByte+0x5c>
        goto done;
 80013a2:	bf00      	nop
done:
    return Status;
 80013a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	460b      	mov	r3, r1
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80013c2:	f107 030b 	add.w	r3, r7, #11
 80013c6:	2201      	movs	r2, #1
 80013c8:	4619      	mov	r1, r3
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff fed0 	bl	8001170 <_I2CWrite>
 80013d0:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80013d8:	23ec      	movs	r3, #236	; 0xec
 80013da:	75fb      	strb	r3, [r7, #23]
        goto done;
 80013dc:	e00c      	b.n	80013f8 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 80013de:	2201      	movs	r2, #1
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f7ff fee3 	bl	80011ae <_I2CRead>
 80013e8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80013f0:	23ec      	movs	r3, #236	; 0xec
 80013f2:	75fb      	strb	r3, [r7, #23]
 80013f4:	e000      	b.n	80013f8 <VL53L0X_RdByte+0x48>
    }
done:
 80013f6:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80013f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	460b      	mov	r3, r1
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001412:	2300      	movs	r3, #0
 8001414:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001416:	f107 030b 	add.w	r3, r7, #11
 800141a:	2201      	movs	r2, #1
 800141c:	4619      	mov	r1, r3
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f7ff fea6 	bl	8001170 <_I2CWrite>
 8001424:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800142c:	23ec      	movs	r3, #236	; 0xec
 800142e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001430:	e017      	b.n	8001462 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8001432:	2202      	movs	r2, #2
 8001434:	490e      	ldr	r1, [pc, #56]	; (8001470 <VL53L0X_RdWord+0x6c>)
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f7ff feb9 	bl	80011ae <_I2CRead>
 800143c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001444:	23ec      	movs	r3, #236	; 0xec
 8001446:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001448:	e00b      	b.n	8001462 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <VL53L0X_RdWord+0x6c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <VL53L0X_RdWord+0x6c>)
 8001456:	785b      	ldrb	r3, [r3, #1]
 8001458:	b29b      	uxth	r3, r3
 800145a:	4413      	add	r3, r2
 800145c:	b29a      	uxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8001462:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000075c 	.word	0x2000075c

08001474 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	460b      	mov	r3, r1
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001482:	2300      	movs	r3, #0
 8001484:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001486:	f107 030b 	add.w	r3, r7, #11
 800148a:	2201      	movs	r2, #1
 800148c:	4619      	mov	r1, r3
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f7ff fe6e 	bl	8001170 <_I2CWrite>
 8001494:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800149c:	23ec      	movs	r3, #236	; 0xec
 800149e:	75fb      	strb	r3, [r7, #23]
        goto done;
 80014a0:	e01b      	b.n	80014da <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80014a2:	2204      	movs	r2, #4
 80014a4:	4910      	ldr	r1, [pc, #64]	; (80014e8 <VL53L0X_RdDWord+0x74>)
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f7ff fe81 	bl	80011ae <_I2CRead>
 80014ac:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80014b4:	23ec      	movs	r3, #236	; 0xec
 80014b6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80014b8:	e00f      	b.n	80014da <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <VL53L0X_RdDWord+0x74>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	061a      	lsls	r2, r3, #24
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <VL53L0X_RdDWord+0x74>)
 80014c2:	785b      	ldrb	r3, [r3, #1]
 80014c4:	041b      	lsls	r3, r3, #16
 80014c6:	441a      	add	r2, r3
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <VL53L0X_RdDWord+0x74>)
 80014ca:	789b      	ldrb	r3, [r3, #2]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	4413      	add	r3, r2
 80014d0:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <VL53L0X_RdDWord+0x74>)
 80014d2:	78d2      	ldrb	r2, [r2, #3]
 80014d4:	441a      	add	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 80014da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000075c 	.word	0x2000075c

080014ec <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80014f8:	2002      	movs	r0, #2
 80014fa:	f005 fc49 	bl	8006d90 <HAL_Delay>
    return status;
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af04      	add	r7, sp, #16
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001516:	2300      	movs	r3, #0
 8001518:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x6c>)
 800151c:	681c      	ldr	r4, [r3, #0]
 800151e:	f005 fc2b 	bl	8006d78 <HAL_GetTick>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x70>)
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	9200      	str	r2, [sp, #0]
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x74>)
 800152e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001532:	4621      	mov	r1, r4
 8001534:	2001      	movs	r0, #1
 8001536:	f005 fb71 	bl	8006c1c <trace_print_module_function>

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800153a:	6839      	ldr	r1, [r7, #0]
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f002 fa3d 	bl	80039bc <VL53L0X_get_offset_calibration_data_micro_meter>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x6c>)
 8001548:	681c      	ldr	r4, [r3, #0]
 800154a:	f005 fc15 	bl	8006d78 <HAL_GetTick>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x70>)
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	9200      	str	r2, [sp, #0]
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x78>)
 8001560:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001564:	4621      	mov	r1, r4
 8001566:	2001      	movs	r0, #1
 8001568:	f005 fb58 	bl	8006c1c <trace_print_module_function>
	return Status;
 800156c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	2000044c 	.word	0x2000044c
 800157c:	0800b1ec 	.word	0x0800b1ec
 8001580:	0800b048 	.word	0x0800b048
 8001584:	0800b05c 	.word	0x0800b05c

08001588 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af04      	add	r7, sp, #16
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <VL53L0X_SetDeviceAddress+0x78>)
 800159a:	681c      	ldr	r4, [r3, #0]
 800159c:	f005 fbec 	bl	8006d78 <HAL_GetTick>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b17      	ldr	r3, [pc, #92]	; (8001604 <VL53L0X_SetDeviceAddress+0x7c>)
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	9200      	str	r2, [sp, #0]
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <VL53L0X_SetDeviceAddress+0x80>)
 80015ac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80015b0:	4621      	mov	r1, r4
 80015b2:	2001      	movs	r0, #1
 80015b4:	f005 fb32 	bl	8006c1c <trace_print_module_function>

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	085b      	lsrs	r3, r3, #1
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	461a      	mov	r2, r3
 80015c0:	218a      	movs	r1, #138	; 0x8a
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fe72 	bl	80012ac <VL53L0X_WrByte>
 80015c8:	4603      	mov	r3, r0
 80015ca:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <VL53L0X_SetDeviceAddress+0x78>)
 80015ce:	681c      	ldr	r4, [r3, #0]
 80015d0:	f005 fbd2 	bl	8006d78 <HAL_GetTick>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015dc:	9302      	str	r3, [sp, #8]
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <VL53L0X_SetDeviceAddress+0x7c>)
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	9200      	str	r2, [sp, #0]
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <VL53L0X_SetDeviceAddress+0x84>)
 80015e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80015ea:	4621      	mov	r1, r4
 80015ec:	2001      	movs	r0, #1
 80015ee:	f005 fb15 	bl	8006c1c <trace_print_module_function>
	return Status;
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000044c 	.word	0x2000044c
 8001604:	0800b2b8 	.word	0x0800b2b8
 8001608:	0800b048 	.word	0x0800b048
 800160c:	0800b05c 	.word	0x0800b05c

08001610 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b09a      	sub	sp, #104	; 0x68
 8001614:	af04      	add	r7, sp, #16
 8001616:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001618:	2300      	movs	r3, #0
 800161a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	VL53L0X_DeviceParameters_t CurrentParameters;
	int i;
	uint8_t StopVariable;

	LOG_FUNCTION_START("");
 800161e:	4bbd      	ldr	r3, [pc, #756]	; (8001914 <VL53L0X_DataInit+0x304>)
 8001620:	681c      	ldr	r4, [r3, #0]
 8001622:	f005 fba9 	bl	8006d78 <HAL_GetTick>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	4bbb      	ldr	r3, [pc, #748]	; (8001918 <VL53L0X_DataInit+0x308>)
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	9200      	str	r2, [sp, #0]
 8001630:	4bba      	ldr	r3, [pc, #744]	; (800191c <VL53L0X_DataInit+0x30c>)
 8001632:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001636:	4621      	mov	r1, r4
 8001638:	2001      	movs	r0, #1
 800163a:	f005 faef 	bl	8006c1c <trace_print_module_function>
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800163e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001642:	2b00      	cmp	r3, #0
 8001644:	d107      	bne.n	8001656 <VL53L0X_DataInit+0x46>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8001646:	2200      	movs	r2, #0
 8001648:	2188      	movs	r1, #136	; 0x88
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fe2e 	bl	80012ac <VL53L0X_WrByte>
 8001650:	4603      	mov	r3, r0
 8001652:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001664:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800166e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4aaa      	ldr	r2, [pc, #680]	; (8001920 <VL53L0X_DataInit+0x310>)
 8001676:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4aa9      	ldr	r2, [pc, #676]	; (8001924 <VL53L0X_DataInit+0x314>)
 800167e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4619      	mov	r1, r3
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 faf8 	bl	8001c84 <VL53L0X_GetDeviceParameters>
 8001694:	4603      	mov	r3, r0
 8001696:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800169a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d112      	bne.n	80016c8 <VL53L0X_DataInit+0xb8>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80016a2:	2300      	movs	r3, #0
 80016a4:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80016a6:	2300      	movs	r3, #0
 80016a8:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f103 0410 	add.w	r4, r3, #16
 80016b0:	f107 0510 	add.w	r5, r7, #16
 80016b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2264      	movs	r2, #100	; 0x64
 80016cc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f44f 7261 	mov.w	r2, #900	; 0x384
 80016d6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016e0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80016ea:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80016f6:	2201      	movs	r2, #1
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fdd6 	bl	80012ac <VL53L0X_WrByte>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001708:	4313      	orrs	r3, r2
 800170a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800170e:	2201      	movs	r2, #1
 8001710:	21ff      	movs	r1, #255	; 0xff
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fdca 	bl	80012ac <VL53L0X_WrByte>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001720:	4313      	orrs	r3, r2
 8001722:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff fdbe 	bl	80012ac <VL53L0X_WrByte>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001738:	4313      	orrs	r3, r2
 800173a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800173e:	f107 030f 	add.w	r3, r7, #15
 8001742:	461a      	mov	r2, r3
 8001744:	2191      	movs	r1, #145	; 0x91
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fe32 	bl	80013b0 <VL53L0X_RdByte>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001754:	4313      	orrs	r3, r2
 8001756:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800175a:	7bfa      	ldrb	r2, [r7, #15]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001762:	2201      	movs	r2, #1
 8001764:	2100      	movs	r1, #0
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fda0 	bl	80012ac <VL53L0X_WrByte>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001774:	4313      	orrs	r3, r2
 8001776:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800177a:	2200      	movs	r2, #0
 800177c:	21ff      	movs	r1, #255	; 0xff
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff fd94 	bl	80012ac <VL53L0X_WrByte>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800178c:	4313      	orrs	r3, r2
 800178e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001792:	2200      	movs	r2, #0
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fd88 	bl	80012ac <VL53L0X_WrByte>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80017a4:	4313      	orrs	r3, r2
 80017a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80017aa:	2300      	movs	r3, #0
 80017ac:	653b      	str	r3, [r7, #80]	; 0x50
 80017ae:	e014      	b.n	80017da <VL53L0X_DataInit+0x1ca>
		if (Status == VL53L0X_ERROR_NONE)
 80017b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d114      	bne.n	80017e2 <VL53L0X_DataInit+0x1d2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80017b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	2201      	movs	r2, #1
 80017be:	4619      	mov	r1, r3
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 ff9d 	bl	8002700 <VL53L0X_SetLimitCheckEnable>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80017ce:	4313      	orrs	r3, r2
 80017d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80017d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017d6:	3301      	adds	r3, #1
 80017d8:	653b      	str	r3, [r7, #80]	; 0x50
 80017da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017dc:	2b05      	cmp	r3, #5
 80017de:	dde7      	ble.n	80017b0 <VL53L0X_DataInit+0x1a0>
 80017e0:	e000      	b.n	80017e4 <VL53L0X_DataInit+0x1d4>
		else
			break;
 80017e2:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80017e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d107      	bne.n	80017fc <VL53L0X_DataInit+0x1ec>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80017ec:	2200      	movs	r2, #0
 80017ee:	2102      	movs	r1, #2
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 ff85 	bl	8002700 <VL53L0X_SetLimitCheckEnable>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80017fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001800:	2b00      	cmp	r3, #0
 8001802:	d107      	bne.n	8001814 <VL53L0X_DataInit+0x204>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001804:	2200      	movs	r2, #0
 8001806:	2103      	movs	r1, #3
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 ff79 	bl	8002700 <VL53L0X_SetLimitCheckEnable>
 800180e:	4603      	mov	r3, r0
 8001810:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001814:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001818:	2b00      	cmp	r3, #0
 800181a:	d107      	bne.n	800182c <VL53L0X_DataInit+0x21c>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800181c:	2200      	movs	r2, #0
 800181e:	2104      	movs	r1, #4
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 ff6d 	bl	8002700 <VL53L0X_SetLimitCheckEnable>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800182c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001830:	2b00      	cmp	r3, #0
 8001832:	d107      	bne.n	8001844 <VL53L0X_DataInit+0x234>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001834:	2200      	movs	r2, #0
 8001836:	2105      	movs	r1, #5
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 ff61 	bl	8002700 <VL53L0X_SetLimitCheckEnable>
 800183e:	4603      	mov	r3, r0
 8001840:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8001844:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001848:	2b00      	cmp	r3, #0
 800184a:	d108      	bne.n	800185e <VL53L0X_DataInit+0x24e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800184c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8001850:	2100      	movs	r1, #0
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f001 f858 	bl	8002908 <VL53L0X_SetLimitCheckValue>
 8001858:	4603      	mov	r3, r0
 800185a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800185e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001862:	2b00      	cmp	r3, #0
 8001864:	d108      	bne.n	8001878 <VL53L0X_DataInit+0x268>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001866:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800186a:	2101      	movs	r1, #1
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f001 f84b 	bl	8002908 <VL53L0X_SetLimitCheckValue>
 8001872:	4603      	mov	r3, r0
 8001874:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001878:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800187c:	2b00      	cmp	r3, #0
 800187e:	d108      	bne.n	8001892 <VL53L0X_DataInit+0x282>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001880:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8001884:	2102      	movs	r1, #2
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f001 f83e 	bl	8002908 <VL53L0X_SetLimitCheckValue>
 800188c:	4603      	mov	r3, r0
 800188e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001892:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001896:	2b00      	cmp	r3, #0
 8001898:	d107      	bne.n	80018aa <VL53L0X_DataInit+0x29a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800189a:	2200      	movs	r2, #0
 800189c:	2103      	movs	r1, #3
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f001 f832 	bl	8002908 <VL53L0X_SetLimitCheckValue>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80018aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10f      	bne.n	80018d2 <VL53L0X_DataInit+0x2c2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	22ff      	movs	r2, #255	; 0xff
 80018b6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80018ba:	22ff      	movs	r2, #255	; 0xff
 80018bc:	2101      	movs	r1, #1
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fcf4 	bl	80012ac <VL53L0X_WrByte>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80018d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d103      	bne.n	80018e2 <VL53L0X_DataInit+0x2d2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <VL53L0X_DataInit+0x304>)
 80018e4:	681c      	ldr	r4, [r3, #0]
 80018e6:	f005 fa47 	bl	8006d78 <HAL_GetTick>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461a      	mov	r2, r3
 80018ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <VL53L0X_DataInit+0x308>)
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	9200      	str	r2, [sp, #0]
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <VL53L0X_DataInit+0x318>)
 80018fc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001900:	4621      	mov	r1, r4
 8001902:	2001      	movs	r0, #1
 8001904:	f005 f98a 	bl	8006c1c <trace_print_module_function>
	return Status;
 8001908:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800190c:	4618      	mov	r0, r3
 800190e:	3758      	adds	r7, #88	; 0x58
 8001910:	46bd      	mov	sp, r7
 8001912:	bdb0      	pop	{r4, r5, r7, pc}
 8001914:	2000044c 	.word	0x2000044c
 8001918:	0800b2d4 	.word	0x0800b2d4
 800191c:	0800b048 	.word	0x0800b048
 8001920:	00016b85 	.word	0x00016b85
 8001924:	000970a4 	.word	0x000970a4
 8001928:	0800b05c 	.word	0x0800b05c

0800192c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800192c:	b5b0      	push	{r4, r5, r7, lr}
 800192e:	b0a0      	sub	sp, #128	; 0x80
 8001930:	af04      	add	r7, sp, #16
 8001932:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001934:	2300      	movs	r3, #0
 8001936:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800193a:	f107 031c 	add.w	r3, r7, #28
 800193e:	2240      	movs	r2, #64	; 0x40
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f008 fce3 	bl	800a30e <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");
 8001968:	4bc1      	ldr	r3, [pc, #772]	; (8001c70 <VL53L0X_StaticInit+0x344>)
 800196a:	681c      	ldr	r4, [r3, #0]
 800196c:	f005 fa04 	bl	8006d78 <HAL_GetTick>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	4bbf      	ldr	r3, [pc, #764]	; (8001c74 <VL53L0X_StaticInit+0x348>)
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	9200      	str	r2, [sp, #0]
 800197a:	4bbf      	ldr	r3, [pc, #764]	; (8001c78 <VL53L0X_StaticInit+0x34c>)
 800197c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001980:	4621      	mov	r1, r4
 8001982:	2001      	movs	r0, #1
 8001984:	f005 f94a 	bl	8006c1c <trace_print_module_function>

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8001988:	2101      	movs	r1, #1
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f002 ffb2 	bl	80048f4 <VL53L0X_get_info_from_device>
 8001990:	4603      	mov	r3, r0
 8001992:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800199c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80019a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80019a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d80d      	bhi.n	80019cc <VL53L0X_StaticInit+0xa0>
 80019b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d102      	bne.n	80019be <VL53L0X_StaticInit+0x92>
		((ApertureSpads == 1) && (count > 32)) ||
 80019b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	d806      	bhi.n	80019cc <VL53L0X_StaticInit+0xa0>
 80019be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10e      	bne.n	80019e4 <VL53L0X_StaticInit+0xb8>
		((ApertureSpads == 0) && (count > 12)))
 80019c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	d90b      	bls.n	80019e4 <VL53L0X_StaticInit+0xb8>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80019cc:	f107 0218 	add.w	r2, r7, #24
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f002 f9ec 	bl	8003db4 <VL53L0X_perform_ref_spad_management>
 80019dc:	4603      	mov	r3, r0
 80019de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80019e2:	e009      	b.n	80019f8 <VL53L0X_StaticInit+0xcc>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80019e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80019e8:	461a      	mov	r2, r3
 80019ea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f002 fbed 	bl	80041cc <VL53L0X_set_reference_spads>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80019f8:	4ba0      	ldr	r3, [pc, #640]	; (8001c7c <VL53L0X_StaticInit+0x350>)
 80019fa:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80019fc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10f      	bne.n	8001a24 <VL53L0X_StaticInit+0xf8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8001a0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8001a0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d104      	bne.n	8001a20 <VL53L0X_StaticInit+0xf4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001a1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a1e:	e001      	b.n	8001a24 <VL53L0X_StaticInit+0xf8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8001a20:	4b96      	ldr	r3, [pc, #600]	; (8001c7c <VL53L0X_StaticInit+0x350>)
 8001a22:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8001a24:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d106      	bne.n	8001a3a <VL53L0X_StaticInit+0x10e>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8001a2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f004 f968 	bl	8005d04 <VL53L0X_load_tuning_settings>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8001a3a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10a      	bne.n	8001a58 <VL53L0X_StaticInit+0x12c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8001a42:	2300      	movs	r3, #0
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2304      	movs	r3, #4
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f001 fd07 	bl	8003460 <VL53L0X_SetGpioConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001a58:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d121      	bne.n	8001aa4 <VL53L0X_StaticInit+0x178>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001a60:	2201      	movs	r2, #1
 8001a62:	21ff      	movs	r1, #255	; 0xff
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff fc21 	bl	80012ac <VL53L0X_WrByte>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8001a70:	f107 031a 	add.w	r3, r7, #26
 8001a74:	461a      	mov	r2, r3
 8001a76:	2184      	movs	r1, #132	; 0x84
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff fcc3 	bl	8001404 <VL53L0X_RdWord>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a86:	4313      	orrs	r3, r2
 8001a88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	21ff      	movs	r1, #255	; 0xff
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff fc0b 	bl	80012ac <VL53L0X_WrByte>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001aa4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8001aac:	8b7b      	ldrh	r3, [r7, #26]
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8001ab8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d108      	bne.n	8001ad2 <VL53L0X_StaticInit+0x1a6>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f8dc 	bl	8001c84 <VL53L0X_GetDeviceParameters>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8001ad2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d110      	bne.n	8001afc <VL53L0X_StaticInit+0x1d0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8001ada:	f107 0319 	add.w	r3, r7, #25
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fa3b 	bl	8001f5c <VL53L0X_GetFractionEnable>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8001aec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d103      	bne.n	8001afc <VL53L0X_StaticInit+0x1d0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8001af4:	7e7a      	ldrb	r2, [r7, #25]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8001afc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10e      	bne.n	8001b22 <VL53L0X_StaticInit+0x1f6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f103 0410 	add.w	r4, r3, #16
 8001b0a:	f107 051c 	add.w	r5, r7, #28
 8001b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8001b22:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d111      	bne.n	8001b4e <VL53L0X_StaticInit+0x222>
		Status = VL53L0X_RdByte(Dev,
 8001b2a:	f107 0319 	add.w	r3, r7, #25
 8001b2e:	461a      	mov	r2, r3
 8001b30:	2101      	movs	r1, #1
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fc3c 	bl	80013b0 <VL53L0X_RdByte>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8001b3e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d103      	bne.n	8001b4e <VL53L0X_StaticInit+0x222>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8001b46:	7e7a      	ldrb	r2, [r7, #25]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8001b4e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d107      	bne.n	8001b66 <VL53L0X_StaticInit+0x23a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 fb06 	bl	800216c <VL53L0X_SetSequenceStepEnable>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8001b66:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d107      	bne.n	8001b7e <VL53L0X_StaticInit+0x252>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2102      	movs	r1, #2
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fafa 	bl	800216c <VL53L0X_SetSequenceStepEnable>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8001b7e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d103      	bne.n	8001b8e <VL53L0X_StaticInit+0x262>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8001b8e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <VL53L0X_StaticInit+0x27e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8001b96:	f107 0313 	add.w	r3, r7, #19
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 faa2 	bl	80020e8 <VL53L0X_GetVcselPulsePeriod>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001baa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d103      	bne.n	8001bba <VL53L0X_StaticInit+0x28e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001bb2:	7cfa      	ldrb	r2, [r7, #19]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8001bba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <VL53L0X_StaticInit+0x2aa>
		Status = VL53L0X_GetVcselPulsePeriod(
 8001bc2:	f107 0313 	add.w	r3, r7, #19
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	2101      	movs	r1, #1
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 fa8c 	bl	80020e8 <VL53L0X_GetVcselPulsePeriod>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001bd6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d103      	bne.n	8001be6 <VL53L0X_StaticInit+0x2ba>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001bde:	7cfa      	ldrb	r2, [r7, #19]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8001be6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <VL53L0X_StaticInit+0x2d6>
		Status = get_sequence_step_timeout(
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2103      	movs	r1, #3
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f003 fc58 	bl	80054ac <get_sequence_step_timeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001c02:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d103      	bne.n	8001c12 <VL53L0X_StaticInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8001c12:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <VL53L0X_StaticInit+0x302>
		Status = get_sequence_step_timeout(
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	461a      	mov	r2, r3
 8001c20:	2104      	movs	r1, #4
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f003 fc42 	bl	80054ac <get_sequence_step_timeout>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001c2e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d103      	bne.n	8001c3e <VL53L0X_StaticInit+0x312>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			Dev,
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <VL53L0X_StaticInit+0x344>)
 8001c40:	681c      	ldr	r4, [r3, #0]
 8001c42:	f005 f899 	bl	8006d78 <HAL_GetTick>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <VL53L0X_StaticInit+0x348>)
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	9200      	str	r2, [sp, #0]
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <VL53L0X_StaticInit+0x354>)
 8001c58:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f004 ffdc 	bl	8006c1c <trace_print_module_function>
	return Status;
 8001c64:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3770      	adds	r7, #112	; 0x70
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c70:	2000044c 	.word	0x2000044c
 8001c74:	0800b328 	.word	0x0800b328
 8001c78:	0800b048 	.word	0x0800b048
 8001c7c:	20000190 	.word	0x20000190
 8001c80:	0800b05c 	.word	0x0800b05c

08001c84 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af04      	add	r7, sp, #16
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");
 8001c92:	4b56      	ldr	r3, [pc, #344]	; (8001dec <VL53L0X_GetDeviceParameters+0x168>)
 8001c94:	681c      	ldr	r4, [r3, #0]
 8001c96:	f005 f86f 	bl	8006d78 <HAL_GetTick>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b54      	ldr	r3, [pc, #336]	; (8001df0 <VL53L0X_GetDeviceParameters+0x16c>)
 8001ca0:	9301      	str	r3, [sp, #4]
 8001ca2:	9200      	str	r2, [sp, #0]
 8001ca4:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <VL53L0X_GetDeviceParameters+0x170>)
 8001ca6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001caa:	4621      	mov	r1, r4
 8001cac:	2001      	movs	r0, #1
 8001cae:	f004 ffb5 	bl	8006c1c <trace_print_module_function>

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f914 	bl	8001ee4 <VL53L0X_GetDeviceMode>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8001cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d107      	bne.n	8001cd8 <VL53L0X_GetDeviceParameters+0x54>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	3308      	adds	r3, #8
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 fc1a 	bl	8002508 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8001cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <VL53L0X_GetDeviceParameters+0x62>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8001ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d107      	bne.n	8001cfe <VL53L0X_GetDeviceParameters+0x7a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	3310      	adds	r3, #16
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 fca5 	bl	8002644 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d107      	bne.n	8001d16 <VL53L0X_GetDeviceParameters+0x92>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	3314      	adds	r3, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff fbfd 	bl	800150c <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8001d12:	4603      	mov	r3, r0
 8001d14:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8001d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d134      	bne.n	8001d88 <VL53L0X_GetDeviceParameters+0x104>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	e02a      	b.n	8001d7a <VL53L0X_GetDeviceParameters+0xf6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8001d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d12a      	bne.n	8001d82 <VL53L0X_GetDeviceParameters+0xfe>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	b299      	uxth	r1, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	3308      	adds	r3, #8
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 fe6e 	bl	8002a20 <VL53L0X_GetLimitCheckValue>
 8001d44:	4603      	mov	r3, r0
 8001d46:	461a      	mov	r2, r3
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d117      	bne.n	8001d86 <VL53L0X_GetDeviceParameters+0x102>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	b299      	uxth	r1, r3
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	3318      	adds	r3, #24
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	4413      	add	r3, r2
 8001d62:	461a      	mov	r2, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fd83 	bl	8002870 <VL53L0X_GetLimitCheckEnable>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	3301      	adds	r3, #1
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	ddd1      	ble.n	8001d24 <VL53L0X_GetDeviceParameters+0xa0>
 8001d80:	e002      	b.n	8001d88 <VL53L0X_GetDeviceParameters+0x104>
				break;
 8001d82:	bf00      	nop
 8001d84:	e000      	b.n	8001d88 <VL53L0X_GetDeviceParameters+0x104>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8001d86:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <VL53L0X_GetDeviceParameters+0x11c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	333c      	adds	r3, #60	; 0x3c
 8001d94:	4619      	mov	r1, r3
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fefa 	bl	8002b90 <VL53L0X_GetWrapAroundCheckEnable>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8001da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d107      	bne.n	8001db8 <VL53L0X_GetDeviceParameters+0x134>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	3304      	adds	r3, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f95c 	bl	800206c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8001db4:	4603      	mov	r3, r0
 8001db6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <VL53L0X_GetDeviceParameters+0x168>)
 8001dba:	681c      	ldr	r4, [r3, #0]
 8001dbc:	f004 ffdc 	bl	8006d78 <HAL_GetTick>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc8:	9302      	str	r3, [sp, #8]
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <VL53L0X_GetDeviceParameters+0x16c>)
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	9200      	str	r2, [sp, #0]
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <VL53L0X_GetDeviceParameters+0x174>)
 8001dd2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f004 ff1f 	bl	8006c1c <trace_print_module_function>
	return Status;
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd90      	pop	{r4, r7, pc}
 8001dea:	bf00      	nop
 8001dec:	2000044c 	.word	0x2000044c
 8001df0:	0800b388 	.word	0x0800b388
 8001df4:	0800b048 	.word	0x0800b048
 8001df8:	0800b05c 	.word	0x0800b05c

08001dfc <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af04      	add	r7, sp, #16
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);
 8001e0c:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <VL53L0X_SetDeviceMode+0xd8>)
 8001e0e:	681c      	ldr	r4, [r3, #0]
 8001e10:	f004 ffb2 	bl	8006d78 <HAL_GetTick>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	9302      	str	r3, [sp, #8]
 8001e1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <VL53L0X_SetDeviceMode+0xdc>)
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	9200      	str	r2, [sp, #0]
 8001e22:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <VL53L0X_SetDeviceMode+0xe0>)
 8001e24:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001e28:	4621      	mov	r1, r4
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f004 fef6 	bl	8006c1c <trace_print_module_function>

	switch (DeviceMode) {
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	2b15      	cmp	r3, #21
 8001e34:	d832      	bhi.n	8001e9c <VL53L0X_SetDeviceMode+0xa0>
 8001e36:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <VL53L0X_SetDeviceMode+0x40>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001e95 	.word	0x08001e95
 8001e40:	08001e95 	.word	0x08001e95
 8001e44:	08001e9d 	.word	0x08001e9d
 8001e48:	08001e95 	.word	0x08001e95
 8001e4c:	08001e9d 	.word	0x08001e9d
 8001e50:	08001e9d 	.word	0x08001e9d
 8001e54:	08001e9d 	.word	0x08001e9d
 8001e58:	08001e9d 	.word	0x08001e9d
 8001e5c:	08001e9d 	.word	0x08001e9d
 8001e60:	08001e9d 	.word	0x08001e9d
 8001e64:	08001e9d 	.word	0x08001e9d
 8001e68:	08001e9d 	.word	0x08001e9d
 8001e6c:	08001e9d 	.word	0x08001e9d
 8001e70:	08001e9d 	.word	0x08001e9d
 8001e74:	08001e9d 	.word	0x08001e9d
 8001e78:	08001e9d 	.word	0x08001e9d
 8001e7c:	08001e9d 	.word	0x08001e9d
 8001e80:	08001e9d 	.word	0x08001e9d
 8001e84:	08001e9d 	.word	0x08001e9d
 8001e88:	08001e9d 	.word	0x08001e9d
 8001e8c:	08001e95 	.word	0x08001e95
 8001e90:	08001e95 	.word	0x08001e95
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	78fa      	ldrb	r2, [r7, #3]
 8001e98:	741a      	strb	r2, [r3, #16]
		break;
 8001e9a:	e001      	b.n	8001ea0 <VL53L0X_SetDeviceMode+0xa4>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8001e9c:	23f8      	movs	r3, #248	; 0xf8
 8001e9e:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <VL53L0X_SetDeviceMode+0xd8>)
 8001ea2:	681c      	ldr	r4, [r3, #0]
 8001ea4:	f004 ff68 	bl	8006d78 <HAL_GetTick>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb0:	9302      	str	r3, [sp, #8]
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <VL53L0X_SetDeviceMode+0xdc>)
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	9200      	str	r2, [sp, #0]
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <VL53L0X_SetDeviceMode+0xe4>)
 8001eba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f004 feab 	bl	8006c1c <trace_print_module_function>
	return Status;
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd90      	pop	{r4, r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2000044c 	.word	0x2000044c
 8001ed8:	0800b3a4 	.word	0x0800b3a4
 8001edc:	0800b06c 	.word	0x0800b06c
 8001ee0:	0800b05c 	.word	0x0800b05c

08001ee4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af04      	add	r7, sp, #16
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <VL53L0X_GetDeviceMode+0x68>)
 8001ef4:	681c      	ldr	r4, [r3, #0]
 8001ef6:	f004 ff3f 	bl	8006d78 <HAL_GetTick>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <VL53L0X_GetDeviceMode+0x6c>)
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	9200      	str	r2, [sp, #0]
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <VL53L0X_GetDeviceMode+0x70>)
 8001f06:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f004 fe85 	bl	8006c1c <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7c1a      	ldrb	r2, [r3, #16]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <VL53L0X_GetDeviceMode+0x68>)
 8001f1c:	681c      	ldr	r4, [r3, #0]
 8001f1e:	f004 ff2b 	bl	8006d78 <HAL_GetTick>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461a      	mov	r2, r3
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	9302      	str	r3, [sp, #8]
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <VL53L0X_GetDeviceMode+0x6c>)
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	9200      	str	r2, [sp, #0]
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <VL53L0X_GetDeviceMode+0x74>)
 8001f34:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001f38:	4621      	mov	r1, r4
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	f004 fe6e 	bl	8006c1c <trace_print_module_function>
	return Status;
 8001f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd90      	pop	{r4, r7, pc}
 8001f4c:	2000044c 	.word	0x2000044c
 8001f50:	0800b3bc 	.word	0x0800b3bc
 8001f54:	0800b048 	.word	0x0800b048
 8001f58:	0800b05c 	.word	0x0800b05c

08001f5c <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af04      	add	r7, sp, #16
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <VL53L0X_GetFractionEnable+0x84>)
 8001f6c:	681c      	ldr	r4, [r3, #0]
 8001f6e:	f004 ff03 	bl	8006d78 <HAL_GetTick>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <VL53L0X_GetFractionEnable+0x88>)
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	9200      	str	r2, [sp, #0]
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <VL53L0X_GetFractionEnable+0x8c>)
 8001f7e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001f82:	4621      	mov	r1, r4
 8001f84:	2001      	movs	r0, #1
 8001f86:	f004 fe49 	bl	8006c1c <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	2109      	movs	r1, #9
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fa0e 	bl	80013b0 <VL53L0X_RdByte>
 8001f94:	4603      	mov	r3, r0
 8001f96:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8001f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d106      	bne.n	8001fae <VL53L0X_GetFractionEnable+0x52>
		*pEnabled = (*pEnabled & 1);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <VL53L0X_GetFractionEnable+0x84>)
 8001fb0:	681c      	ldr	r4, [r3, #0]
 8001fb2:	f004 fee1 	bl	8006d78 <HAL_GetTick>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	461a      	mov	r2, r3
 8001fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fbe:	9302      	str	r3, [sp, #8]
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <VL53L0X_GetFractionEnable+0x88>)
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	9200      	str	r2, [sp, #0]
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <VL53L0X_GetFractionEnable+0x90>)
 8001fc8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001fcc:	4621      	mov	r1, r4
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f004 fe24 	bl	8006c1c <trace_print_module_function>
	return Status;
 8001fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd90      	pop	{r4, r7, pc}
 8001fe0:	2000044c 	.word	0x2000044c
 8001fe4:	0800b3f4 	.word	0x0800b3f4
 8001fe8:	0800b048 	.word	0x0800b048
 8001fec:	0800b05c 	.word	0x0800b05c

08001ff0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af04      	add	r7, sp, #16
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x6c>)
 8002000:	681c      	ldr	r4, [r3, #0]
 8002002:	f004 feb9 	bl	8006d78 <HAL_GetTick>
 8002006:	4603      	mov	r3, r0
 8002008:	461a      	mov	r2, r3
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x70>)
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	9200      	str	r2, [sp, #0]
 8002010:	4b14      	ldr	r3, [pc, #80]	; (8002064 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x74>)
 8002012:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002016:	4621      	mov	r1, r4
 8002018:	2001      	movs	r0, #1
 800201a:	f004 fdff 	bl	8006c1c <trace_print_module_function>

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f003 fc4d 	bl	80058c0 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8002026:	4603      	mov	r3, r0
 8002028:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x6c>)
 800202c:	681c      	ldr	r4, [r3, #0]
 800202e:	f004 fea3 	bl	8006d78 <HAL_GetTick>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203a:	9302      	str	r3, [sp, #8]
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x70>)
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	9200      	str	r2, [sp, #0]
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x78>)
 8002044:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002048:	4621      	mov	r1, r4
 800204a:	2001      	movs	r0, #1
 800204c:	f004 fde6 	bl	8006c1c <trace_print_module_function>

	return Status;
 8002050:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bd90      	pop	{r4, r7, pc}
 800205c:	2000044c 	.word	0x2000044c
 8002060:	0800b448 	.word	0x0800b448
 8002064:	0800b048 	.word	0x0800b048
 8002068:	0800b05c 	.word	0x0800b05c

0800206c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af04      	add	r7, sp, #16
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002076:	2300      	movs	r3, #0
 8002078:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x6c>)
 800207c:	681c      	ldr	r4, [r3, #0]
 800207e:	f004 fe7b 	bl	8006d78 <HAL_GetTick>
 8002082:	4603      	mov	r3, r0
 8002084:	461a      	mov	r2, r3
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x70>)
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	9200      	str	r2, [sp, #0]
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x74>)
 800208e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002092:	4621      	mov	r1, r4
 8002094:	2001      	movs	r0, #1
 8002096:	f004 fdc1 	bl	8006c1c <trace_print_module_function>

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800209a:	6839      	ldr	r1, [r7, #0]
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f003 fd41 	bl	8005b24 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80020a2:	4603      	mov	r3, r0
 80020a4:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
 80020a6:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x6c>)
 80020a8:	681c      	ldr	r4, [r3, #0]
 80020aa:	f004 fe65 	bl	8006d78 <HAL_GetTick>
 80020ae:	4603      	mov	r3, r0
 80020b0:	461a      	mov	r2, r3
 80020b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b6:	9302      	str	r3, [sp, #8]
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x70>)
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	9200      	str	r2, [sp, #0]
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x78>)
 80020c0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80020c4:	4621      	mov	r1, r4
 80020c6:	2001      	movs	r0, #1
 80020c8:	f004 fda8 	bl	8006c1c <trace_print_module_function>
	return Status;
 80020cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd90      	pop	{r4, r7, pc}
 80020d8:	2000044c 	.word	0x2000044c
 80020dc:	0800b478 	.word	0x0800b478
 80020e0:	0800b048 	.word	0x0800b048
 80020e4:	0800b05c 	.word	0x0800b05c

080020e8 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b08b      	sub	sp, #44	; 0x2c
 80020ec:	af04      	add	r7, sp, #16
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	460b      	mov	r3, r1
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <VL53L0X_GetVcselPulsePeriod+0x74>)
 80020fc:	681c      	ldr	r4, [r3, #0]
 80020fe:	f004 fe3b 	bl	8006d78 <HAL_GetTick>
 8002102:	4603      	mov	r3, r0
 8002104:	461a      	mov	r2, r3
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <VL53L0X_GetVcselPulsePeriod+0x78>)
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	9200      	str	r2, [sp, #0]
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <VL53L0X_GetVcselPulsePeriod+0x7c>)
 800210e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002112:	4621      	mov	r1, r4
 8002114:	2001      	movs	r0, #1
 8002116:	f004 fd81 	bl	8006c1c <trace_print_module_function>

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800211a:	7afb      	ldrb	r3, [r7, #11]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	4619      	mov	r1, r3
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f003 fb96 	bl	8005852 <VL53L0X_get_vcsel_pulse_period>
 8002126:	4603      	mov	r3, r0
 8002128:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <VL53L0X_GetVcselPulsePeriod+0x74>)
 800212c:	681c      	ldr	r4, [r3, #0]
 800212e:	f004 fe23 	bl	8006d78 <HAL_GetTick>
 8002132:	4603      	mov	r3, r0
 8002134:	461a      	mov	r2, r3
 8002136:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800213a:	9302      	str	r3, [sp, #8]
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <VL53L0X_GetVcselPulsePeriod+0x78>)
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	9200      	str	r2, [sp, #0]
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <VL53L0X_GetVcselPulsePeriod+0x80>)
 8002144:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002148:	4621      	mov	r1, r4
 800214a:	2001      	movs	r0, #1
 800214c:	f004 fd66 	bl	8006c1c <trace_print_module_function>
	return Status;
 8002150:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002154:	4618      	mov	r0, r3
 8002156:	371c      	adds	r7, #28
 8002158:	46bd      	mov	sp, r7
 800215a:	bd90      	pop	{r4, r7, pc}
 800215c:	2000044c 	.word	0x2000044c
 8002160:	0800b4c4 	.word	0x0800b4c4
 8002164:	0800b048 	.word	0x0800b048
 8002168:	0800b05c 	.word	0x0800b05c

0800216c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b08b      	sub	sp, #44	; 0x2c
 8002170:	af04      	add	r7, sp, #16
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
 8002178:	4613      	mov	r3, r2
 800217a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800217c:	2300      	movs	r3, #0
 800217e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");
 8002188:	4b5b      	ldr	r3, [pc, #364]	; (80022f8 <VL53L0X_SetSequenceStepEnable+0x18c>)
 800218a:	681c      	ldr	r4, [r3, #0]
 800218c:	f004 fdf4 	bl	8006d78 <HAL_GetTick>
 8002190:	4603      	mov	r3, r0
 8002192:	461a      	mov	r2, r3
 8002194:	4b59      	ldr	r3, [pc, #356]	; (80022fc <VL53L0X_SetSequenceStepEnable+0x190>)
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	9200      	str	r2, [sp, #0]
 800219a:	4b59      	ldr	r3, [pc, #356]	; (8002300 <VL53L0X_SetSequenceStepEnable+0x194>)
 800219c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80021a0:	4621      	mov	r1, r4
 80021a2:	2001      	movs	r0, #1
 80021a4:	f004 fd3a 	bl	8006c1c <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80021a8:	f107 030f 	add.w	r3, r7, #15
 80021ac:	461a      	mov	r2, r3
 80021ae:	2101      	movs	r1, #1
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff f8fd 	bl	80013b0 <VL53L0X_RdByte>
 80021b6:	4603      	mov	r3, r0
 80021b8:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80021be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d15a      	bne.n	800227c <VL53L0X_SetSequenceStepEnable+0x110>
		if (SequenceStepEnabled == 1) {
 80021c6:	78bb      	ldrb	r3, [r7, #2]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d12b      	bne.n	8002224 <VL53L0X_SetSequenceStepEnable+0xb8>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d825      	bhi.n	800221e <VL53L0X_SetSequenceStepEnable+0xb2>
 80021d2:	a201      	add	r2, pc, #4	; (adr r2, 80021d8 <VL53L0X_SetSequenceStepEnable+0x6c>)
 80021d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d8:	080021ed 	.word	0x080021ed
 80021dc:	080021f7 	.word	0x080021f7
 80021e0:	08002201 	.word	0x08002201
 80021e4:	0800220b 	.word	0x0800220b
 80021e8:	08002215 	.word	0x08002215
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80021ec:	7dbb      	ldrb	r3, [r7, #22]
 80021ee:	f043 0310 	orr.w	r3, r3, #16
 80021f2:	75bb      	strb	r3, [r7, #22]
				break;
 80021f4:	e043      	b.n	800227e <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80021f6:	7dbb      	ldrb	r3, [r7, #22]
 80021f8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80021fc:	75bb      	strb	r3, [r7, #22]
				break;
 80021fe:	e03e      	b.n	800227e <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8002200:	7dbb      	ldrb	r3, [r7, #22]
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	75bb      	strb	r3, [r7, #22]
				break;
 8002208:	e039      	b.n	800227e <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800220a:	7dbb      	ldrb	r3, [r7, #22]
 800220c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002210:	75bb      	strb	r3, [r7, #22]
				break;
 8002212:	e034      	b.n	800227e <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8002214:	7dbb      	ldrb	r3, [r7, #22]
 8002216:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800221a:	75bb      	strb	r3, [r7, #22]
				break;
 800221c:	e02f      	b.n	800227e <VL53L0X_SetSequenceStepEnable+0x112>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800221e:	23fc      	movs	r3, #252	; 0xfc
 8002220:	75fb      	strb	r3, [r7, #23]
 8002222:	e02c      	b.n	800227e <VL53L0X_SetSequenceStepEnable+0x112>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	2b04      	cmp	r3, #4
 8002228:	d825      	bhi.n	8002276 <VL53L0X_SetSequenceStepEnable+0x10a>
 800222a:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <VL53L0X_SetSequenceStepEnable+0xc4>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	08002245 	.word	0x08002245
 8002234:	0800224f 	.word	0x0800224f
 8002238:	08002259 	.word	0x08002259
 800223c:	08002263 	.word	0x08002263
 8002240:	0800226d 	.word	0x0800226d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8002244:	7dbb      	ldrb	r3, [r7, #22]
 8002246:	f023 0310 	bic.w	r3, r3, #16
 800224a:	75bb      	strb	r3, [r7, #22]
				break;
 800224c:	e017      	b.n	800227e <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800224e:	7dbb      	ldrb	r3, [r7, #22]
 8002250:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002254:	75bb      	strb	r3, [r7, #22]
				break;
 8002256:	e012      	b.n	800227e <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8002258:	7dbb      	ldrb	r3, [r7, #22]
 800225a:	f023 0304 	bic.w	r3, r3, #4
 800225e:	75bb      	strb	r3, [r7, #22]
				break;
 8002260:	e00d      	b.n	800227e <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8002262:	7dbb      	ldrb	r3, [r7, #22]
 8002264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002268:	75bb      	strb	r3, [r7, #22]
				break;
 800226a:	e008      	b.n	800227e <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800226c:	7dbb      	ldrb	r3, [r7, #22]
 800226e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002272:	75bb      	strb	r3, [r7, #22]
				break;
 8002274:	e003      	b.n	800227e <VL53L0X_SetSequenceStepEnable+0x112>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002276:	23fc      	movs	r3, #252	; 0xfc
 8002278:	75fb      	strb	r3, [r7, #23]
 800227a:	e000      	b.n	800227e <VL53L0X_SetSequenceStepEnable+0x112>
			}
		}
 800227c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	7dba      	ldrb	r2, [r7, #22]
 8002282:	429a      	cmp	r2, r3
 8002284:	d01e      	beq.n	80022c4 <VL53L0X_SetSequenceStepEnable+0x158>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8002286:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d107      	bne.n	800229e <VL53L0X_SetSequenceStepEnable+0x132>
			Status = VL53L0X_WrByte(Dev,
 800228e:	7dbb      	ldrb	r3, [r7, #22]
 8002290:	461a      	mov	r2, r3
 8002292:	2101      	movs	r1, #1
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff f809 	bl	80012ac <VL53L0X_WrByte>
 800229a:	4603      	mov	r3, r0
 800229c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800229e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d103      	bne.n	80022ae <VL53L0X_SetSequenceStepEnable+0x142>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7dba      	ldrb	r2, [r7, #22]
 80022aa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80022ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <VL53L0X_SetSequenceStepEnable+0x158>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80022bc:	6939      	ldr	r1, [r7, #16]
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fe96 	bl	8001ff0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
				MeasurementTimingBudgetMicroSeconds);
		}
	}

	LOG_FUNCTION_END(Status);
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <VL53L0X_SetSequenceStepEnable+0x18c>)
 80022c6:	681c      	ldr	r4, [r3, #0]
 80022c8:	f004 fd56 	bl	8006d78 <HAL_GetTick>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80022d4:	9302      	str	r3, [sp, #8]
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <VL53L0X_SetSequenceStepEnable+0x190>)
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	9200      	str	r2, [sp, #0]
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <VL53L0X_SetSequenceStepEnable+0x198>)
 80022de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80022e2:	4621      	mov	r1, r4
 80022e4:	2001      	movs	r0, #1
 80022e6:	f004 fc99 	bl	8006c1c <trace_print_module_function>

	return Status;
 80022ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	371c      	adds	r7, #28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd90      	pop	{r4, r7, pc}
 80022f6:	bf00      	nop
 80022f8:	2000044c 	.word	0x2000044c
 80022fc:	0800b4e0 	.word	0x0800b4e0
 8002300:	0800b048 	.word	0x0800b048
 8002304:	0800b05c 	.word	0x0800b05c

08002308 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b08b      	sub	sp, #44	; 0x2c
 800230c:	af04      	add	r7, sp, #16
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	72fb      	strb	r3, [r7, #11]
 8002316:	4613      	mov	r3, r2
 8002318:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800231a:	2300      	movs	r3, #0
 800231c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");
 8002324:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <sequence_step_enabled+0xe8>)
 8002326:	681c      	ldr	r4, [r3, #0]
 8002328:	f004 fd26 	bl	8006d78 <HAL_GetTick>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <sequence_step_enabled+0xec>)
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	9200      	str	r2, [sp, #0]
 8002336:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <sequence_step_enabled+0xf0>)
 8002338:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800233c:	4621      	mov	r1, r4
 800233e:	2001      	movs	r0, #1
 8002340:	f004 fc6c 	bl	8006c1c <trace_print_module_function>

	switch (SequenceStepId) {
 8002344:	7afb      	ldrb	r3, [r7, #11]
 8002346:	2b04      	cmp	r3, #4
 8002348:	d836      	bhi.n	80023b8 <sequence_step_enabled+0xb0>
 800234a:	a201      	add	r2, pc, #4	; (adr r2, 8002350 <sequence_step_enabled+0x48>)
 800234c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002350:	08002365 	.word	0x08002365
 8002354:	08002377 	.word	0x08002377
 8002358:	08002389 	.word	0x08002389
 800235c:	0800239b 	.word	0x0800239b
 8002360:	080023ad 	.word	0x080023ad
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8002364:	7abb      	ldrb	r3, [r7, #10]
 8002366:	111b      	asrs	r3, r3, #4
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	b2da      	uxtb	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	701a      	strb	r2, [r3, #0]
		break;
 8002374:	e022      	b.n	80023bc <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8002376:	7abb      	ldrb	r3, [r7, #10]
 8002378:	10db      	asrs	r3, r3, #3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	b2da      	uxtb	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	701a      	strb	r2, [r3, #0]
		break;
 8002386:	e019      	b.n	80023bc <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8002388:	7abb      	ldrb	r3, [r7, #10]
 800238a:	109b      	asrs	r3, r3, #2
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	b2da      	uxtb	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	701a      	strb	r2, [r3, #0]
		break;
 8002398:	e010      	b.n	80023bc <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800239a:	7abb      	ldrb	r3, [r7, #10]
 800239c:	119b      	asrs	r3, r3, #6
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	701a      	strb	r2, [r3, #0]
		break;
 80023aa:	e007      	b.n	80023bc <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80023ac:	7abb      	ldrb	r3, [r7, #10]
 80023ae:	09db      	lsrs	r3, r3, #7
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	701a      	strb	r2, [r3, #0]
		break;
 80023b6:	e001      	b.n	80023bc <sequence_step_enabled+0xb4>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80023b8:	23fc      	movs	r3, #252	; 0xfc
 80023ba:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <sequence_step_enabled+0xe8>)
 80023be:	681c      	ldr	r4, [r3, #0]
 80023c0:	f004 fcda 	bl	8006d78 <HAL_GetTick>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80023cc:	9302      	str	r3, [sp, #8]
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <sequence_step_enabled+0xec>)
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	9200      	str	r2, [sp, #0]
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <sequence_step_enabled+0xf4>)
 80023d6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80023da:	4621      	mov	r1, r4
 80023dc:	2001      	movs	r0, #1
 80023de:	f004 fc1d 	bl	8006c1c <trace_print_module_function>
	return Status;
 80023e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd90      	pop	{r4, r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2000044c 	.word	0x2000044c
 80023f4:	0800b500 	.word	0x0800b500
 80023f8:	0800b048 	.word	0x0800b048
 80023fc:	0800b05c 	.word	0x0800b05c

08002400 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af04      	add	r7, sp, #16
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");
 8002412:	4b39      	ldr	r3, [pc, #228]	; (80024f8 <VL53L0X_GetSequenceStepEnables+0xf8>)
 8002414:	681c      	ldr	r4, [r3, #0]
 8002416:	f004 fcaf 	bl	8006d78 <HAL_GetTick>
 800241a:	4603      	mov	r3, r0
 800241c:	461a      	mov	r2, r3
 800241e:	4b37      	ldr	r3, [pc, #220]	; (80024fc <VL53L0X_GetSequenceStepEnables+0xfc>)
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	9200      	str	r2, [sp, #0]
 8002424:	4b36      	ldr	r3, [pc, #216]	; (8002500 <VL53L0X_GetSequenceStepEnables+0x100>)
 8002426:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800242a:	4621      	mov	r1, r4
 800242c:	2001      	movs	r0, #1
 800242e:	f004 fbf5 	bl	8006c1c <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002432:	f107 030e 	add.w	r3, r7, #14
 8002436:	461a      	mov	r2, r3
 8002438:	2101      	movs	r1, #1
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe ffb8 	bl	80013b0 <VL53L0X_RdByte>
 8002440:	4603      	mov	r3, r0
 8002442:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8002444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d107      	bne.n	800245c <VL53L0X_GetSequenceStepEnables+0x5c>
		Status = sequence_step_enabled(Dev,
 800244c:	7bba      	ldrb	r2, [r7, #14]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2100      	movs	r1, #0
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ff58 	bl	8002308 <sequence_step_enabled>
 8002458:	4603      	mov	r3, r0
 800245a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800245c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d108      	bne.n	8002476 <VL53L0X_GetSequenceStepEnables+0x76>
		Status = sequence_step_enabled(Dev,
 8002464:	7bba      	ldrb	r2, [r7, #14]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	3302      	adds	r3, #2
 800246a:	2101      	movs	r1, #1
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff4b 	bl	8002308 <sequence_step_enabled>
 8002472:	4603      	mov	r3, r0
 8002474:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d108      	bne.n	8002490 <VL53L0X_GetSequenceStepEnables+0x90>
		Status = sequence_step_enabled(Dev,
 800247e:	7bba      	ldrb	r2, [r7, #14]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	3301      	adds	r3, #1
 8002484:	2102      	movs	r1, #2
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ff3e 	bl	8002308 <sequence_step_enabled>
 800248c:	4603      	mov	r3, r0
 800248e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d108      	bne.n	80024aa <VL53L0X_GetSequenceStepEnables+0xaa>
		Status = sequence_step_enabled(Dev,
 8002498:	7bba      	ldrb	r2, [r7, #14]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	3303      	adds	r3, #3
 800249e:	2103      	movs	r1, #3
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff31 	bl	8002308 <sequence_step_enabled>
 80024a6:	4603      	mov	r3, r0
 80024a8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80024aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d108      	bne.n	80024c4 <VL53L0X_GetSequenceStepEnables+0xc4>
		Status = sequence_step_enabled(Dev,
 80024b2:	7bba      	ldrb	r2, [r7, #14]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	3304      	adds	r3, #4
 80024b8:	2104      	movs	r1, #4
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ff24 	bl	8002308 <sequence_step_enabled>
 80024c0:	4603      	mov	r3, r0
 80024c2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <VL53L0X_GetSequenceStepEnables+0xf8>)
 80024c6:	681c      	ldr	r4, [r3, #0]
 80024c8:	f004 fc56 	bl	8006d78 <HAL_GetTick>
 80024cc:	4603      	mov	r3, r0
 80024ce:	461a      	mov	r2, r3
 80024d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d4:	9302      	str	r3, [sp, #8]
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <VL53L0X_GetSequenceStepEnables+0xfc>)
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	9200      	str	r2, [sp, #0]
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <VL53L0X_GetSequenceStepEnables+0x104>)
 80024de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80024e2:	4621      	mov	r1, r4
 80024e4:	2001      	movs	r0, #1
 80024e6:	f004 fb99 	bl	8006c1c <trace_print_module_function>
	return Status;
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd90      	pop	{r4, r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000044c 	.word	0x2000044c
 80024fc:	0800b538 	.word	0x0800b538
 8002500:	0800b048 	.word	0x0800b048
 8002504:	0800b05c 	.word	0x0800b05c

08002508 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af04      	add	r7, sp, #16
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002512:	2300      	movs	r3, #0
 8002514:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");
 8002516:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb0>)
 8002518:	681c      	ldr	r4, [r3, #0]
 800251a:	f004 fc2d 	bl	8006d78 <HAL_GetTick>
 800251e:	4603      	mov	r3, r0
 8002520:	461a      	mov	r2, r3
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb4>)
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	9200      	str	r2, [sp, #0]
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb8>)
 800252a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800252e:	4621      	mov	r1, r4
 8002530:	2001      	movs	r0, #1
 8002532:	f004 fb73 	bl	8006c1c <trace_print_module_function>

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8002536:	f107 030c 	add.w	r3, r7, #12
 800253a:	461a      	mov	r2, r3
 800253c:	21f8      	movs	r1, #248	; 0xf8
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7fe ff60 	bl	8001404 <VL53L0X_RdWord>
 8002544:	4603      	mov	r3, r0
 8002546:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8002548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d108      	bne.n	8002562 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5a>
		Status = VL53L0X_RdDWord(Dev,
 8002550:	f107 0308 	add.w	r3, r7, #8
 8002554:	461a      	mov	r2, r3
 8002556:	2104      	movs	r1, #4
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7fe ff8b 	bl	8001474 <VL53L0X_RdDWord>
 800255e:	4603      	mov	r3, r0
 8002560:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10c      	bne.n	8002584 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7c>
		if (osc_calibrate_val != 0) {
 800256a:	89bb      	ldrh	r3, [r7, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x74>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	89ba      	ldrh	r2, [r7, #12]
 8002574:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb0>)
 8002586:	681c      	ldr	r4, [r3, #0]
 8002588:	f004 fbf6 	bl	8006d78 <HAL_GetTick>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002594:	9302      	str	r3, [sp, #8]
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb4>)
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	9200      	str	r2, [sp, #0]
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xbc>)
 800259e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80025a2:	4621      	mov	r1, r4
 80025a4:	2001      	movs	r0, #1
 80025a6:	f004 fb39 	bl	8006c1c <trace_print_module_function>
	return Status;
 80025aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd90      	pop	{r4, r7, pc}
 80025b6:	bf00      	nop
 80025b8:	2000044c 	.word	0x2000044c
 80025bc:	0800b60c 	.word	0x0800b60c
 80025c0:	0800b048 	.word	0x0800b048
 80025c4:	0800b05c 	.word	0x0800b05c

080025c8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af04      	add	r7, sp, #16
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");
 80025d6:	4b17      	ldr	r3, [pc, #92]	; (8002634 <VL53L0X_GetXTalkCompensationEnable+0x6c>)
 80025d8:	681c      	ldr	r4, [r3, #0]
 80025da:	f004 fbcd 	bl	8006d78 <HAL_GetTick>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <VL53L0X_GetXTalkCompensationEnable+0x70>)
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	9200      	str	r2, [sp, #0]
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <VL53L0X_GetXTalkCompensationEnable+0x74>)
 80025ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80025ee:	4621      	mov	r1, r4
 80025f0:	2001      	movs	r0, #1
 80025f2:	f004 fb13 	bl	8006c1c <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7f1b      	ldrb	r3, [r3, #28]
 80025fa:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	7bba      	ldrb	r2, [r7, #14]
 8002600:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <VL53L0X_GetXTalkCompensationEnable+0x6c>)
 8002604:	681c      	ldr	r4, [r3, #0]
 8002606:	f004 fbb7 	bl	8006d78 <HAL_GetTick>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002612:	9302      	str	r3, [sp, #8]
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <VL53L0X_GetXTalkCompensationEnable+0x70>)
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	9200      	str	r2, [sp, #0]
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <VL53L0X_GetXTalkCompensationEnable+0x78>)
 800261c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002620:	4621      	mov	r1, r4
 8002622:	2001      	movs	r0, #1
 8002624:	f004 fafa 	bl	8006c1c <trace_print_module_function>
	return Status;
 8002628:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bd90      	pop	{r4, r7, pc}
 8002634:	2000044c 	.word	0x2000044c
 8002638:	0800b660 	.word	0x0800b660
 800263c:	0800b048 	.word	0x0800b048
 8002640:	0800b05c 	.word	0x0800b05c

08002644 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b08b      	sub	sp, #44	; 0x2c
 8002648:	af04      	add	r7, sp, #16
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800264e:	2300      	movs	r3, #0
 8002650:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");
 8002652:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0xac>)
 8002654:	681c      	ldr	r4, [r3, #0]
 8002656:	f004 fb8f 	bl	8006d78 <HAL_GetTick>
 800265a:	4603      	mov	r3, r0
 800265c:	461a      	mov	r2, r3
 800265e:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb0>)
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	9200      	str	r2, [sp, #0]
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb4>)
 8002666:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800266a:	4621      	mov	r1, r4
 800266c:	2001      	movs	r0, #1
 800266e:	f004 fad5 	bl	8006c1c <trace_print_module_function>

	Status = VL53L0X_RdWord(Dev,
 8002672:	f107 030e 	add.w	r3, r7, #14
 8002676:	461a      	mov	r2, r3
 8002678:	2120      	movs	r1, #32
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe fec2 	bl	8001404 <VL53L0X_RdWord>
 8002680:	4603      	mov	r3, r0
 8002682:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8002684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d118      	bne.n	80026be <VL53L0X_GetXTalkCompensationRateMegaCps+0x7a>
		if (Value == 0) {
 800268c:	89fb      	ldrh	r3, [r7, #14]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <VL53L0X_GetXTalkCompensationRateMegaCps+0x62>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
 80026a4:	e00b      	b.n	80026be <VL53L0X_GetXTalkCompensationRateMegaCps+0x7a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80026a6:	89fb      	ldrh	r3, [r7, #14]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0xac>)
 80026c0:	681c      	ldr	r4, [r3, #0]
 80026c2:	f004 fb59 	bl	8006d78 <HAL_GetTick>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026ce:	9302      	str	r3, [sp, #8]
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb0>)
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	9200      	str	r2, [sp, #0]
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <VL53L0X_GetXTalkCompensationRateMegaCps+0xb8>)
 80026d8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80026dc:	4621      	mov	r1, r4
 80026de:	2001      	movs	r0, #1
 80026e0:	f004 fa9c 	bl	8006c1c <trace_print_module_function>
	return Status;
 80026e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	371c      	adds	r7, #28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd90      	pop	{r4, r7, pc}
 80026f0:	2000044c 	.word	0x2000044c
 80026f4:	0800b6ac 	.word	0x0800b6ac
 80026f8:	0800b048 	.word	0x0800b048
 80026fc:	0800b05c 	.word	0x0800b05c

08002700 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b08b      	sub	sp, #44	; 0x2c
 8002704:	af04      	add	r7, sp, #16
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
 800270c:	4613      	mov	r3, r2
 800270e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002710:	2300      	movs	r3, #0
 8002712:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 8002720:	4b4f      	ldr	r3, [pc, #316]	; (8002860 <VL53L0X_SetLimitCheckEnable+0x160>)
 8002722:	681c      	ldr	r4, [r3, #0]
 8002724:	f004 fb28 	bl	8006d78 <HAL_GetTick>
 8002728:	4603      	mov	r3, r0
 800272a:	461a      	mov	r2, r3
 800272c:	4b4d      	ldr	r3, [pc, #308]	; (8002864 <VL53L0X_SetLimitCheckEnable+0x164>)
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	9200      	str	r2, [sp, #0]
 8002732:	4b4d      	ldr	r3, [pc, #308]	; (8002868 <VL53L0X_SetLimitCheckEnable+0x168>)
 8002734:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002738:	4621      	mov	r1, r4
 800273a:	2001      	movs	r0, #1
 800273c:	f004 fa6e 	bl	8006c1c <trace_print_module_function>

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002740:	887b      	ldrh	r3, [r7, #2]
 8002742:	2b05      	cmp	r3, #5
 8002744:	d902      	bls.n	800274c <VL53L0X_SetLimitCheckEnable+0x4c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002746:	23fc      	movs	r3, #252	; 0xfc
 8002748:	75fb      	strb	r3, [r7, #23]
 800274a:	e05b      	b.n	8002804 <VL53L0X_SetLimitCheckEnable+0x104>
	} else {
		if (LimitCheckEnable == 0) {
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <VL53L0X_SetLimitCheckEnable+0x60>
			TempFix1616 = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800275a:	2301      	movs	r3, #1
 800275c:	73bb      	strb	r3, [r7, #14]
 800275e:	e00a      	b.n	8002776 <VL53L0X_SetLimitCheckEnable+0x76>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002760:	887b      	ldrh	r3, [r7, #2]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	330c      	adds	r3, #12
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	2b05      	cmp	r3, #5
 800277a:	d841      	bhi.n	8002800 <VL53L0X_SetLimitCheckEnable+0x100>
 800277c:	a201      	add	r2, pc, #4	; (adr r2, 8002784 <VL53L0X_SetLimitCheckEnable+0x84>)
 800277e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002782:	bf00      	nop
 8002784:	0800279d 	.word	0x0800279d
 8002788:	080027a7 	.word	0x080027a7
 800278c:	080027bd 	.word	0x080027bd
 8002790:	080027c7 	.word	0x080027c7
 8002794:	080027d1 	.word	0x080027d1
 8002798:	080027e9 	.word	0x080027e9

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80027a4:	e02e      	b.n	8002804 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	461a      	mov	r2, r3
 80027ae:	2144      	movs	r1, #68	; 0x44
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7fe fd9f 	bl	80012f4 <VL53L0X_WrWord>
 80027b6:	4603      	mov	r3, r0
 80027b8:	75fb      	strb	r3, [r7, #23]

			break;
 80027ba:	e023      	b.n	8002804 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80027c4:	e01e      	b.n	8002804 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80027ce:	e019      	b.n	8002804 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80027d0:	7bbb      	ldrb	r3, [r7, #14]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80027d6:	7b7b      	ldrb	r3, [r7, #13]
 80027d8:	22fe      	movs	r2, #254	; 0xfe
 80027da:	2160      	movs	r1, #96	; 0x60
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7fe fdb3 	bl	8001348 <VL53L0X_UpdateByte>
 80027e2:	4603      	mov	r3, r0
 80027e4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80027e6:	e00d      	b.n	8002804 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80027e8:	7bbb      	ldrb	r3, [r7, #14]
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80027ee:	7b7b      	ldrb	r3, [r7, #13]
 80027f0:	22ef      	movs	r2, #239	; 0xef
 80027f2:	2160      	movs	r1, #96	; 0x60
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7fe fda7 	bl	8001348 <VL53L0X_UpdateByte>
 80027fa:	4603      	mov	r3, r0
 80027fc:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80027fe:	e001      	b.n	8002804 <VL53L0X_SetLimitCheckEnable+0x104>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002800:	23fc      	movs	r3, #252	; 0xfc
 8002802:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002804:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10f      	bne.n	800282c <VL53L0X_SetLimitCheckEnable+0x12c>
		if (LimitCheckEnable == 0) {
 800280c:	787b      	ldrb	r3, [r7, #1]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <VL53L0X_SetLimitCheckEnable+0x120>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	4413      	add	r3, r2
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800281e:	e005      	b.n	800282c <VL53L0X_SetLimitCheckEnable+0x12c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <VL53L0X_SetLimitCheckEnable+0x160>)
 800282e:	681c      	ldr	r4, [r3, #0]
 8002830:	f004 faa2 	bl	8006d78 <HAL_GetTick>
 8002834:	4603      	mov	r3, r0
 8002836:	461a      	mov	r2, r3
 8002838:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800283c:	9302      	str	r3, [sp, #8]
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <VL53L0X_SetLimitCheckEnable+0x164>)
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	9200      	str	r2, [sp, #0]
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <VL53L0X_SetLimitCheckEnable+0x16c>)
 8002846:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800284a:	4621      	mov	r1, r4
 800284c:	2001      	movs	r0, #1
 800284e:	f004 f9e5 	bl	8006c1c <trace_print_module_function>
	return Status;
 8002852:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002856:	4618      	mov	r0, r3
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	bd90      	pop	{r4, r7, pc}
 800285e:	bf00      	nop
 8002860:	2000044c 	.word	0x2000044c
 8002864:	0800b764 	.word	0x0800b764
 8002868:	0800b048 	.word	0x0800b048
 800286c:	0800b05c 	.word	0x0800b05c

08002870 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b08b      	sub	sp, #44	; 0x2c
 8002874:	af04      	add	r7, sp, #16
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	460b      	mov	r3, r1
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800287e:	2300      	movs	r3, #0
 8002880:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <VL53L0X_GetLimitCheckEnable+0x88>)
 8002884:	681c      	ldr	r4, [r3, #0]
 8002886:	f004 fa77 	bl	8006d78 <HAL_GetTick>
 800288a:	4603      	mov	r3, r0
 800288c:	461a      	mov	r2, r3
 800288e:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <VL53L0X_GetLimitCheckEnable+0x8c>)
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	9200      	str	r2, [sp, #0]
 8002894:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <VL53L0X_GetLimitCheckEnable+0x90>)
 8002896:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800289a:	4621      	mov	r1, r4
 800289c:	2001      	movs	r0, #1
 800289e:	f004 f9bd 	bl	8006c1c <trace_print_module_function>

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80028a2:	897b      	ldrh	r3, [r7, #10]
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	d905      	bls.n	80028b4 <VL53L0X_GetLimitCheckEnable+0x44>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80028a8:	23fc      	movs	r3, #252	; 0xfc
 80028aa:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	e008      	b.n	80028c6 <VL53L0X_GetLimitCheckEnable+0x56>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80028b4:	897b      	ldrh	r3, [r7, #10]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4413      	add	r3, r2
 80028ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028be:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7dba      	ldrb	r2, [r7, #22]
 80028c4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <VL53L0X_GetLimitCheckEnable+0x88>)
 80028c8:	681c      	ldr	r4, [r3, #0]
 80028ca:	f004 fa55 	bl	8006d78 <HAL_GetTick>
 80028ce:	4603      	mov	r3, r0
 80028d0:	461a      	mov	r2, r3
 80028d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028d6:	9302      	str	r3, [sp, #8]
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <VL53L0X_GetLimitCheckEnable+0x8c>)
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	9200      	str	r2, [sp, #0]
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <VL53L0X_GetLimitCheckEnable+0x94>)
 80028e0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80028e4:	4621      	mov	r1, r4
 80028e6:	2001      	movs	r0, #1
 80028e8:	f004 f998 	bl	8006c1c <trace_print_module_function>
	return Status;
 80028ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd90      	pop	{r4, r7, pc}
 80028f8:	2000044c 	.word	0x2000044c
 80028fc:	0800b780 	.word	0x0800b780
 8002900:	0800b048 	.word	0x0800b048
 8002904:	0800b05c 	.word	0x0800b05c

08002908 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b08b      	sub	sp, #44	; 0x2c
 800290c:	af04      	add	r7, sp, #16
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	460b      	mov	r3, r1
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002916:	2300      	movs	r3, #0
 8002918:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 800291a:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <VL53L0X_SetLimitCheckValue+0x108>)
 800291c:	681c      	ldr	r4, [r3, #0]
 800291e:	f004 fa2b 	bl	8006d78 <HAL_GetTick>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <VL53L0X_SetLimitCheckValue+0x10c>)
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	9200      	str	r2, [sp, #0]
 800292c:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <VL53L0X_SetLimitCheckValue+0x110>)
 800292e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002932:	4621      	mov	r1, r4
 8002934:	2001      	movs	r0, #1
 8002936:	f004 f971 	bl	8006c1c <trace_print_module_function>

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4413      	add	r3, r2
 8002940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002944:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8002946:	7dbb      	ldrb	r3, [r7, #22]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d107      	bne.n	800295c <VL53L0X_SetLimitCheckValue+0x54>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800294c:	897b      	ldrh	r3, [r7, #10]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	330c      	adds	r3, #12
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	e040      	b.n	80029de <VL53L0X_SetLimitCheckValue+0xd6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800295c:	897b      	ldrh	r3, [r7, #10]
 800295e:	2b05      	cmp	r3, #5
 8002960:	d830      	bhi.n	80029c4 <VL53L0X_SetLimitCheckValue+0xbc>
 8002962:	a201      	add	r2, pc, #4	; (adr r2, 8002968 <VL53L0X_SetLimitCheckValue+0x60>)
 8002964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002968:	08002981 	.word	0x08002981
 800296c:	08002989 	.word	0x08002989
 8002970:	0800299f 	.word	0x0800299f
 8002974:	080029a7 	.word	0x080029a7
 8002978:	080029af 	.word	0x080029af
 800297c:	080029af 	.word	0x080029af

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8002986:	e01f      	b.n	80029c8 <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800298c:	b29b      	uxth	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	2144      	movs	r1, #68	; 0x44
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f7fe fcae 	bl	80012f4 <VL53L0X_WrWord>
 8002998:	4603      	mov	r3, r0
 800299a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800299c:	e014      	b.n	80029c8 <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80029a4:	e010      	b.n	80029c8 <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80029ac:	e00c      	b.n	80029c8 <VL53L0X_SetLimitCheckValue+0xc0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	2164      	movs	r1, #100	; 0x64
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f7fe fc9b 	bl	80012f4 <VL53L0X_WrWord>
 80029be:	4603      	mov	r3, r0
 80029c0:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80029c2:	e001      	b.n	80029c8 <VL53L0X_SetLimitCheckValue+0xc0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80029c4:	23fc      	movs	r3, #252	; 0xfc
 80029c6:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80029c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <VL53L0X_SetLimitCheckValue+0xd6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80029d0:	897b      	ldrh	r3, [r7, #10]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	330c      	adds	r3, #12
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <VL53L0X_SetLimitCheckValue+0x108>)
 80029e0:	681c      	ldr	r4, [r3, #0]
 80029e2:	f004 f9c9 	bl	8006d78 <HAL_GetTick>
 80029e6:	4603      	mov	r3, r0
 80029e8:	461a      	mov	r2, r3
 80029ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029ee:	9302      	str	r3, [sp, #8]
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <VL53L0X_SetLimitCheckValue+0x10c>)
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	9200      	str	r2, [sp, #0]
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <VL53L0X_SetLimitCheckValue+0x114>)
 80029f8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80029fc:	4621      	mov	r1, r4
 80029fe:	2001      	movs	r0, #1
 8002a00:	f004 f90c 	bl	8006c1c <trace_print_module_function>
	return Status;
 8002a04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	371c      	adds	r7, #28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd90      	pop	{r4, r7, pc}
 8002a10:	2000044c 	.word	0x2000044c
 8002a14:	0800b79c 	.word	0x0800b79c
 8002a18:	0800b048 	.word	0x0800b048
 8002a1c:	0800b05c 	.word	0x0800b05c

08002a20 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b08d      	sub	sp, #52	; 0x34
 8002a24:	af04      	add	r7, sp, #16
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");
 8002a36:	4b52      	ldr	r3, [pc, #328]	; (8002b80 <VL53L0X_GetLimitCheckValue+0x160>)
 8002a38:	681c      	ldr	r4, [r3, #0]
 8002a3a:	f004 f99d 	bl	8006d78 <HAL_GetTick>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b50      	ldr	r3, [pc, #320]	; (8002b84 <VL53L0X_GetLimitCheckValue+0x164>)
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	9200      	str	r2, [sp, #0]
 8002a48:	4b4f      	ldr	r3, [pc, #316]	; (8002b88 <VL53L0X_GetLimitCheckValue+0x168>)
 8002a4a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002a4e:	4621      	mov	r1, r4
 8002a50:	2001      	movs	r0, #1
 8002a52:	f004 f8e3 	bl	8006c1c <trace_print_module_function>

	switch (LimitCheckId) {
 8002a56:	897b      	ldrh	r3, [r7, #10]
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d847      	bhi.n	8002aec <VL53L0X_GetLimitCheckValue+0xcc>
 8002a5c:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <VL53L0X_GetLimitCheckValue+0x44>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002a7d 	.word	0x08002a7d
 8002a68:	08002a89 	.word	0x08002a89
 8002a6c:	08002aaf 	.word	0x08002aaf
 8002a70:	08002abb 	.word	0x08002abb
 8002a74:	08002ac7 	.word	0x08002ac7
 8002a78:	08002ac7 	.word	0x08002ac7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a80:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	77bb      	strb	r3, [r7, #30]
		break;
 8002a86:	e033      	b.n	8002af0 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8002a88:	f107 0316 	add.w	r3, r7, #22
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2144      	movs	r1, #68	; 0x44
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f7fe fcb7 	bl	8001404 <VL53L0X_RdWord>
 8002a96:	4603      	mov	r3, r0
 8002a98:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8002a9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d102      	bne.n	8002aa8 <VL53L0X_GetLimitCheckValue+0x88>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002aa2:	8afb      	ldrh	r3, [r7, #22]
 8002aa4:	025b      	lsls	r3, r3, #9
 8002aa6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	77bb      	strb	r3, [r7, #30]
		break;
 8002aac:	e020      	b.n	8002af0 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	77bb      	strb	r3, [r7, #30]
		break;
 8002ab8:	e01a      	b.n	8002af0 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	77bb      	strb	r3, [r7, #30]
		break;
 8002ac4:	e014      	b.n	8002af0 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8002ac6:	f107 0316 	add.w	r3, r7, #22
 8002aca:	461a      	mov	r2, r3
 8002acc:	2164      	movs	r1, #100	; 0x64
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f7fe fc98 	bl	8001404 <VL53L0X_RdWord>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8002ad8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <VL53L0X_GetLimitCheckValue+0xc6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002ae0:	8afb      	ldrh	r3, [r7, #22]
 8002ae2:	025b      	lsls	r3, r3, #9
 8002ae4:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	77bb      	strb	r3, [r7, #30]
		break;
 8002aea:	e001      	b.n	8002af0 <VL53L0X_GetLimitCheckValue+0xd0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002aec:	23fc      	movs	r3, #252	; 0xfc
 8002aee:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002af0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d12a      	bne.n	8002b4e <VL53L0X_GetLimitCheckValue+0x12e>

		if (EnableZeroValue == 1) {
 8002af8:	7fbb      	ldrb	r3, [r7, #30]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d124      	bne.n	8002b48 <VL53L0X_GetLimitCheckValue+0x128>

			if (TempFix1616 == 0) {
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d110      	bne.n	8002b26 <VL53L0X_GetLimitCheckValue+0x106>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8002b04:	897b      	ldrh	r3, [r7, #10]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	330c      	adds	r3, #12
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002b18:	897b      	ldrh	r3, [r7, #10]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002b24:	e013      	b.n	8002b4e <VL53L0X_GetLimitCheckValue+0x12e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002b2c:	897b      	ldrh	r3, [r7, #10]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	330c      	adds	r3, #12
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002b3a:	897b      	ldrh	r3, [r7, #10]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002b46:	e002      	b.n	8002b4e <VL53L0X_GetLimitCheckValue+0x12e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <VL53L0X_GetLimitCheckValue+0x160>)
 8002b50:	681c      	ldr	r4, [r3, #0]
 8002b52:	f004 f911 	bl	8006d78 <HAL_GetTick>
 8002b56:	4603      	mov	r3, r0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b5e:	9302      	str	r3, [sp, #8]
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <VL53L0X_GetLimitCheckValue+0x164>)
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	9200      	str	r2, [sp, #0]
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <VL53L0X_GetLimitCheckValue+0x16c>)
 8002b68:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	2001      	movs	r0, #1
 8002b70:	f004 f854 	bl	8006c1c <trace_print_module_function>
	return Status;
 8002b74:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3724      	adds	r7, #36	; 0x24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd90      	pop	{r4, r7, pc}
 8002b80:	2000044c 	.word	0x2000044c
 8002b84:	0800b7b8 	.word	0x0800b7b8
 8002b88:	0800b048 	.word	0x0800b048
 8002b8c:	0800b05c 	.word	0x0800b05c

08002b90 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af04      	add	r7, sp, #16
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");
 8002b9e:	4b27      	ldr	r3, [pc, #156]	; (8002c3c <VL53L0X_GetWrapAroundCheckEnable+0xac>)
 8002ba0:	681c      	ldr	r4, [r3, #0]
 8002ba2:	f004 f8e9 	bl	8006d78 <HAL_GetTick>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <VL53L0X_GetWrapAroundCheckEnable+0xb0>)
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	9200      	str	r2, [sp, #0]
 8002bb0:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <VL53L0X_GetWrapAroundCheckEnable+0xb4>)
 8002bb2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f004 f82f 	bl	8006c1c <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8002bbe:	f107 030e 	add.w	r3, r7, #14
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe fbf2 	bl	80013b0 <VL53L0X_RdByte>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8002bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10e      	bne.n	8002bf6 <VL53L0X_GetWrapAroundCheckEnable+0x66>
		PALDevDataSet(Dev, SequenceConfig, data);
 8002bd8:	7bba      	ldrb	r2, [r7, #14]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8002be0:	7bbb      	ldrb	r3, [r7, #14]
 8002be2:	b25b      	sxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	da03      	bge.n	8002bf0 <VL53L0X_GetWrapAroundCheckEnable+0x60>
			*pWrapAroundCheckEnable = 0x01;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e002      	b.n	8002bf6 <VL53L0X_GetWrapAroundCheckEnable+0x66>
		else
			*pWrapAroundCheckEnable = 0x00;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d104      	bne.n	8002c08 <VL53L0X_GetWrapAroundCheckEnable+0x78>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <VL53L0X_GetWrapAroundCheckEnable+0xac>)
 8002c0a:	681c      	ldr	r4, [r3, #0]
 8002c0c:	f004 f8b4 	bl	8006d78 <HAL_GetTick>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c18:	9302      	str	r3, [sp, #8]
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <VL53L0X_GetWrapAroundCheckEnable+0xb0>)
 8002c1c:	9301      	str	r3, [sp, #4]
 8002c1e:	9200      	str	r2, [sp, #0]
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <VL53L0X_GetWrapAroundCheckEnable+0xb8>)
 8002c22:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002c26:	4621      	mov	r1, r4
 8002c28:	2001      	movs	r0, #1
 8002c2a:	f003 fff7 	bl	8006c1c <trace_print_module_function>
	return Status;
 8002c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd90      	pop	{r4, r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	2000044c 	.word	0x2000044c
 8002c40:	0800b818 	.word	0x0800b818
 8002c44:	0800b048 	.word	0x0800b048
 8002c48:	0800b05c 	.word	0x0800b05c

08002c4c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b089      	sub	sp, #36	; 0x24
 8002c50:	af04      	add	r7, sp, #16
 8002c52:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");
 8002c58:	4b28      	ldr	r3, [pc, #160]	; (8002cfc <VL53L0X_PerformSingleMeasurement+0xb0>)
 8002c5a:	681c      	ldr	r4, [r3, #0]
 8002c5c:	f004 f88c 	bl	8006d78 <HAL_GetTick>
 8002c60:	4603      	mov	r3, r0
 8002c62:	461a      	mov	r2, r3
 8002c64:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <VL53L0X_PerformSingleMeasurement+0xb4>)
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	9200      	str	r2, [sp, #0]
 8002c6a:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <VL53L0X_PerformSingleMeasurement+0xb8>)
 8002c6c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002c70:	4621      	mov	r1, r4
 8002c72:	2001      	movs	r0, #1
 8002c74:	f003 ffd2 	bl	8006c1c <trace_print_module_function>

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8002c78:	f107 030e 	add.w	r3, r7, #14
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff f930 	bl	8001ee4 <VL53L0X_GetDeviceMode>
 8002c84:	4603      	mov	r3, r0
 8002c86:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8002c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d107      	bne.n	8002ca0 <VL53L0X_PerformSingleMeasurement+0x54>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002c90:	7bbb      	ldrb	r3, [r7, #14]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d104      	bne.n	8002ca0 <VL53L0X_PerformSingleMeasurement+0x54>
		Status = VL53L0X_StartMeasurement(Dev);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f8e0 	bl	8002e5c <VL53L0X_StartMeasurement>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8002ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d104      	bne.n	8002cb2 <VL53L0X_PerformSingleMeasurement+0x66>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f001 fd11 	bl	80046d0 <VL53L0X_measurement_poll_for_completion>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8002cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <VL53L0X_PerformSingleMeasurement+0x7c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002cba:	7bbb      	ldrb	r3, [r7, #14]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d103      	bne.n	8002cc8 <VL53L0X_PerformSingleMeasurement+0x7c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <VL53L0X_PerformSingleMeasurement+0xb0>)
 8002cca:	681c      	ldr	r4, [r3, #0]
 8002ccc:	f004 f854 	bl	8006d78 <HAL_GetTick>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd8:	9302      	str	r3, [sp, #8]
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <VL53L0X_PerformSingleMeasurement+0xb4>)
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	9200      	str	r2, [sp, #0]
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <VL53L0X_PerformSingleMeasurement+0xbc>)
 8002ce2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	2001      	movs	r0, #1
 8002cea:	f003 ff97 	bl	8006c1c <trace_print_module_function>
	return Status;
 8002cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	2000044c 	.word	0x2000044c
 8002d00:	0800b87c 	.word	0x0800b87c
 8002d04:	0800b048 	.word	0x0800b048
 8002d08:	0800b05c 	.word	0x0800b05c

08002d0c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b08b      	sub	sp, #44	; 0x2c
 8002d10:	af04      	add	r7, sp, #16
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <VL53L0X_PerformRefCalibration+0x74>)
 8002d1e:	681c      	ldr	r4, [r3, #0]
 8002d20:	f004 f82a 	bl	8006d78 <HAL_GetTick>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461a      	mov	r2, r3
 8002d28:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <VL53L0X_PerformRefCalibration+0x78>)
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	9200      	str	r2, [sp, #0]
 8002d2e:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <VL53L0X_PerformRefCalibration+0x7c>)
 8002d30:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002d34:	4621      	mov	r1, r4
 8002d36:	2001      	movs	r0, #1
 8002d38:	f003 ff70 	bl	8006c1c <trace_print_module_function>

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f001 fc87 	bl	8004656 <VL53L0X_perform_ref_calibration>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <VL53L0X_PerformRefCalibration+0x74>)
 8002d4e:	681c      	ldr	r4, [r3, #0]
 8002d50:	f004 f812 	bl	8006d78 <HAL_GetTick>
 8002d54:	4603      	mov	r3, r0
 8002d56:	461a      	mov	r2, r3
 8002d58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d5c:	9302      	str	r3, [sp, #8]
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <VL53L0X_PerformRefCalibration+0x78>)
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	9200      	str	r2, [sp, #0]
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <VL53L0X_PerformRefCalibration+0x80>)
 8002d66:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	f003 ff55 	bl	8006c1c <trace_print_module_function>
	return Status;
 8002d72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd90      	pop	{r4, r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	2000044c 	.word	0x2000044c
 8002d84:	0800b8cc 	.word	0x0800b8cc
 8002d88:	0800b048 	.word	0x0800b048
 8002d8c:	0800b05c 	.word	0x0800b05c

08002d90 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8002da6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8002da8:	7dbb      	ldrb	r3, [r7, #22]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d005      	beq.n	8002dba <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8002dae:	7dbb      	ldrb	r3, [r7, #22]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d002      	beq.n	8002dba <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8002db4:	7dbb      	ldrb	r3, [r7, #22]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d147      	bne.n	8002e4a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002dba:	f107 030c 	add.w	r3, r7, #12
 8002dbe:	f107 0210 	add.w	r2, r7, #16
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fc9d 	bl	8003704 <VL53L0X_GetInterruptThresholds>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002dd4:	d803      	bhi.n	8002dde <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8002dd6:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8002dd8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002ddc:	d935      	bls.n	8002e4a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8002dde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d131      	bne.n	8002e4a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d006      	beq.n	8002dfa <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8002dec:	491a      	ldr	r1, [pc, #104]	; (8002e58 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f002 ff88 	bl	8005d04 <VL53L0X_load_tuning_settings>
 8002df4:	4603      	mov	r3, r0
 8002df6:	75fb      	strb	r3, [r7, #23]
 8002df8:	e027      	b.n	8002e4a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	21ff      	movs	r1, #255	; 0xff
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fe fa54 	bl	80012ac <VL53L0X_WrByte>
 8002e04:	4603      	mov	r3, r0
 8002e06:	461a      	mov	r2, r3
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2170      	movs	r1, #112	; 0x70
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe fa4a 	bl	80012ac <VL53L0X_WrByte>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002e22:	2200      	movs	r2, #0
 8002e24:	21ff      	movs	r1, #255	; 0xff
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe fa40 	bl	80012ac <VL53L0X_WrByte>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	7dfb      	ldrb	r3, [r7, #23]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002e36:	2200      	movs	r2, #0
 8002e38:	2180      	movs	r1, #128	; 0x80
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe fa36 	bl	80012ac <VL53L0X_WrByte>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461a      	mov	r2, r3
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8002e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000284 	.word	0x20000284

08002e5c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b08b      	sub	sp, #44	; 0x2c
 8002e60:	af04      	add	r7, sp, #16
 8002e62:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");
 8002e6c:	4b6c      	ldr	r3, [pc, #432]	; (8003020 <VL53L0X_StartMeasurement+0x1c4>)
 8002e6e:	681c      	ldr	r4, [r3, #0]
 8002e70:	f003 ff82 	bl	8006d78 <HAL_GetTick>
 8002e74:	4603      	mov	r3, r0
 8002e76:	461a      	mov	r2, r3
 8002e78:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <VL53L0X_StartMeasurement+0x1c8>)
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	9200      	str	r2, [sp, #0]
 8002e7e:	4b6a      	ldr	r3, [pc, #424]	; (8003028 <VL53L0X_StartMeasurement+0x1cc>)
 8002e80:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002e84:	4621      	mov	r1, r4
 8002e86:	2001      	movs	r0, #1
 8002e88:	f003 fec8 	bl	8006c1c <trace_print_module_function>

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8002e8c:	f107 030e 	add.w	r3, r7, #14
 8002e90:	4619      	mov	r1, r3
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff f826 	bl	8001ee4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2180      	movs	r1, #128	; 0x80
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7fe fa05 	bl	80012ac <VL53L0X_WrByte>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	21ff      	movs	r1, #255	; 0xff
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fe f9fe 	bl	80012ac <VL53L0X_WrByte>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7fe f9f7 	bl	80012ac <VL53L0X_WrByte>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8002ec8:	461a      	mov	r2, r3
 8002eca:	2191      	movs	r1, #145	; 0x91
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7fe f9ed 	bl	80012ac <VL53L0X_WrByte>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	2100      	movs	r1, #0
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fe f9e6 	bl	80012ac <VL53L0X_WrByte>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	21ff      	movs	r1, #255	; 0xff
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7fe f9df 	bl	80012ac <VL53L0X_WrByte>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2180      	movs	r1, #128	; 0x80
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fe f9d8 	bl	80012ac <VL53L0X_WrByte>
 8002efc:	4603      	mov	r3, r0
 8002efe:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8002f00:	7bbb      	ldrb	r3, [r7, #14]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d037      	beq.n	8002f76 <VL53L0X_StartMeasurement+0x11a>
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d04f      	beq.n	8002faa <VL53L0X_StartMeasurement+0x14e>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d167      	bne.n	8002fde <VL53L0X_StartMeasurement+0x182>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8002f0e:	2201      	movs	r2, #1
 8002f10:	2100      	movs	r1, #0
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fe f9ca 	bl	80012ac <VL53L0X_WrByte>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8002f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d15d      	bne.n	8002fe4 <VL53L0X_StartMeasurement+0x188>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <VL53L0X_StartMeasurement+0xe8>
					Status = VL53L0X_RdByte(Dev,
 8002f32:	f107 030d 	add.w	r3, r7, #13
 8002f36:	461a      	mov	r2, r3
 8002f38:	2100      	movs	r1, #0
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fe fa38 	bl	80013b0 <VL53L0X_RdByte>
 8002f40:	4603      	mov	r3, r0
 8002f42:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	3301      	adds	r3, #1
 8002f48:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8002f4a:	7b7a      	ldrb	r2, [r7, #13]
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d107      	bne.n	8002f68 <VL53L0X_StartMeasurement+0x10c>
				&& (Status == VL53L0X_ERROR_NONE)
 8002f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d103      	bne.n	8002f68 <VL53L0X_StartMeasurement+0x10c>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002f66:	d3e1      	bcc.n	8002f2c <VL53L0X_StartMeasurement+0xd0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002f6e:	d339      	bcc.n	8002fe4 <VL53L0X_StartMeasurement+0x188>
				Status = VL53L0X_ERROR_TIME_OUT;
 8002f70:	23f9      	movs	r3, #249	; 0xf9
 8002f72:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8002f74:	e036      	b.n	8002fe4 <VL53L0X_StartMeasurement+0x188>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8002f76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <VL53L0X_StartMeasurement+0x12e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002f7e:	2101      	movs	r1, #1
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff ff05 	bl	8002d90 <VL53L0X_CheckAndLoadInterruptSettings>
 8002f86:	4603      	mov	r3, r0
 8002f88:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fe f98c 	bl	80012ac <VL53L0X_WrByte>
 8002f94:	4603      	mov	r3, r0
 8002f96:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8002f98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d123      	bne.n	8002fe8 <VL53L0X_StartMeasurement+0x18c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8002fa8:	e01e      	b.n	8002fe8 <VL53L0X_StartMeasurement+0x18c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8002faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d105      	bne.n	8002fbe <VL53L0X_StartMeasurement+0x162>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff feeb 	bl	8002d90 <VL53L0X_CheckAndLoadInterruptSettings>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fe f972 	bl	80012ac <VL53L0X_WrByte>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8002fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10b      	bne.n	8002fec <VL53L0X_StartMeasurement+0x190>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8002fdc:	e006      	b.n	8002fec <VL53L0X_StartMeasurement+0x190>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002fde:	23f8      	movs	r3, #248	; 0xf8
 8002fe0:	75fb      	strb	r3, [r7, #23]
 8002fe2:	e004      	b.n	8002fee <VL53L0X_StartMeasurement+0x192>
		break;
 8002fe4:	bf00      	nop
 8002fe6:	e002      	b.n	8002fee <VL53L0X_StartMeasurement+0x192>
		break;
 8002fe8:	bf00      	nop
 8002fea:	e000      	b.n	8002fee <VL53L0X_StartMeasurement+0x192>
		break;
 8002fec:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
 8002fee:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <VL53L0X_StartMeasurement+0x1c4>)
 8002ff0:	681c      	ldr	r4, [r3, #0]
 8002ff2:	f003 fec1 	bl	8006d78 <HAL_GetTick>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ffe:	9302      	str	r3, [sp, #8]
 8003000:	4b08      	ldr	r3, [pc, #32]	; (8003024 <VL53L0X_StartMeasurement+0x1c8>)
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	9200      	str	r2, [sp, #0]
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <VL53L0X_StartMeasurement+0x1d0>)
 8003008:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800300c:	4621      	mov	r1, r4
 800300e:	2001      	movs	r0, #1
 8003010:	f003 fe04 	bl	8006c1c <trace_print_module_function>
	return Status;
 8003014:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003018:	4618      	mov	r0, r3
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	bd90      	pop	{r4, r7, pc}
 8003020:	2000044c 	.word	0x2000044c
 8003024:	0800b950 	.word	0x0800b950
 8003028:	0800b048 	.word	0x0800b048
 800302c:	0800b05c 	.word	0x0800b05c

08003030 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af04      	add	r7, sp, #16
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");
 800303e:	4b2e      	ldr	r3, [pc, #184]	; (80030f8 <VL53L0X_GetMeasurementDataReady+0xc8>)
 8003040:	681c      	ldr	r4, [r3, #0]
 8003042:	f003 fe99 	bl	8006d78 <HAL_GetTick>
 8003046:	4603      	mov	r3, r0
 8003048:	461a      	mov	r2, r3
 800304a:	4b2c      	ldr	r3, [pc, #176]	; (80030fc <VL53L0X_GetMeasurementDataReady+0xcc>)
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	9200      	str	r2, [sp, #0]
 8003050:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <VL53L0X_GetMeasurementDataReady+0xd0>)
 8003052:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003056:	4621      	mov	r1, r4
 8003058:	2001      	movs	r0, #1
 800305a:	f003 fddf 	bl	8006c1c <trace_print_module_function>

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003064:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8003066:	7bbb      	ldrb	r3, [r7, #14]
 8003068:	2b04      	cmp	r3, #4
 800306a:	d112      	bne.n	8003092 <VL53L0X_GetMeasurementDataReady+0x62>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800306c:	f107 0308 	add.w	r3, r7, #8
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fc14 	bl	80038a0 <VL53L0X_GetInterruptMaskStatus>
 8003078:	4603      	mov	r3, r0
 800307a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b04      	cmp	r3, #4
 8003080:	d103      	bne.n	800308a <VL53L0X_GetMeasurementDataReady+0x5a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e01c      	b.n	80030c4 <VL53L0X_GetMeasurementDataReady+0x94>
		else
			*pMeasurementDataReady = 0;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e018      	b.n	80030c4 <VL53L0X_GetMeasurementDataReady+0x94>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8003092:	f107 030d 	add.w	r3, r7, #13
 8003096:	461a      	mov	r2, r3
 8003098:	2114      	movs	r1, #20
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fe f988 	bl	80013b0 <VL53L0X_RdByte>
 80030a0:	4603      	mov	r3, r0
 80030a2:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80030a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <VL53L0X_GetMeasurementDataReady+0x94>
			if (SysRangeStatusRegister & 0x01)
 80030ac:	7b7b      	ldrb	r3, [r7, #13]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <VL53L0X_GetMeasurementDataReady+0x8e>
				*pMeasurementDataReady = 1;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2201      	movs	r2, #1
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	e002      	b.n	80030c4 <VL53L0X_GetMeasurementDataReady+0x94>
			else
				*pMeasurementDataReady = 0;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <VL53L0X_GetMeasurementDataReady+0xc8>)
 80030c6:	681c      	ldr	r4, [r3, #0]
 80030c8:	f003 fe56 	bl	8006d78 <HAL_GetTick>
 80030cc:	4603      	mov	r3, r0
 80030ce:	461a      	mov	r2, r3
 80030d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d4:	9302      	str	r3, [sp, #8]
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <VL53L0X_GetMeasurementDataReady+0xcc>)
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	9200      	str	r2, [sp, #0]
 80030dc:	4b09      	ldr	r3, [pc, #36]	; (8003104 <VL53L0X_GetMeasurementDataReady+0xd4>)
 80030de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80030e2:	4621      	mov	r1, r4
 80030e4:	2001      	movs	r0, #1
 80030e6:	f003 fd99 	bl	8006c1c <trace_print_module_function>
	return Status;
 80030ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd90      	pop	{r4, r7, pc}
 80030f6:	bf00      	nop
 80030f8:	2000044c 	.word	0x2000044c
 80030fc:	0800b984 	.word	0x0800b984
 8003100:	0800b048 	.word	0x0800b048
 8003104:	0800b05c 	.word	0x0800b05c

08003108 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003108:	b5b0      	push	{r4, r5, r7, lr}
 800310a:	b098      	sub	sp, #96	; 0x60
 800310c:	af04      	add	r7, sp, #16
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003112:	2300      	movs	r3, #0
 8003114:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint16_t XtalkRangeMilliMeter;
	uint16_t LinearityCorrectiveGain;
	uint8_t localBuffer[12];
	VL53L0X_RangingMeasurementData_t LastRangeDataBuffer;

	LOG_FUNCTION_START("");
 8003118:	4b9e      	ldr	r3, [pc, #632]	; (8003394 <VL53L0X_GetRangingMeasurementData+0x28c>)
 800311a:	681c      	ldr	r4, [r3, #0]
 800311c:	f003 fe2c 	bl	8006d78 <HAL_GetTick>
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	4b9c      	ldr	r3, [pc, #624]	; (8003398 <VL53L0X_GetRangingMeasurementData+0x290>)
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	9200      	str	r2, [sp, #0]
 800312a:	4b9c      	ldr	r3, [pc, #624]	; (800339c <VL53L0X_GetRangingMeasurementData+0x294>)
 800312c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003130:	4621      	mov	r1, r4
 8003132:	2001      	movs	r0, #1
 8003134:	f003 fd72 	bl	8006c1c <trace_print_module_function>
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8003138:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800313c:	230c      	movs	r3, #12
 800313e:	2114      	movs	r1, #20
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7fe f887 	bl	8001254 <VL53L0X_ReadMulti>
 8003146:	4603      	mov	r3, r0
 8003148:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800314c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 80d2 	bne.w	80032fa <VL53L0X_GetRangingMeasurementData+0x1f2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2200      	movs	r2, #0
 800315a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8003162:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003166:	b29b      	uxth	r3, r3
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	b29a      	uxth	r2, r3
 800316c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003170:	b29b      	uxth	r3, r3
 8003172:	4413      	add	r3, r2
 8003174:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2200      	movs	r2, #0
 800317c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800317e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003182:	b29b      	uxth	r3, r3
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	b29a      	uxth	r2, r3
 8003188:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800318c:	b29b      	uxth	r3, r3
 800318e:	4413      	add	r3, r2
 8003190:	b29b      	uxth	r3, r3
 8003192:	025b      	lsls	r3, r3, #9
 8003194:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800319a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800319c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80031b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80031b6:	025b      	lsls	r3, r3, #9
 80031b8:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80031be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80031da:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80031dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80031e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80031ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80031f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80031f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80031f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031fc:	d047      	beq.n	800328e <VL53L0X_GetRangingMeasurementData+0x186>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80031fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003200:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800320c:	4a64      	ldr	r2, [pc, #400]	; (80033a0 <VL53L0X_GetRangingMeasurementData+0x298>)
 800320e:	fb82 1203 	smull	r1, r2, r2, r3
 8003212:	1192      	asrs	r2, r2, #6
 8003214:	17db      	asrs	r3, r3, #31
 8003216:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8003218:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	7f1b      	ldrb	r3, [r3, #28]
 8003226:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800322a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800322e:	2b00      	cmp	r3, #0
 8003230:	d02d      	beq.n	800328e <VL53L0X_GetRangingMeasurementData+0x186>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8003232:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003234:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003238:	fb02 f303 	mul.w	r3, r2, r3
 800323c:	121b      	asrs	r3, r3, #8
 800323e:	461a      	mov	r2, r3
				if ((SignalRate
 8003240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003242:	4293      	cmp	r3, r2
 8003244:	d10d      	bne.n	8003262 <VL53L0X_GetRangingMeasurementData+0x15a>
					<= 0) {
					if (RangeFractionalEnable)
 8003246:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800324a:	2b00      	cmp	r3, #0
 800324c:	d004      	beq.n	8003258 <VL53L0X_GetRangingMeasurementData+0x150>
						XtalkRangeMilliMeter = 8888;
 800324e:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8003252:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003256:	e016      	b.n	8003286 <VL53L0X_GetRangingMeasurementData+0x17e>
					else
						XtalkRangeMilliMeter = 8888
 8003258:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800325c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003260:	e011      	b.n	8003286 <VL53L0X_GetRangingMeasurementData+0x17e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8003262:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003268:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800326c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800326e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8003272:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8003276:	121b      	asrs	r3, r3, #8
 8003278:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800327a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800327c:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800327e:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8003282:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8003286:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800328a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800328e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00d      	beq.n	80032b2 <VL53L0X_GetRangingMeasurementData+0x1aa>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8003296:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80032a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	019b      	lsls	r3, r3, #6
 80032aa:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	75da      	strb	r2, [r3, #23]
 80032b0:	e006      	b.n	80032c0 <VL53L0X_GetRangingMeasurementData+0x1b8>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80032b8:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2200      	movs	r2, #0
 80032be:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80032c0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80032c4:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80032c8:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	4613      	mov	r3, r2
 80032d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f003 fa74 	bl	80067c4 <VL53L0X_get_pal_range_status>
 80032dc:	4603      	mov	r3, r0
 80032de:	461a      	mov	r2, r3
 80032e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80032ea:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d103      	bne.n	80032fa <VL53L0X_GetRangingMeasurementData+0x1f2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80032f2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80032fa:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d12f      	bne.n	8003362 <VL53L0X_GetRangingMeasurementData+0x25a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f107 040c 	add.w	r4, r7, #12
 8003308:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800330c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800330e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003310:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003314:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800331c:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8003322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800332a:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8003330:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8003336:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800333c:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8003342:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8003348:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8003352:	f107 050c 	add.w	r5, r7, #12
 8003356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800335a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800335e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <VL53L0X_GetRangingMeasurementData+0x28c>)
 8003364:	681c      	ldr	r4, [r3, #0]
 8003366:	f003 fd07 	bl	8006d78 <HAL_GetTick>
 800336a:	4603      	mov	r3, r0
 800336c:	461a      	mov	r2, r3
 800336e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003372:	9302      	str	r3, [sp, #8]
 8003374:	4b08      	ldr	r3, [pc, #32]	; (8003398 <VL53L0X_GetRangingMeasurementData+0x290>)
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	9200      	str	r2, [sp, #0]
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <VL53L0X_GetRangingMeasurementData+0x29c>)
 800337c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003380:	4621      	mov	r1, r4
 8003382:	2001      	movs	r0, #1
 8003384:	f003 fc4a 	bl	8006c1c <trace_print_module_function>
	return Status;
 8003388:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800338c:	4618      	mov	r0, r3
 800338e:	3750      	adds	r7, #80	; 0x50
 8003390:	46bd      	mov	sp, r7
 8003392:	bdb0      	pop	{r4, r5, r7, pc}
 8003394:	2000044c 	.word	0x2000044c
 8003398:	0800b9d0 	.word	0x0800b9d0
 800339c:	0800b048 	.word	0x0800b048
 80033a0:	10624dd3 	.word	0x10624dd3
 80033a4:	0800b05c 	.word	0x0800b05c

080033a8 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af04      	add	r7, sp, #16
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");
 80033b6:	4b26      	ldr	r3, [pc, #152]	; (8003450 <VL53L0X_PerformSingleRangingMeasurement+0xa8>)
 80033b8:	681c      	ldr	r4, [r3, #0]
 80033ba:	f003 fcdd 	bl	8006d78 <HAL_GetTick>
 80033be:	4603      	mov	r3, r0
 80033c0:	461a      	mov	r2, r3
 80033c2:	4b24      	ldr	r3, [pc, #144]	; (8003454 <VL53L0X_PerformSingleRangingMeasurement+0xac>)
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	9200      	str	r2, [sp, #0]
 80033c8:	4b23      	ldr	r3, [pc, #140]	; (8003458 <VL53L0X_PerformSingleRangingMeasurement+0xb0>)
 80033ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80033ce:	4621      	mov	r1, r4
 80033d0:	2001      	movs	r0, #1
 80033d2:	f003 fc23 	bl	8006c1c <trace_print_module_function>

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80033d6:	2100      	movs	r1, #0
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7fe fd0f 	bl	8001dfc <VL53L0X_SetDeviceMode>
 80033de:	4603      	mov	r3, r0
 80033e0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80033e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d104      	bne.n	80033f4 <VL53L0X_PerformSingleRangingMeasurement+0x4c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff fc2e 	bl	8002c4c <VL53L0X_PerformSingleMeasurement>
 80033f0:	4603      	mov	r3, r0
 80033f2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80033f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d105      	bne.n	8003408 <VL53L0X_PerformSingleRangingMeasurement+0x60>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80033fc:	6839      	ldr	r1, [r7, #0]
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff fe82 	bl	8003108 <VL53L0X_GetRangingMeasurementData>
 8003404:	4603      	mov	r3, r0
 8003406:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8003408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d105      	bne.n	800341c <VL53L0X_PerformSingleRangingMeasurement+0x74>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003410:	2100      	movs	r1, #0
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f9d8 	bl	80037c8 <VL53L0X_ClearInterruptMask>
 8003418:	4603      	mov	r3, r0
 800341a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <VL53L0X_PerformSingleRangingMeasurement+0xa8>)
 800341e:	681c      	ldr	r4, [r3, #0]
 8003420:	f003 fcaa 	bl	8006d78 <HAL_GetTick>
 8003424:	4603      	mov	r3, r0
 8003426:	461a      	mov	r2, r3
 8003428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342c:	9302      	str	r3, [sp, #8]
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <VL53L0X_PerformSingleRangingMeasurement+0xac>)
 8003430:	9301      	str	r3, [sp, #4]
 8003432:	9200      	str	r2, [sp, #0]
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <VL53L0X_PerformSingleRangingMeasurement+0xb4>)
 8003436:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800343a:	4621      	mov	r1, r4
 800343c:	2001      	movs	r0, #1
 800343e:	f003 fbed 	bl	8006c1c <trace_print_module_function>
	return Status;
 8003442:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	bd90      	pop	{r4, r7, pc}
 800344e:	bf00      	nop
 8003450:	2000044c 	.word	0x2000044c
 8003454:	0800ba38 	.word	0x0800ba38
 8003458:	0800b048 	.word	0x0800b048
 800345c:	0800b05c 	.word	0x0800b05c

08003460 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b089      	sub	sp, #36	; 0x24
 8003464:	af04      	add	r7, sp, #16
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4603      	mov	r3, r0
 8003470:	70fb      	strb	r3, [r7, #3]
 8003472:	460b      	mov	r3, r1
 8003474:	70bb      	strb	r3, [r7, #2]
 8003476:	4613      	mov	r3, r2
 8003478:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800347a:	2300      	movs	r3, #0
 800347c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");
 800347e:	4b9d      	ldr	r3, [pc, #628]	; (80036f4 <VL53L0X_SetGpioConfig+0x294>)
 8003480:	681c      	ldr	r4, [r3, #0]
 8003482:	f003 fc79 	bl	8006d78 <HAL_GetTick>
 8003486:	4603      	mov	r3, r0
 8003488:	461a      	mov	r2, r3
 800348a:	4b9b      	ldr	r3, [pc, #620]	; (80036f8 <VL53L0X_SetGpioConfig+0x298>)
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	9200      	str	r2, [sp, #0]
 8003490:	4b9a      	ldr	r3, [pc, #616]	; (80036fc <VL53L0X_SetGpioConfig+0x29c>)
 8003492:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003496:	4621      	mov	r1, r4
 8003498:	2001      	movs	r0, #1
 800349a:	f003 fbbf 	bl	8006c1c <trace_print_module_function>

	if (Pin != 0) {
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <VL53L0X_SetGpioConfig+0x4a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80034a4:	23f6      	movs	r3, #246	; 0xf6
 80034a6:	73fb      	strb	r3, [r7, #15]
 80034a8:	e10a      	b.n	80036c0 <VL53L0X_SetGpioConfig+0x260>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80034aa:	78bb      	ldrb	r3, [r7, #2]
 80034ac:	2b14      	cmp	r3, #20
 80034ae:	d111      	bne.n	80034d4 <VL53L0X_SetGpioConfig+0x74>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80034b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <VL53L0X_SetGpioConfig+0x5e>
			data = 0x10;
 80034b8:	2310      	movs	r3, #16
 80034ba:	73bb      	strb	r3, [r7, #14]
 80034bc:	e001      	b.n	80034c2 <VL53L0X_SetGpioConfig+0x62>
		else
			data = 1;
 80034be:	2301      	movs	r3, #1
 80034c0:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80034c2:	7bbb      	ldrb	r3, [r7, #14]
 80034c4:	461a      	mov	r2, r3
 80034c6:	2184      	movs	r1, #132	; 0x84
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7fd feef 	bl	80012ac <VL53L0X_WrByte>
 80034ce:	4603      	mov	r3, r0
 80034d0:	73fb      	strb	r3, [r7, #15]
 80034d2:	e0f5      	b.n	80036c0 <VL53L0X_SetGpioConfig+0x260>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80034d4:	78bb      	ldrb	r3, [r7, #2]
 80034d6:	2b15      	cmp	r3, #21
 80034d8:	f040 8097 	bne.w	800360a <VL53L0X_SetGpioConfig+0x1aa>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80034dc:	2201      	movs	r2, #1
 80034de:	21ff      	movs	r1, #255	; 0xff
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7fd fee3 	bl	80012ac <VL53L0X_WrByte>
 80034e6:	4603      	mov	r3, r0
 80034e8:	461a      	mov	r2, r3
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80034f0:	2200      	movs	r2, #0
 80034f2:	2100      	movs	r1, #0
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7fd fed9 	bl	80012ac <VL53L0X_WrByte>
 80034fa:	4603      	mov	r3, r0
 80034fc:	461a      	mov	r2, r3
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	4313      	orrs	r3, r2
 8003502:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003504:	2200      	movs	r2, #0
 8003506:	21ff      	movs	r1, #255	; 0xff
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7fd fecf 	bl	80012ac <VL53L0X_WrByte>
 800350e:	4603      	mov	r3, r0
 8003510:	461a      	mov	r2, r3
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	4313      	orrs	r3, r2
 8003516:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003518:	2201      	movs	r2, #1
 800351a:	2180      	movs	r1, #128	; 0x80
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7fd fec5 	bl	80012ac <VL53L0X_WrByte>
 8003522:	4603      	mov	r3, r0
 8003524:	461a      	mov	r2, r3
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	4313      	orrs	r3, r2
 800352a:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800352c:	2202      	movs	r2, #2
 800352e:	2185      	movs	r1, #133	; 0x85
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7fd febb 	bl	80012ac <VL53L0X_WrByte>
 8003536:	4603      	mov	r3, r0
 8003538:	461a      	mov	r2, r3
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	4313      	orrs	r3, r2
 800353e:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8003540:	2204      	movs	r2, #4
 8003542:	21ff      	movs	r1, #255	; 0xff
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7fd feb1 	bl	80012ac <VL53L0X_WrByte>
 800354a:	4603      	mov	r3, r0
 800354c:	461a      	mov	r2, r3
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	4313      	orrs	r3, r2
 8003552:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8003554:	2200      	movs	r2, #0
 8003556:	21cd      	movs	r1, #205	; 0xcd
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fd fea7 	bl	80012ac <VL53L0X_WrByte>
 800355e:	4603      	mov	r3, r0
 8003560:	461a      	mov	r2, r3
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	4313      	orrs	r3, r2
 8003566:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8003568:	2211      	movs	r2, #17
 800356a:	21cc      	movs	r1, #204	; 0xcc
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7fd fe9d 	bl	80012ac <VL53L0X_WrByte>
 8003572:	4603      	mov	r3, r0
 8003574:	461a      	mov	r2, r3
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	4313      	orrs	r3, r2
 800357a:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800357c:	2207      	movs	r2, #7
 800357e:	21ff      	movs	r1, #255	; 0xff
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7fd fe93 	bl	80012ac <VL53L0X_WrByte>
 8003586:	4603      	mov	r3, r0
 8003588:	461a      	mov	r2, r3
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	4313      	orrs	r3, r2
 800358e:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8003590:	2200      	movs	r2, #0
 8003592:	21be      	movs	r1, #190	; 0xbe
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7fd fe89 	bl	80012ac <VL53L0X_WrByte>
 800359a:	4603      	mov	r3, r0
 800359c:	461a      	mov	r2, r3
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80035a4:	2206      	movs	r2, #6
 80035a6:	21ff      	movs	r1, #255	; 0xff
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7fd fe7f 	bl	80012ac <VL53L0X_WrByte>
 80035ae:	4603      	mov	r3, r0
 80035b0:	461a      	mov	r2, r3
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80035b8:	2209      	movs	r2, #9
 80035ba:	21cc      	movs	r1, #204	; 0xcc
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7fd fe75 	bl	80012ac <VL53L0X_WrByte>
 80035c2:	4603      	mov	r3, r0
 80035c4:	461a      	mov	r2, r3
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80035cc:	2200      	movs	r2, #0
 80035ce:	21ff      	movs	r1, #255	; 0xff
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7fd fe6b 	bl	80012ac <VL53L0X_WrByte>
 80035d6:	4603      	mov	r3, r0
 80035d8:	461a      	mov	r2, r3
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	4313      	orrs	r3, r2
 80035de:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80035e0:	2201      	movs	r2, #1
 80035e2:	21ff      	movs	r1, #255	; 0xff
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7fd fe61 	bl	80012ac <VL53L0X_WrByte>
 80035ea:	4603      	mov	r3, r0
 80035ec:	461a      	mov	r2, r3
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80035f4:	2200      	movs	r2, #0
 80035f6:	2100      	movs	r1, #0
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7fd fe57 	bl	80012ac <VL53L0X_WrByte>
 80035fe:	4603      	mov	r3, r0
 8003600:	461a      	mov	r2, r3
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	4313      	orrs	r3, r2
 8003606:	73fb      	strb	r3, [r7, #15]
 8003608:	e05a      	b.n	80036c0 <VL53L0X_SetGpioConfig+0x260>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800360a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d122      	bne.n	8003658 <VL53L0X_SetGpioConfig+0x1f8>
			switch (Functionality) {
 8003612:	787b      	ldrb	r3, [r7, #1]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d81c      	bhi.n	8003652 <VL53L0X_SetGpioConfig+0x1f2>
 8003618:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <VL53L0X_SetGpioConfig+0x1c0>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003635 	.word	0x08003635
 8003624:	0800363b 	.word	0x0800363b
 8003628:	08003641 	.word	0x08003641
 800362c:	08003647 	.word	0x08003647
 8003630:	0800364d 	.word	0x0800364d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8003634:	2300      	movs	r3, #0
 8003636:	73bb      	strb	r3, [r7, #14]
				break;
 8003638:	e00f      	b.n	800365a <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800363a:	2301      	movs	r3, #1
 800363c:	73bb      	strb	r3, [r7, #14]
				break;
 800363e:	e00c      	b.n	800365a <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8003640:	2302      	movs	r3, #2
 8003642:	73bb      	strb	r3, [r7, #14]
				break;
 8003644:	e009      	b.n	800365a <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8003646:	2303      	movs	r3, #3
 8003648:	73bb      	strb	r3, [r7, #14]
				break;
 800364a:	e006      	b.n	800365a <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800364c:	2304      	movs	r3, #4
 800364e:	73bb      	strb	r3, [r7, #14]
				break;
 8003650:	e003      	b.n	800365a <VL53L0X_SetGpioConfig+0x1fa>
			default:
				Status =
 8003652:	23f5      	movs	r3, #245	; 0xf5
 8003654:	73fb      	strb	r3, [r7, #15]
 8003656:	e000      	b.n	800365a <VL53L0X_SetGpioConfig+0x1fa>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8003658:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800365a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d107      	bne.n	8003672 <VL53L0X_SetGpioConfig+0x212>
			Status = VL53L0X_WrByte(Dev,
 8003662:	7bbb      	ldrb	r3, [r7, #14]
 8003664:	461a      	mov	r2, r3
 8003666:	210a      	movs	r1, #10
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7fd fe1f 	bl	80012ac <VL53L0X_WrByte>
 800366e:	4603      	mov	r3, r0
 8003670:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8003672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d110      	bne.n	800369c <VL53L0X_SetGpioConfig+0x23c>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800367a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <VL53L0X_SetGpioConfig+0x228>
				data = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	73bb      	strb	r3, [r7, #14]
 8003686:	e001      	b.n	800368c <VL53L0X_SetGpioConfig+0x22c>
			else
				data = (uint8_t)(1 << 4);
 8003688:	2310      	movs	r3, #16
 800368a:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800368c:	7bbb      	ldrb	r3, [r7, #14]
 800368e:	22ef      	movs	r2, #239	; 0xef
 8003690:	2184      	movs	r1, #132	; 0x84
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd fe58 	bl	8001348 <VL53L0X_UpdateByte>
 8003698:	4603      	mov	r3, r0
 800369a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800369c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d103      	bne.n	80036ac <VL53L0X_SetGpioConfig+0x24c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	787a      	ldrb	r2, [r7, #1]
 80036a8:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80036ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d105      	bne.n	80036c0 <VL53L0X_SetGpioConfig+0x260>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80036b4:	2100      	movs	r1, #0
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f886 	bl	80037c8 <VL53L0X_ClearInterruptMask>
 80036bc:	4603      	mov	r3, r0
 80036be:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <VL53L0X_SetGpioConfig+0x294>)
 80036c2:	681c      	ldr	r4, [r3, #0]
 80036c4:	f003 fb58 	bl	8006d78 <HAL_GetTick>
 80036c8:	4603      	mov	r3, r0
 80036ca:	461a      	mov	r2, r3
 80036cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d0:	9302      	str	r3, [sp, #8]
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <VL53L0X_SetGpioConfig+0x298>)
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	9200      	str	r2, [sp, #0]
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <VL53L0X_SetGpioConfig+0x2a0>)
 80036da:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80036de:	4621      	mov	r1, r4
 80036e0:	2001      	movs	r0, #1
 80036e2:	f003 fa9b 	bl	8006c1c <trace_print_module_function>
	return Status;
 80036e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd90      	pop	{r4, r7, pc}
 80036f2:	bf00      	nop
 80036f4:	2000044c 	.word	0x2000044c
 80036f8:	0800bab8 	.word	0x0800bab8
 80036fc:	0800b048 	.word	0x0800b048
 8003700:	0800b05c 	.word	0x0800b05c

08003704 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b08b      	sub	sp, #44	; 0x2c
 8003708:	af04      	add	r7, sp, #16
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	460b      	mov	r3, r1
 8003712:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003714:	2300      	movs	r3, #0
 8003716:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");
 8003718:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <VL53L0X_GetInterruptThresholds+0xb0>)
 800371a:	681c      	ldr	r4, [r3, #0]
 800371c:	f003 fb2c 	bl	8006d78 <HAL_GetTick>
 8003720:	4603      	mov	r3, r0
 8003722:	461a      	mov	r2, r3
 8003724:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <VL53L0X_GetInterruptThresholds+0xb4>)
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	9200      	str	r2, [sp, #0]
 800372a:	4b24      	ldr	r3, [pc, #144]	; (80037bc <VL53L0X_GetInterruptThresholds+0xb8>)
 800372c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003730:	4621      	mov	r1, r4
 8003732:	2001      	movs	r0, #1
 8003734:	f003 fa72 	bl	8006c1c <trace_print_module_function>

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8003738:	f107 0314 	add.w	r3, r7, #20
 800373c:	461a      	mov	r2, r3
 800373e:	210e      	movs	r1, #14
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f7fd fe5f 	bl	8001404 <VL53L0X_RdWord>
 8003746:	4603      	mov	r3, r0
 8003748:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800374a:	8abb      	ldrh	r3, [r7, #20]
 800374c:	045b      	lsls	r3, r3, #17
 800374e:	461a      	mov	r2, r3
 8003750:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <VL53L0X_GetInterruptThresholds+0xbc>)
 8003752:	4013      	ands	r3, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8003758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10f      	bne.n	8003780 <VL53L0X_GetInterruptThresholds+0x7c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8003760:	f107 0314 	add.w	r3, r7, #20
 8003764:	461a      	mov	r2, r3
 8003766:	210c      	movs	r1, #12
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f7fd fe4b 	bl	8001404 <VL53L0X_RdWord>
 800376e:	4603      	mov	r3, r0
 8003770:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8003772:	8abb      	ldrh	r3, [r7, #20]
 8003774:	045b      	lsls	r3, r3, #17
 8003776:	461a      	mov	r2, r3
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <VL53L0X_GetInterruptThresholds+0xbc>)
 800377a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <VL53L0X_GetInterruptThresholds+0xb0>)
 8003782:	681c      	ldr	r4, [r3, #0]
 8003784:	f003 faf8 	bl	8006d78 <HAL_GetTick>
 8003788:	4603      	mov	r3, r0
 800378a:	461a      	mov	r2, r3
 800378c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003790:	9302      	str	r3, [sp, #8]
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <VL53L0X_GetInterruptThresholds+0xb4>)
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	9200      	str	r2, [sp, #0]
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <VL53L0X_GetInterruptThresholds+0xc0>)
 800379a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800379e:	4621      	mov	r1, r4
 80037a0:	2001      	movs	r0, #1
 80037a2:	f003 fa3b 	bl	8006c1c <trace_print_module_function>
	return Status;
 80037a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd90      	pop	{r4, r7, pc}
 80037b2:	bf00      	nop
 80037b4:	2000044c 	.word	0x2000044c
 80037b8:	0800bb08 	.word	0x0800bb08
 80037bc:	0800b048 	.word	0x0800b048
 80037c0:	1ffe0000 	.word	0x1ffe0000
 80037c4:	0800b05c 	.word	0x0800b05c

080037c8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80037c8:	b590      	push	{r4, r7, lr}
 80037ca:	b089      	sub	sp, #36	; 0x24
 80037cc:	af04      	add	r7, sp, #16
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");
 80037d6:	4b2e      	ldr	r3, [pc, #184]	; (8003890 <VL53L0X_ClearInterruptMask+0xc8>)
 80037d8:	681c      	ldr	r4, [r3, #0]
 80037da:	f003 facd 	bl	8006d78 <HAL_GetTick>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b2c      	ldr	r3, [pc, #176]	; (8003894 <VL53L0X_ClearInterruptMask+0xcc>)
 80037e4:	9301      	str	r3, [sp, #4]
 80037e6:	9200      	str	r2, [sp, #0]
 80037e8:	4b2b      	ldr	r3, [pc, #172]	; (8003898 <VL53L0X_ClearInterruptMask+0xd0>)
 80037ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80037ee:	4621      	mov	r1, r4
 80037f0:	2001      	movs	r0, #1
 80037f2:	f003 fa13 	bl	8006c1c <trace_print_module_function>

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80037fa:	2201      	movs	r2, #1
 80037fc:	210b      	movs	r1, #11
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fd fd54 	bl	80012ac <VL53L0X_WrByte>
 8003804:	4603      	mov	r3, r0
 8003806:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8003808:	2200      	movs	r2, #0
 800380a:	210b      	movs	r1, #11
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7fd fd4d 	bl	80012ac <VL53L0X_WrByte>
 8003812:	4603      	mov	r3, r0
 8003814:	461a      	mov	r2, r3
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	4313      	orrs	r3, r2
 800381a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800381c:	f107 030d 	add.w	r3, r7, #13
 8003820:	461a      	mov	r2, r3
 8003822:	2113      	movs	r1, #19
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7fd fdc3 	bl	80013b0 <VL53L0X_RdByte>
 800382a:	4603      	mov	r3, r0
 800382c:	461a      	mov	r2, r3
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	4313      	orrs	r3, r2
 8003832:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8003834:	7bbb      	ldrb	r3, [r7, #14]
 8003836:	3301      	adds	r3, #1
 8003838:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800383a:	7b7b      	ldrb	r3, [r7, #13]
 800383c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8003840:	2b00      	cmp	r3, #0
 8003842:	d006      	beq.n	8003852 <VL53L0X_ClearInterruptMask+0x8a>
			&& (LoopCount < 3)
 8003844:	7bbb      	ldrb	r3, [r7, #14]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d803      	bhi.n	8003852 <VL53L0X_ClearInterruptMask+0x8a>
			&& (Status == VL53L0X_ERROR_NONE));
 800384a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0d3      	beq.n	80037fa <VL53L0X_ClearInterruptMask+0x32>


	if (LoopCount >= 3)
 8003852:	7bbb      	ldrb	r3, [r7, #14]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <VL53L0X_ClearInterruptMask+0x94>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8003858:	23f4      	movs	r3, #244	; 0xf4
 800385a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <VL53L0X_ClearInterruptMask+0xc8>)
 800385e:	681c      	ldr	r4, [r3, #0]
 8003860:	f003 fa8a 	bl	8006d78 <HAL_GetTick>
 8003864:	4603      	mov	r3, r0
 8003866:	461a      	mov	r2, r3
 8003868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386c:	9302      	str	r3, [sp, #8]
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <VL53L0X_ClearInterruptMask+0xcc>)
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	9200      	str	r2, [sp, #0]
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <VL53L0X_ClearInterruptMask+0xd4>)
 8003876:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800387a:	4621      	mov	r1, r4
 800387c:	2001      	movs	r0, #1
 800387e:	f003 f9cd 	bl	8006c1c <trace_print_module_function>
	return Status;
 8003882:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	bd90      	pop	{r4, r7, pc}
 800388e:	bf00      	nop
 8003890:	2000044c 	.word	0x2000044c
 8003894:	0800bb48 	.word	0x0800bb48
 8003898:	0800b048 	.word	0x0800b048
 800389c:	0800b05c 	.word	0x0800b05c

080038a0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80038a0:	b590      	push	{r4, r7, lr}
 80038a2:	b089      	sub	sp, #36	; 0x24
 80038a4:	af04      	add	r7, sp, #16
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");
 80038ae:	4b1f      	ldr	r3, [pc, #124]	; (800392c <VL53L0X_GetInterruptMaskStatus+0x8c>)
 80038b0:	681c      	ldr	r4, [r3, #0]
 80038b2:	f003 fa61 	bl	8006d78 <HAL_GetTick>
 80038b6:	4603      	mov	r3, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <VL53L0X_GetInterruptMaskStatus+0x90>)
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	9200      	str	r2, [sp, #0]
 80038c0:	4b1c      	ldr	r3, [pc, #112]	; (8003934 <VL53L0X_GetInterruptMaskStatus+0x94>)
 80038c2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80038c6:	4621      	mov	r1, r4
 80038c8:	2001      	movs	r0, #1
 80038ca:	f003 f9a7 	bl	8006c1c <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80038ce:	f107 030e 	add.w	r3, r7, #14
 80038d2:	461a      	mov	r2, r3
 80038d4:	2113      	movs	r1, #19
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd fd6a 	bl	80013b0 <VL53L0X_RdByte>
 80038dc:	4603      	mov	r3, r0
 80038de:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80038e0:	7bbb      	ldrb	r3, [r7, #14]
 80038e2:	f003 0207 	and.w	r2, r3, #7
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80038ea:	7bbb      	ldrb	r3, [r7, #14]
 80038ec:	f003 0318 	and.w	r3, r3, #24
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <VL53L0X_GetInterruptMaskStatus+0x58>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80038f4:	23fa      	movs	r3, #250	; 0xfa
 80038f6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
 80038f8:	4b0c      	ldr	r3, [pc, #48]	; (800392c <VL53L0X_GetInterruptMaskStatus+0x8c>)
 80038fa:	681c      	ldr	r4, [r3, #0]
 80038fc:	f003 fa3c 	bl	8006d78 <HAL_GetTick>
 8003900:	4603      	mov	r3, r0
 8003902:	461a      	mov	r2, r3
 8003904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003908:	9302      	str	r3, [sp, #8]
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <VL53L0X_GetInterruptMaskStatus+0x90>)
 800390c:	9301      	str	r3, [sp, #4]
 800390e:	9200      	str	r2, [sp, #0]
 8003910:	4b09      	ldr	r3, [pc, #36]	; (8003938 <VL53L0X_GetInterruptMaskStatus+0x98>)
 8003912:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003916:	4621      	mov	r1, r4
 8003918:	2001      	movs	r0, #1
 800391a:	f003 f97f 	bl	8006c1c <trace_print_module_function>
	return Status;
 800391e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	bd90      	pop	{r4, r7, pc}
 800392a:	bf00      	nop
 800392c:	2000044c 	.word	0x2000044c
 8003930:	0800bb64 	.word	0x0800bb64
 8003934:	0800b048 	.word	0x0800b048
 8003938:	0800b05c 	.word	0x0800b05c

0800393c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b08b      	sub	sp, #44	; 0x2c
 8003940:	af04      	add	r7, sp, #16
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003948:	2300      	movs	r3, #0
 800394a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 800394c:	4b17      	ldr	r3, [pc, #92]	; (80039ac <VL53L0X_PerformRefSpadManagement+0x70>)
 800394e:	681c      	ldr	r4, [r3, #0]
 8003950:	f003 fa12 	bl	8006d78 <HAL_GetTick>
 8003954:	4603      	mov	r3, r0
 8003956:	461a      	mov	r2, r3
 8003958:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <VL53L0X_PerformRefSpadManagement+0x74>)
 800395a:	9301      	str	r3, [sp, #4]
 800395c:	9200      	str	r2, [sp, #0]
 800395e:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <VL53L0X_PerformRefSpadManagement+0x78>)
 8003960:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003964:	4621      	mov	r1, r4
 8003966:	2001      	movs	r0, #1
 8003968:	f003 f958 	bl	8006c1c <trace_print_module_function>

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fa1f 	bl	8003db4 <VL53L0X_perform_ref_spad_management>
 8003976:	4603      	mov	r3, r0
 8003978:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);
 800397a:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <VL53L0X_PerformRefSpadManagement+0x70>)
 800397c:	681c      	ldr	r4, [r3, #0]
 800397e:	f003 f9fb 	bl	8006d78 <HAL_GetTick>
 8003982:	4603      	mov	r3, r0
 8003984:	461a      	mov	r2, r3
 8003986:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800398a:	9302      	str	r3, [sp, #8]
 800398c:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <VL53L0X_PerformRefSpadManagement+0x74>)
 800398e:	9301      	str	r3, [sp, #4]
 8003990:	9200      	str	r2, [sp, #0]
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <VL53L0X_PerformRefSpadManagement+0x7c>)
 8003994:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003998:	4621      	mov	r1, r4
 800399a:	2001      	movs	r0, #1
 800399c:	f003 f93e 	bl	8006c1c <trace_print_module_function>

	return Status;
 80039a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd90      	pop	{r4, r7, pc}
 80039ac:	2000044c 	.word	0x2000044c
 80039b0:	0800bc70 	.word	0x0800bc70
 80039b4:	0800b048 	.word	0x0800b048
 80039b8:	0800b05c 	.word	0x0800b05c

080039bc <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039c6:	2300      	movs	r3, #0
 80039c8:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80039ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80039ce:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80039d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039d4:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80039d6:	f107 0308 	add.w	r3, r7, #8
 80039da:	461a      	mov	r2, r3
 80039dc:	2128      	movs	r1, #40	; 0x28
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd fd10 	bl	8001404 <VL53L0X_RdWord>
 80039e4:	4603      	mov	r3, r0
 80039e6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80039e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d11e      	bne.n	8003a2e <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80039f0:	893b      	ldrh	r3, [r7, #8]
 80039f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80039fa:	893b      	ldrh	r3, [r7, #8]
 80039fc:	461a      	mov	r2, r3
 80039fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	dd0b      	ble.n	8003a1e <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8003a06:	893a      	ldrh	r2, [r7, #8]
 8003a08:	897b      	ldrh	r3, [r7, #10]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	b21b      	sxth	r3, r3
 8003a10:	461a      	mov	r2, r3
					* 250;
 8003a12:	23fa      	movs	r3, #250	; 0xfa
 8003a14:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	e007      	b.n	8003a2e <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8003a1e:	893b      	ldrh	r3, [r7, #8]
 8003a20:	b21b      	sxth	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	23fa      	movs	r3, #250	; 0xfa
 8003a26:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8003a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b08b      	sub	sp, #44	; 0x2c
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8003a48:	2308      	movs	r3, #8
 8003a4a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	f04f 32ff 	mov.w	r2, #4294967295
 8003a56:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a60:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a6a:	69b9      	ldr	r1, [r7, #24]
 8003a6c:	fb01 f202 	mul.w	r2, r1, r2
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
 8003a78:	e030      	b.n	8003adc <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	4413      	add	r3, r2
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8003a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d11e      	bne.n	8003ace <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8003a90:	7ffa      	ldrb	r2, [r7, #31]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	fa42 f303 	asr.w	r3, r2, r3
 8003a98:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8003a9e:	e016      	b.n	8003ace <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8003aa0:	7ffb      	ldrb	r3, [r7, #31]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <get_next_good_spad+0x88>
				success = 1;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	fb02 f203 	mul.w	r2, r2, r3
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	4413      	add	r3, r2
 8003aba:	461a      	mov	r2, r3
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	601a      	str	r2, [r3, #0]
				break;
 8003ac0:	e009      	b.n	8003ad6 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8003ac2:	7ffb      	ldrb	r3, [r7, #31]
 8003ac4:	085b      	lsrs	r3, r3, #1
 8003ac6:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	3301      	adds	r3, #1
 8003acc:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8003ace:	6a3a      	ldr	r2, [r7, #32]
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d3e4      	bcc.n	8003aa0 <get_next_good_spad+0x66>
				coarseIndex++) {
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	3301      	adds	r3, #1
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8003adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d202      	bcs.n	8003aea <get_next_good_spad+0xb0>
 8003ae4:	7fbb      	ldrb	r3, [r7, #30]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0c7      	beq.n	8003a7a <get_next_good_spad+0x40>
		}
	}
}
 8003aea:	bf00      	nop
 8003aec:	372c      	adds	r7, #44	; 0x2c
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	099b      	lsrs	r3, r3, #6
 8003b08:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8003b0a:	4a07      	ldr	r2, [pc, #28]	; (8003b28 <is_aperture+0x30>)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <is_aperture+0x22>
		isAperture = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	2000043c 	.word	0x2000043c

08003b2c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b089      	sub	sp, #36	; 0x24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8003b3c:	2308      	movs	r3, #8
 8003b3e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b52:	69b9      	ldr	r1, [r7, #24]
 8003b54:	fb01 f202 	mul.w	r2, r1, r2
 8003b58:	1a9b      	subs	r3, r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d302      	bcc.n	8003b6a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003b64:	23ce      	movs	r3, #206	; 0xce
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	e010      	b.n	8003b8c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	4413      	add	r3, r2
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b25a      	sxtb	r2, r3
 8003b74:	2101      	movs	r1, #1
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	b25b      	sxtb	r3, r3
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	b259      	sxtb	r1, r3
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	4413      	add	r3, r2
 8003b88:	b2ca      	uxtb	r2, r1
 8003b8a:	701a      	strb	r2, [r3, #0]

	return status;
 8003b8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3724      	adds	r7, #36	; 0x24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8003ba6:	2306      	movs	r3, #6
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	21b0      	movs	r1, #176	; 0xb0
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7fd fb21 	bl	80011f4 <VL53L0X_WriteMulti>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8003bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8003bcc:	2306      	movs	r3, #6
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	21b0      	movs	r1, #176	; 0xb0
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fd fb3e 	bl	8001254 <VL53L0X_ReadMulti>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8003bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08c      	sub	sp, #48	; 0x30
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8003bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c00:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8003c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c04:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8003c06:	2300      	movs	r3, #0
 8003c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c0a:	e02b      	b.n	8003c64 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8003c0c:	f107 031c 	add.w	r3, r7, #28
 8003c10:	6a3a      	ldr	r2, [r7, #32]
 8003c12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ff10 	bl	8003a3a <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d103      	bne.n	8003c2a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003c22:	23ce      	movs	r3, #206	; 0xce
 8003c24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8003c28:	e020      	b.n	8003c6c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c30:	4413      	add	r3, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff ff60 	bl	8003af8 <is_aperture>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	7afb      	ldrb	r3, [r7, #11]
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003c42:	23ce      	movs	r3, #206	; 0xce
 8003c44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8003c48:	e010      	b.n	8003c6c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8003c4e:	6a3a      	ldr	r2, [r7, #32]
 8003c50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c52:	6838      	ldr	r0, [r7, #0]
 8003c54:	f7ff ff6a 	bl	8003b2c <enable_spad_bit>
		currentSpad++;
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	3301      	adds	r3, #1
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d3cf      	bcc.n	8003c0c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8003c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c6e:	6a3a      	ldr	r2, [r7, #32]
 8003c70:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8003c72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8003c7a:	6839      	ldr	r1, [r7, #0]
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff ff8d 	bl	8003b9c <set_ref_spad_map>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8003c88:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d121      	bne.n	8003cd4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8003c90:	f107 0314 	add.w	r3, r7, #20
 8003c94:	4619      	mov	r1, r3
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7ff ff93 	bl	8003bc2 <get_ref_spad_map>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8003ca6:	e011      	b.n	8003ccc <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	4413      	add	r3, r2
 8003cae:	781a      	ldrb	r2, [r3, #0]
 8003cb0:	f107 0114 	add.w	r1, r7, #20
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	440b      	add	r3, r1
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d003      	beq.n	8003cc6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003cbe:	23ce      	movs	r3, #206	; 0xce
 8003cc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8003cc4:	e006      	b.n	8003cd4 <enable_ref_spads+0xec>
			}
			i++;
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	3301      	adds	r3, #1
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8003ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d3e9      	bcc.n	8003ca8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8003cd4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3730      	adds	r7, #48	; 0x30
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	; 0x28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003cea:	2300      	movs	r3, #0
 8003cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003cfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8003d00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d107      	bne.n	8003d18 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8003d08:	22c0      	movs	r2, #192	; 0xc0
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7fd facd 	bl	80012ac <VL53L0X_WrByte>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8003d18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d108      	bne.n	8003d32 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8003d20:	f107 0308 	add.w	r3, r7, #8
 8003d24:	4619      	mov	r1, r3
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff fb3e 	bl	80033a8 <VL53L0X_PerformSingleRangingMeasurement>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8003d32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d107      	bne.n	8003d4a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	21ff      	movs	r1, #255	; 0xff
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fd fab4 	bl	80012ac <VL53L0X_WrByte>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8003d4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d107      	bne.n	8003d62 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	21b6      	movs	r1, #182	; 0xb6
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fd fb54 	bl	8001404 <VL53L0X_RdWord>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8003d62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d107      	bne.n	8003d7a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	21ff      	movs	r1, #255	; 0xff
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd fa9c 	bl	80012ac <VL53L0X_WrByte>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8003d7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d112      	bne.n	8003da8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003d82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d86:	461a      	mov	r2, r3
 8003d88:	2101      	movs	r1, #1
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd fa8e 	bl	80012ac <VL53L0X_WrByte>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8003d96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d104      	bne.n	8003da8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003da4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8003da8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3728      	adds	r7, #40	; 0x28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b09d      	sub	sp, #116	; 0x74
 8003db8:	af06      	add	r7, sp, #24
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8003dc6:	23b4      	movs	r3, #180	; 0xb4
 8003dc8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8003dd0:	232c      	movs	r3, #44	; 0x2c
 8003dd2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8003de0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003de4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8003dee:	2306      	movs	r3, #6
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8003e18:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e1e:	e009      	b.n	8003e34 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8003e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e30:	3301      	adds	r3, #1
 8003e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d3f1      	bcc.n	8003e20 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	21ff      	movs	r1, #255	; 0xff
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f7fd fa33 	bl	80012ac <VL53L0X_WrByte>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003e4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d107      	bne.n	8003e64 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8003e54:	2200      	movs	r2, #0
 8003e56:	214f      	movs	r1, #79	; 0x4f
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f7fd fa27 	bl	80012ac <VL53L0X_WrByte>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003e64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d107      	bne.n	8003e7c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8003e6c:	222c      	movs	r2, #44	; 0x2c
 8003e6e:	214e      	movs	r1, #78	; 0x4e
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7fd fa1b 	bl	80012ac <VL53L0X_WrByte>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8003e7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d107      	bne.n	8003e94 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003e84:	2200      	movs	r2, #0
 8003e86:	21ff      	movs	r1, #255	; 0xff
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7fd fa0f 	bl	80012ac <VL53L0X_WrByte>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003e94:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d109      	bne.n	8003eb0 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8003e9c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	21b6      	movs	r1, #182	; 0xb6
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7fd fa01 	bl	80012ac <VL53L0X_WrByte>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8003eb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d107      	bne.n	8003ec8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2180      	movs	r1, #128	; 0x80
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7fd f9f5 	bl	80012ac <VL53L0X_WrByte>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8003ec8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10a      	bne.n	8003ee6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8003ed0:	f107 0210 	add.w	r2, r7, #16
 8003ed4:	f107 0111 	add.w	r1, r7, #17
 8003ed8:	2300      	movs	r3, #0
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fbbb 	bl	8004656 <VL53L0X_perform_ref_calibration>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8003ee6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d121      	bne.n	8003f32 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8003ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8003efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8003f0a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003f0e:	f107 0218 	add.w	r2, r7, #24
 8003f12:	9204      	str	r2, [sp, #16]
 8003f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f16:	9203      	str	r2, [sp, #12]
 8003f18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f1a:	9202      	str	r2, [sp, #8]
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	4623      	mov	r3, r4
 8003f24:	4602      	mov	r2, r0
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f7ff fe5e 	bl	8003be8 <enable_ref_spads>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003f32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d174      	bne.n	8004024 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8003f3e:	f107 0312 	add.w	r3, r7, #18
 8003f42:	4619      	mov	r1, r3
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f7ff fecb 	bl	8003ce0 <perform_ref_signal_measurement>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8003f50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d161      	bne.n	800401c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8003f58:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8003f5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d25d      	bcs.n	800401c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8003f60:	2300      	movs	r3, #0
 8003f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f64:	e009      	b.n	8003f7a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8003f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f76:	3301      	adds	r3, #1
 8003f78:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d3f1      	bcc.n	8003f66 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8003f82:	e002      	b.n	8003f8a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8003f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f86:	3301      	adds	r3, #1
 8003f88:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8003f8a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8003f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f90:	4413      	add	r3, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fdb0 	bl	8003af8 <is_aperture>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d103      	bne.n	8003fa6 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8003f9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d3ee      	bcc.n	8003f84 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8003faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fac:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8003fba:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003fbe:	f107 0218 	add.w	r2, r7, #24
 8003fc2:	9204      	str	r2, [sp, #16]
 8003fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fc6:	9203      	str	r2, [sp, #12]
 8003fc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003fca:	9202      	str	r2, [sp, #8]
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	4623      	mov	r3, r4
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f7ff fe06 	bl	8003be8 <enable_ref_spads>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8003fe2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d11b      	bne.n	8004022 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8003fee:	f107 0312 	add.w	r3, r7, #18
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f7ff fe73 	bl	8003ce0 <perform_ref_signal_measurement>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8004000:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10c      	bne.n	8004022 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8004008:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800400a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800400c:	429a      	cmp	r2, r3
 800400e:	d208      	bcs.n	8004022 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8004016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004018:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800401a:	e002      	b.n	8004022 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800401c:	2300      	movs	r3, #0
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004020:	e000      	b.n	8004024 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8004022:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004024:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004028:	2b00      	cmp	r3, #0
 800402a:	f040 80af 	bne.w	800418c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800402e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8004030:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004032:	429a      	cmp	r2, r3
 8004034:	f240 80aa 	bls.w	800418c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8004038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800403e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004040:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8004048:	f107 031c 	add.w	r3, r7, #28
 800404c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800404e:	4618      	mov	r0, r3
 8004050:	f006 f952 	bl	800a2f8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8004054:	8a7b      	ldrh	r3, [r7, #18]
 8004056:	461a      	mov	r2, r3
 8004058:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	bfb8      	it	lt
 8004060:	425b      	neglt	r3, r3
 8004062:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800406a:	e086      	b.n	800417a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8004072:	f107 0314 	add.w	r3, r7, #20
 8004076:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800407a:	f7ff fcde 	bl	8003a3a <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d103      	bne.n	800408e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004086:	23ce      	movs	r3, #206	; 0xce
 8004088:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800408c:	e07e      	b.n	800418c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800408e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4413      	add	r3, r2
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff fd2e 	bl	8003af8 <is_aperture>
 800409c:	4603      	mov	r3, r0
 800409e:	461a      	mov	r2, r3
 80040a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d003      	beq.n	80040ae <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80040a6:	2301      	movs	r3, #1
 80040a8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80040ac:	e06e      	b.n	800418c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80040ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b0:	3301      	adds	r3, #1
 80040b2:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80040be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fd32 	bl	8003b2c <enable_spad_bit>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80040ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10c      	bne.n	80040f0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80040d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d8:	3301      	adds	r3, #1
 80040da:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80040e2:	4619      	mov	r1, r3
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f7ff fd59 	bl	8003b9c <set_ref_spad_map>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80040f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d146      	bne.n	8004186 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80040f8:	f107 0312 	add.w	r3, r7, #18
 80040fc:	4619      	mov	r1, r3
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f7ff fdee 	bl	8003ce0 <perform_ref_signal_measurement>
 8004104:	4603      	mov	r3, r0
 8004106:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800410a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800410e:	2b00      	cmp	r3, #0
 8004110:	d13b      	bne.n	800418a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8004112:	8a7b      	ldrh	r3, [r7, #18]
 8004114:	461a      	mov	r2, r3
 8004116:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	bfb8      	it	lt
 800411e:	425b      	neglt	r3, r3
 8004120:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8004122:	8a7b      	ldrh	r3, [r7, #18]
 8004124:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004126:	429a      	cmp	r2, r3
 8004128:	d21c      	bcs.n	8004164 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800412a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800412e:	429a      	cmp	r2, r3
 8004130:	d914      	bls.n	800415c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8004132:	f107 031c 	add.w	r3, r7, #28
 8004136:	4619      	mov	r1, r3
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f7ff fd2f 	bl	8003b9c <set_ref_spad_map>
 800413e:	4603      	mov	r3, r0
 8004140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800414a:	f107 011c 	add.w	r1, r7, #28
 800414e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004150:	4618      	mov	r0, r3
 8004152:	f006 f8d1 	bl	800a2f8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8004156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004158:	3b01      	subs	r3, #1
 800415a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004162:	e00a      	b.n	800417a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800416e:	f107 031c 	add.w	r3, r7, #28
 8004172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004174:	4618      	mov	r0, r3
 8004176:	f006 f8bf 	bl	800a2f8 <memcpy>
		while (!complete) {
 800417a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800417e:	2b00      	cmp	r3, #0
 8004180:	f43f af74 	beq.w	800406c <VL53L0X_perform_ref_spad_management+0x2b8>
 8004184:	e002      	b.n	800418c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004186:	bf00      	nop
 8004188:	e000      	b.n	800418c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800418a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800418c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004190:	2b00      	cmp	r3, #0
 8004192:	d115      	bne.n	80041c0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004198:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80041a0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80041c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	375c      	adds	r7, #92	; 0x5c
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd90      	pop	{r4, r7, pc}

080041cc <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80041cc:	b590      	push	{r4, r7, lr}
 80041ce:	b093      	sub	sp, #76	; 0x4c
 80041d0:	af06      	add	r7, sp, #24
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	4613      	mov	r3, r2
 80041d8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041da:	2300      	movs	r3, #0
 80041dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80041e4:	23b4      	movs	r3, #180	; 0xb4
 80041e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80041ea:	2306      	movs	r3, #6
 80041ec:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80041ee:	232c      	movs	r3, #44	; 0x2c
 80041f0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80041f2:	2201      	movs	r2, #1
 80041f4:	21ff      	movs	r1, #255	; 0xff
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7fd f858 	bl	80012ac <VL53L0X_WrByte>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004202:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004206:	2b00      	cmp	r3, #0
 8004208:	d107      	bne.n	800421a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800420a:	2200      	movs	r2, #0
 800420c:	214f      	movs	r1, #79	; 0x4f
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f7fd f84c 	bl	80012ac <VL53L0X_WrByte>
 8004214:	4603      	mov	r3, r0
 8004216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800421a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800421e:	2b00      	cmp	r3, #0
 8004220:	d107      	bne.n	8004232 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8004222:	222c      	movs	r2, #44	; 0x2c
 8004224:	214e      	movs	r1, #78	; 0x4e
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f7fd f840 	bl	80012ac <VL53L0X_WrByte>
 800422c:	4603      	mov	r3, r0
 800422e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004232:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004236:	2b00      	cmp	r3, #0
 8004238:	d107      	bne.n	800424a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800423a:	2200      	movs	r2, #0
 800423c:	21ff      	movs	r1, #255	; 0xff
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7fd f834 	bl	80012ac <VL53L0X_WrByte>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800424a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8004252:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004256:	461a      	mov	r2, r3
 8004258:	21b6      	movs	r1, #182	; 0xb6
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f7fd f826 	bl	80012ac <VL53L0X_WrByte>
 8004260:	4603      	mov	r3, r0
 8004262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8004266:	2300      	movs	r3, #0
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
 800426a:	e009      	b.n	8004280 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	4413      	add	r3, r2
 8004272:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004276:	2200      	movs	r2, #0
 8004278:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	3301      	adds	r3, #1
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
 8004280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	429a      	cmp	r2, r3
 8004286:	d3f1      	bcc.n	800426c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d011      	beq.n	80042b2 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800428e:	e002      	b.n	8004296 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	3301      	adds	r3, #1
 8004294:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004296:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429c:	4413      	add	r3, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff fc2a 	bl	8003af8 <is_aperture>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d103      	bne.n	80042b2 <VL53L0X_set_reference_spads+0xe6>
 80042aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d3ee      	bcc.n	8004290 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80042be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042c2:	79f9      	ldrb	r1, [r7, #7]
 80042c4:	f107 0214 	add.w	r2, r7, #20
 80042c8:	9204      	str	r2, [sp, #16]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	9203      	str	r2, [sp, #12]
 80042ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042d0:	9202      	str	r2, [sp, #8]
 80042d2:	9301      	str	r3, [sp, #4]
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	4623      	mov	r3, r4
 80042da:	4602      	mov	r2, r0
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f7ff fc83 	bl	8003be8 <enable_ref_spads>
 80042e2:	4603      	mov	r3, r0
 80042e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80042e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10c      	bne.n	800430a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	79fa      	ldrb	r2, [r7, #7]
 8004306:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800430a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800430e:	4618      	mov	r0, r3
 8004310:	3734      	adds	r7, #52	; 0x34
 8004312:	46bd      	mov	sp, r7
 8004314:	bd90      	pop	{r4, r7, pc}

08004316 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	460b      	mov	r3, r1
 8004320:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004322:	2300      	movs	r3, #0
 8004324:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10a      	bne.n	8004344 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	2100      	movs	r1, #0
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fc ffb6 	bl	80012ac <VL53L0X_WrByte>
 8004340:	4603      	mov	r3, r0
 8004342:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d104      	bne.n	8004356 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f9bf 	bl	80046d0 <VL53L0X_measurement_poll_for_completion>
 8004352:	4603      	mov	r3, r0
 8004354:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d105      	bne.n	800436a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800435e:	2100      	movs	r1, #0
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff fa31 	bl	80037c8 <VL53L0X_ClearInterruptMask>
 8004366:	4603      	mov	r3, r0
 8004368:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800436a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8004372:	2200      	movs	r2, #0
 8004374:	2100      	movs	r1, #0
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fc ff98 	bl	80012ac <VL53L0X_WrByte>
 800437c:	4603      	mov	r3, r0
 800437e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8004380:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	4608      	mov	r0, r1
 8004396:	4611      	mov	r1, r2
 8004398:	461a      	mov	r2, r3
 800439a:	4603      	mov	r3, r0
 800439c:	70fb      	strb	r3, [r7, #3]
 800439e:	460b      	mov	r3, r1
 80043a0:	70bb      	strb	r3, [r7, #2]
 80043a2:	4613      	mov	r3, r2
 80043a4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80043ae:	2201      	movs	r2, #1
 80043b0:	21ff      	movs	r1, #255	; 0xff
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fc ff7a 	bl	80012ac <VL53L0X_WrByte>
 80043b8:	4603      	mov	r3, r0
 80043ba:	461a      	mov	r2, r3
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	4313      	orrs	r3, r2
 80043c0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80043c2:	2200      	movs	r2, #0
 80043c4:	2100      	movs	r1, #0
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fc ff70 	bl	80012ac <VL53L0X_WrByte>
 80043cc:	4603      	mov	r3, r0
 80043ce:	461a      	mov	r2, r3
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80043d6:	2200      	movs	r2, #0
 80043d8:	21ff      	movs	r1, #255	; 0xff
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fc ff66 	bl	80012ac <VL53L0X_WrByte>
 80043e0:	4603      	mov	r3, r0
 80043e2:	461a      	mov	r2, r3
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01e      	beq.n	800442e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80043f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d009      	beq.n	800440c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	21cb      	movs	r1, #203	; 0xcb
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc ffd7 	bl	80013b0 <VL53L0X_RdByte>
 8004402:	4603      	mov	r3, r0
 8004404:	461a      	mov	r2, r3
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	4313      	orrs	r3, r2
 800440a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800440c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	d02a      	beq.n	800446a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004414:	f107 030e 	add.w	r3, r7, #14
 8004418:	461a      	mov	r2, r3
 800441a:	21ee      	movs	r1, #238	; 0xee
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7fc ffc7 	bl	80013b0 <VL53L0X_RdByte>
 8004422:	4603      	mov	r3, r0
 8004424:	461a      	mov	r2, r3
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	4313      	orrs	r3, r2
 800442a:	73fb      	strb	r3, [r7, #15]
 800442c:	e01d      	b.n	800446a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800442e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8004436:	78bb      	ldrb	r3, [r7, #2]
 8004438:	461a      	mov	r2, r3
 800443a:	21cb      	movs	r1, #203	; 0xcb
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7fc ff35 	bl	80012ac <VL53L0X_WrByte>
 8004442:	4603      	mov	r3, r0
 8004444:	461a      	mov	r2, r3
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	4313      	orrs	r3, r2
 800444a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800444c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8004454:	787b      	ldrb	r3, [r7, #1]
 8004456:	2280      	movs	r2, #128	; 0x80
 8004458:	21ee      	movs	r1, #238	; 0xee
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fc ff74 	bl	8001348 <VL53L0X_UpdateByte>
 8004460:	4603      	mov	r3, r0
 8004462:	461a      	mov	r2, r3
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	4313      	orrs	r3, r2
 8004468:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800446a:	2201      	movs	r2, #1
 800446c:	21ff      	movs	r1, #255	; 0xff
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc ff1c 	bl	80012ac <VL53L0X_WrByte>
 8004474:	4603      	mov	r3, r0
 8004476:	461a      	mov	r2, r3
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	4313      	orrs	r3, r2
 800447c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800447e:	2201      	movs	r2, #1
 8004480:	2100      	movs	r1, #0
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fc ff12 	bl	80012ac <VL53L0X_WrByte>
 8004488:	4603      	mov	r3, r0
 800448a:	461a      	mov	r2, r3
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	4313      	orrs	r3, r2
 8004490:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004492:	2200      	movs	r2, #0
 8004494:	21ff      	movs	r1, #255	; 0xff
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fc ff08 	bl	80012ac <VL53L0X_WrByte>
 800449c:	4603      	mov	r3, r0
 800449e:	461a      	mov	r2, r3
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80044a6:	7bbb      	ldrb	r3, [r7, #14]
 80044a8:	f023 0310 	bic.w	r3, r3, #16
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	701a      	strb	r2, [r3, #0]

	return Status;
 80044b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b08a      	sub	sp, #40	; 0x28
 80044c2:	af04      	add	r7, sp, #16
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	4611      	mov	r1, r2
 80044ca:	461a      	mov	r2, r3
 80044cc:	460b      	mov	r3, r1
 80044ce:	71fb      	strb	r3, [r7, #7]
 80044d0:	4613      	mov	r3, r2
 80044d2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044d4:	2300      	movs	r3, #0
 80044d6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80044d8:	2300      	movs	r3, #0
 80044da:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80044e8:	79bb      	ldrb	r3, [r7, #6]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80044f4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80044f6:	2201      	movs	r2, #1
 80044f8:	2101      	movs	r1, #1
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7fc fed6 	bl	80012ac <VL53L0X_WrByte>
 8004500:	4603      	mov	r3, r0
 8004502:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004504:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d105      	bne.n	8004518 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800450c:	2140      	movs	r1, #64	; 0x40
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f7ff ff01 	bl	8004316 <VL53L0X_perform_single_ref_calibration>
 8004514:	4603      	mov	r3, r0
 8004516:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004518:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d115      	bne.n	800454c <VL53L0X_perform_vhv_calibration+0x8e>
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d112      	bne.n	800454c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004526:	7d39      	ldrb	r1, [r7, #20]
 8004528:	7d7a      	ldrb	r2, [r7, #21]
 800452a:	2300      	movs	r3, #0
 800452c:	9303      	str	r3, [sp, #12]
 800452e:	2301      	movs	r3, #1
 8004530:	9302      	str	r3, [sp, #8]
 8004532:	f107 0313 	add.w	r3, r7, #19
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	460b      	mov	r3, r1
 800453e:	2101      	movs	r1, #1
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f7ff ff23 	bl	800438c <VL53L0X_ref_calibration_io>
 8004546:	4603      	mov	r3, r0
 8004548:	75fb      	strb	r3, [r7, #23]
 800454a:	e002      	b.n	8004552 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2200      	movs	r2, #0
 8004550:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004552:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d112      	bne.n	8004580 <VL53L0X_perform_vhv_calibration+0xc2>
 800455a:	79bb      	ldrb	r3, [r7, #6]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00f      	beq.n	8004580 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004560:	7dbb      	ldrb	r3, [r7, #22]
 8004562:	461a      	mov	r2, r3
 8004564:	2101      	movs	r1, #1
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7fc fea0 	bl	80012ac <VL53L0X_WrByte>
 800456c:	4603      	mov	r3, r0
 800456e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004570:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d103      	bne.n	8004580 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	7dba      	ldrb	r2, [r7, #22]
 800457c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004580:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	; 0x28
 8004590:	af04      	add	r7, sp, #16
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	4611      	mov	r1, r2
 8004598:	461a      	mov	r2, r3
 800459a:	460b      	mov	r3, r1
 800459c:	71fb      	strb	r3, [r7, #7]
 800459e:	4613      	mov	r3, r2
 80045a0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80045b2:	79bb      	ldrb	r3, [r7, #6]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80045be:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80045c0:	2202      	movs	r2, #2
 80045c2:	2101      	movs	r1, #1
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f7fc fe71 	bl	80012ac <VL53L0X_WrByte>
 80045ca:	4603      	mov	r3, r0
 80045cc:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80045ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d105      	bne.n	80045e2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80045d6:	2100      	movs	r1, #0
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff fe9c 	bl	8004316 <VL53L0X_perform_single_ref_calibration>
 80045de:	4603      	mov	r3, r0
 80045e0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80045e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d115      	bne.n	8004616 <VL53L0X_perform_phase_calibration+0x8a>
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d112      	bne.n	8004616 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80045f0:	7d39      	ldrb	r1, [r7, #20]
 80045f2:	7d7a      	ldrb	r2, [r7, #21]
 80045f4:	2301      	movs	r3, #1
 80045f6:	9303      	str	r3, [sp, #12]
 80045f8:	2300      	movs	r3, #0
 80045fa:	9302      	str	r3, [sp, #8]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	9301      	str	r3, [sp, #4]
 8004600:	f107 0313 	add.w	r3, r7, #19
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	460b      	mov	r3, r1
 8004608:	2101      	movs	r1, #1
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f7ff febe 	bl	800438c <VL53L0X_ref_calibration_io>
 8004610:	4603      	mov	r3, r0
 8004612:	75fb      	strb	r3, [r7, #23]
 8004614:	e002      	b.n	800461c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800461c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d112      	bne.n	800464a <VL53L0X_perform_phase_calibration+0xbe>
 8004624:	79bb      	ldrb	r3, [r7, #6]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00f      	beq.n	800464a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800462a:	7dbb      	ldrb	r3, [r7, #22]
 800462c:	461a      	mov	r2, r3
 800462e:	2101      	movs	r1, #1
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f7fc fe3b 	bl	80012ac <VL53L0X_WrByte>
 8004636:	4603      	mov	r3, r0
 8004638:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800463a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d103      	bne.n	800464a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	7dba      	ldrb	r2, [r7, #22]
 8004646:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800464a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b086      	sub	sp, #24
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004664:	2300      	movs	r3, #0
 8004666:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004672:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	2300      	movs	r3, #0
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7ff ff1f 	bl	80044be <VL53L0X_perform_vhv_calibration>
 8004680:	4603      	mov	r3, r0
 8004682:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d107      	bne.n	800469c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800468c:	78fa      	ldrb	r2, [r7, #3]
 800468e:	2300      	movs	r3, #0
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff ff7a 	bl	800458c <VL53L0X_perform_phase_calibration>
 8004698:	4603      	mov	r3, r0
 800469a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800469c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10f      	bne.n	80046c4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80046a4:	7dbb      	ldrb	r3, [r7, #22]
 80046a6:	461a      	mov	r2, r3
 80046a8:	2101      	movs	r1, #1
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7fc fdfe 	bl	80012ac <VL53L0X_WrByte>
 80046b0:	4603      	mov	r3, r0
 80046b2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80046b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d103      	bne.n	80046c4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	7dba      	ldrb	r2, [r7, #22]
 80046c0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80046c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80046d0:	b590      	push	{r4, r7, lr}
 80046d2:	b08b      	sub	sp, #44	; 0x2c
 80046d4:	af04      	add	r7, sp, #16
 80046d6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046d8:	2300      	movs	r3, #0
 80046da:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");
 80046e0:	4b25      	ldr	r3, [pc, #148]	; (8004778 <VL53L0X_measurement_poll_for_completion+0xa8>)
 80046e2:	681c      	ldr	r4, [r3, #0]
 80046e4:	f002 fb48 	bl	8006d78 <HAL_GetTick>
 80046e8:	4603      	mov	r3, r0
 80046ea:	461a      	mov	r2, r3
 80046ec:	4b23      	ldr	r3, [pc, #140]	; (800477c <VL53L0X_measurement_poll_for_completion+0xac>)
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	9200      	str	r2, [sp, #0]
 80046f2:	4b23      	ldr	r3, [pc, #140]	; (8004780 <VL53L0X_measurement_poll_for_completion+0xb0>)
 80046f4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80046f8:	4621      	mov	r1, r4
 80046fa:	2001      	movs	r0, #1
 80046fc:	f002 fa8e 	bl	8006c1c <trace_print_module_function>

	LoopNb = 0;
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004704:	f107 030f 	add.w	r3, r7, #15
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fe fc90 	bl	8003030 <VL53L0X_GetMeasurementDataReady>
 8004710:	4603      	mov	r3, r0
 8004712:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8004714:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d110      	bne.n	800473e <VL53L0X_measurement_poll_for_completion+0x6e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d00f      	beq.n	8004742 <VL53L0X_measurement_poll_for_completion+0x72>
			break; /* done note that status == 0 */

		LoopNb++;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	3301      	adds	r3, #1
 8004726:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800472e:	d302      	bcc.n	8004736 <VL53L0X_measurement_poll_for_completion+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8004730:	23f9      	movs	r3, #249	; 0xf9
 8004732:	75fb      	strb	r3, [r7, #23]
			break;
 8004734:	e006      	b.n	8004744 <VL53L0X_measurement_poll_for_completion+0x74>
		}

		VL53L0X_PollingDelay(Dev);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fc fed8 	bl	80014ec <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800473c:	e7e2      	b.n	8004704 <VL53L0X_measurement_poll_for_completion+0x34>
			break; /* the error is set */
 800473e:	bf00      	nop
 8004740:	e000      	b.n	8004744 <VL53L0X_measurement_poll_for_completion+0x74>
			break; /* done note that status == 0 */
 8004742:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);
 8004744:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <VL53L0X_measurement_poll_for_completion+0xa8>)
 8004746:	681c      	ldr	r4, [r3, #0]
 8004748:	f002 fb16 	bl	8006d78 <HAL_GetTick>
 800474c:	4603      	mov	r3, r0
 800474e:	461a      	mov	r2, r3
 8004750:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004754:	9302      	str	r3, [sp, #8]
 8004756:	4b09      	ldr	r3, [pc, #36]	; (800477c <VL53L0X_measurement_poll_for_completion+0xac>)
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	9200      	str	r2, [sp, #0]
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <VL53L0X_measurement_poll_for_completion+0xb4>)
 800475e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004762:	4621      	mov	r1, r4
 8004764:	2001      	movs	r0, #1
 8004766:	f002 fa59 	bl	8006c1c <trace_print_module_function>

	return Status;
 800476a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800476e:	4618      	mov	r0, r3
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	bd90      	pop	{r4, r7, pc}
 8004776:	bf00      	nop
 8004778:	2000044c 	.word	0x2000044c
 800477c:	0800bcbc 	.word	0x0800bcbc
 8004780:	0800bc94 	.word	0x0800bc94
 8004784:	0800bca8 	.word	0x0800bca8

08004788 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	3301      	adds	r3, #1
 800479a:	b2db      	uxtb	r3, r3
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80047ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047be:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80047c0:	e002      	b.n	80047c8 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	089b      	lsrs	r3, r3, #2
 80047c6:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d8f8      	bhi.n	80047c2 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80047d0:	e017      	b.n	8004802 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4413      	add	r3, r2
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d30b      	bcc.n	80047f6 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4413      	add	r3, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	085b      	lsrs	r3, r3, #1
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	4413      	add	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	e002      	b.n	80047fc <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	089b      	lsrs	r3, r3, #2
 8004800:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e4      	bne.n	80047d2 <VL53L0X_isqrt+0x24>
	}

	return res;
 8004808:	68fb      	ldr	r3, [r7, #12]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b08b      	sub	sp, #44	; 0x2c
 800481c:	af04      	add	r7, sp, #16
 800481e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004820:	2300      	movs	r3, #0
 8004822:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");
 8004824:	4b2f      	ldr	r3, [pc, #188]	; (80048e4 <VL53L0X_device_read_strobe+0xcc>)
 8004826:	681c      	ldr	r4, [r3, #0]
 8004828:	f002 faa6 	bl	8006d78 <HAL_GetTick>
 800482c:	4603      	mov	r3, r0
 800482e:	461a      	mov	r2, r3
 8004830:	4b2d      	ldr	r3, [pc, #180]	; (80048e8 <VL53L0X_device_read_strobe+0xd0>)
 8004832:	9301      	str	r3, [sp, #4]
 8004834:	9200      	str	r2, [sp, #0]
 8004836:	4b2d      	ldr	r3, [pc, #180]	; (80048ec <VL53L0X_device_read_strobe+0xd4>)
 8004838:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800483c:	4621      	mov	r1, r4
 800483e:	2001      	movs	r0, #1
 8004840:	f002 f9ec 	bl	8006c1c <trace_print_module_function>

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8004844:	2200      	movs	r2, #0
 8004846:	2183      	movs	r1, #131	; 0x83
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7fc fd2f 	bl	80012ac <VL53L0X_WrByte>
 800484e:	4603      	mov	r3, r0
 8004850:	461a      	mov	r2, r3
 8004852:	7dfb      	ldrb	r3, [r7, #23]
 8004854:	4313      	orrs	r3, r2
 8004856:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8004858:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d11e      	bne.n	800489e <VL53L0X_device_read_strobe+0x86>
		LoopNb = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8004864:	f107 030f 	add.w	r3, r7, #15
 8004868:	461a      	mov	r2, r3
 800486a:	2183      	movs	r1, #131	; 0x83
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7fc fd9f 	bl	80013b0 <VL53L0X_RdByte>
 8004872:	4603      	mov	r3, r0
 8004874:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8004876:	7bfb      	ldrb	r3, [r7, #15]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <VL53L0X_device_read_strobe+0x7a>
 800487c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d106      	bne.n	8004892 <VL53L0X_device_read_strobe+0x7a>
					break;

			LoopNb = LoopNb + 1;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	3301      	adds	r3, #1
 8004888:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004890:	d3e8      	bcc.n	8004864 <VL53L0X_device_read_strobe+0x4c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004898:	d301      	bcc.n	800489e <VL53L0X_device_read_strobe+0x86>
			Status = VL53L0X_ERROR_TIME_OUT;
 800489a:	23f9      	movs	r3, #249	; 0xf9
 800489c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800489e:	2201      	movs	r2, #1
 80048a0:	2183      	movs	r1, #131	; 0x83
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fc fd02 	bl	80012ac <VL53L0X_WrByte>
 80048a8:	4603      	mov	r3, r0
 80048aa:	461a      	mov	r2, r3
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
 80048b2:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <VL53L0X_device_read_strobe+0xcc>)
 80048b4:	681c      	ldr	r4, [r3, #0]
 80048b6:	f002 fa5f 	bl	8006d78 <HAL_GetTick>
 80048ba:	4603      	mov	r3, r0
 80048bc:	461a      	mov	r2, r3
 80048be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048c2:	9302      	str	r3, [sp, #8]
 80048c4:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <VL53L0X_device_read_strobe+0xd0>)
 80048c6:	9301      	str	r3, [sp, #4]
 80048c8:	9200      	str	r2, [sp, #0]
 80048ca:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <VL53L0X_device_read_strobe+0xd8>)
 80048cc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80048d0:	4621      	mov	r1, r4
 80048d2:	2001      	movs	r0, #1
 80048d4:	f002 f9a2 	bl	8006c1c <trace_print_module_function>
	return Status;
 80048d8:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80048dc:	4618      	mov	r0, r3
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd90      	pop	{r4, r7, pc}
 80048e4:	2000044c 	.word	0x2000044c
 80048e8:	0800bce4 	.word	0x0800bce4
 80048ec:	0800bc94 	.word	0x0800bc94
 80048f0:	0800bca8 	.word	0x0800bca8

080048f4 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80048f4:	b590      	push	{r4, r7, lr}
 80048f6:	b09d      	sub	sp, #116	; 0x74
 80048f8:	af04      	add	r7, sp, #16
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004900:	2300      	movs	r3, #0
 8004902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8004906:	2300      	movs	r3, #0
 8004908:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8004924:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8004928:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800492a:	2300      	movs	r3, #0
 800492c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8004932:	2300      	movs	r3, #0
 8004934:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t NvmRefGoodSpadMap[VL53L0X_REF_SPAD_BUFFER_SIZE];
	int i;


	LOG_FUNCTION_START("");
 8004936:	4b9b      	ldr	r3, [pc, #620]	; (8004ba4 <VL53L0X_get_info_from_device+0x2b0>)
 8004938:	681c      	ldr	r4, [r3, #0]
 800493a:	f002 fa1d 	bl	8006d78 <HAL_GetTick>
 800493e:	4603      	mov	r3, r0
 8004940:	461a      	mov	r2, r3
 8004942:	4b99      	ldr	r3, [pc, #612]	; (8004ba8 <VL53L0X_get_info_from_device+0x2b4>)
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	9200      	str	r2, [sp, #0]
 8004948:	4b98      	ldr	r3, [pc, #608]	; (8004bac <VL53L0X_get_info_from_device+0x2b8>)
 800494a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800494e:	4621      	mov	r1, r4
 8004950:	2001      	movs	r0, #1
 8004952:	f002 f963 	bl	8006c1c <trace_print_module_function>

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800495c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8004960:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004964:	2b07      	cmp	r3, #7
 8004966:	f000 8410 	beq.w	800518a <VL53L0X_get_info_from_device+0x896>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800496a:	2201      	movs	r2, #1
 800496c:	2180      	movs	r1, #128	; 0x80
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fc fc9c 	bl	80012ac <VL53L0X_WrByte>
 8004974:	4603      	mov	r3, r0
 8004976:	461a      	mov	r2, r3
 8004978:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800497c:	4313      	orrs	r3, r2
 800497e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004982:	2201      	movs	r2, #1
 8004984:	21ff      	movs	r1, #255	; 0xff
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc fc90 	bl	80012ac <VL53L0X_WrByte>
 800498c:	4603      	mov	r3, r0
 800498e:	461a      	mov	r2, r3
 8004990:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004994:	4313      	orrs	r3, r2
 8004996:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800499a:	2200      	movs	r2, #0
 800499c:	2100      	movs	r1, #0
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fc fc84 	bl	80012ac <VL53L0X_WrByte>
 80049a4:	4603      	mov	r3, r0
 80049a6:	461a      	mov	r2, r3
 80049a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80049b2:	2206      	movs	r2, #6
 80049b4:	21ff      	movs	r1, #255	; 0xff
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fc fc78 	bl	80012ac <VL53L0X_WrByte>
 80049bc:	4603      	mov	r3, r0
 80049be:	461a      	mov	r2, r3
 80049c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80049ca:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80049ce:	461a      	mov	r2, r3
 80049d0:	2183      	movs	r1, #131	; 0x83
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fc fcec 	bl	80013b0 <VL53L0X_RdByte>
 80049d8:	4603      	mov	r3, r0
 80049da:	461a      	mov	r2, r3
 80049dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80049e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049ea:	f043 0304 	orr.w	r3, r3, #4
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	2183      	movs	r1, #131	; 0x83
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7fc fc59 	bl	80012ac <VL53L0X_WrByte>
 80049fa:	4603      	mov	r3, r0
 80049fc:	461a      	mov	r2, r3
 80049fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8004a08:	2207      	movs	r2, #7
 8004a0a:	21ff      	movs	r1, #255	; 0xff
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7fc fc4d 	bl	80012ac <VL53L0X_WrByte>
 8004a12:	4603      	mov	r3, r0
 8004a14:	461a      	mov	r2, r3
 8004a16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8004a20:	2201      	movs	r2, #1
 8004a22:	2181      	movs	r1, #129	; 0x81
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7fc fc41 	bl	80012ac <VL53L0X_WrByte>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7fc fd57 	bl	80014ec <VL53L0X_PollingDelay>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	461a      	mov	r2, r3
 8004a42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	2180      	movs	r1, #128	; 0x80
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7fc fc2b 	bl	80012ac <VL53L0X_WrByte>
 8004a56:	4603      	mov	r3, r0
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 80a0 	beq.w	8004bb0 <VL53L0X_get_info_from_device+0x2bc>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8004a70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a74:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f040 8099 	bne.w	8004bb0 <VL53L0X_get_info_from_device+0x2bc>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8004a7e:	226b      	movs	r2, #107	; 0x6b
 8004a80:	2194      	movs	r1, #148	; 0x94
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc fc12 	bl	80012ac <VL53L0X_WrByte>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff febe 	bl	8004818 <VL53L0X_device_read_strobe>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004aaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004aae:	461a      	mov	r2, r3
 8004ab0:	2190      	movs	r1, #144	; 0x90
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc fcde 	bl	8001474 <VL53L0X_RdDWord>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461a      	mov	r2, r3
 8004abc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	0bdb      	lsrs	r3, r3, #15
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8004ae2:	2224      	movs	r2, #36	; 0x24
 8004ae4:	2194      	movs	r1, #148	; 0x94
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fc fbe0 	bl	80012ac <VL53L0X_WrByte>
 8004aec:	4603      	mov	r3, r0
 8004aee:	461a      	mov	r2, r3
 8004af0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff fe8c 	bl	8004818 <VL53L0X_device_read_strobe>
 8004b00:	4603      	mov	r3, r0
 8004b02:	461a      	mov	r2, r3
 8004b04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004b0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b12:	461a      	mov	r2, r3
 8004b14:	2190      	movs	r1, #144	; 0x90
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fc fcac 	bl	8001474 <VL53L0X_RdDWord>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	0e1b      	lsrs	r3, r3, #24
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	0c1b      	lsrs	r3, r3, #16
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	0a1b      	lsrs	r3, r3, #8
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8004b48:	2225      	movs	r2, #37	; 0x25
 8004b4a:	2194      	movs	r1, #148	; 0x94
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7fc fbad 	bl	80012ac <VL53L0X_WrByte>
 8004b52:	4603      	mov	r3, r0
 8004b54:	461a      	mov	r2, r3
 8004b56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff fe59 	bl	8004818 <VL53L0X_device_read_strobe>
 8004b66:	4603      	mov	r3, r0
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004b74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2190      	movs	r1, #144	; 0x90
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7fc fc79 	bl	8001474 <VL53L0X_RdDWord>
 8004b82:	4603      	mov	r3, r0
 8004b84:	461a      	mov	r2, r3
 8004b86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8004b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b92:	0e1b      	lsrs	r3, r3, #24
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	0c1b      	lsrs	r3, r3, #16
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	737b      	strb	r3, [r7, #13]
 8004ba0:	e006      	b.n	8004bb0 <VL53L0X_get_info_from_device+0x2bc>
 8004ba2:	bf00      	nop
 8004ba4:	2000044c 	.word	0x2000044c
 8004ba8:	0800bd00 	.word	0x0800bd00
 8004bac:	0800bc94 	.word	0x0800bc94
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8189 	beq.w	8004ece <VL53L0X_get_info_from_device+0x5da>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8004bbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004bc0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f040 8182 	bne.w	8004ece <VL53L0X_get_info_from_device+0x5da>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8004bca:	2202      	movs	r2, #2
 8004bcc:	2194      	movs	r1, #148	; 0x94
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fc fb6c 	bl	80012ac <VL53L0X_WrByte>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff fe18 	bl	8004818 <VL53L0X_device_read_strobe>
 8004be8:	4603      	mov	r3, r0
 8004bea:	461a      	mov	r2, r3
 8004bec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8004bf6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2190      	movs	r1, #144	; 0x90
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fc fbd6 	bl	80013b0 <VL53L0X_RdByte>
 8004c04:	4603      	mov	r3, r0
 8004c06:	461a      	mov	r2, r3
 8004c08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8004c12:	227b      	movs	r2, #123	; 0x7b
 8004c14:	2194      	movs	r1, #148	; 0x94
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fc fb48 	bl	80012ac <VL53L0X_WrByte>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7ff fdf4 	bl	8004818 <VL53L0X_device_read_strobe>
 8004c30:	4603      	mov	r3, r0
 8004c32:	461a      	mov	r2, r3
 8004c34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8004c3e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8004c42:	461a      	mov	r2, r3
 8004c44:	2190      	movs	r1, #144	; 0x90
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc fbb2 	bl	80013b0 <VL53L0X_RdByte>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8004c5a:	2277      	movs	r2, #119	; 0x77
 8004c5c:	2194      	movs	r1, #148	; 0x94
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fc fb24 	bl	80012ac <VL53L0X_WrByte>
 8004c64:	4603      	mov	r3, r0
 8004c66:	461a      	mov	r2, r3
 8004c68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7ff fdd0 	bl	8004818 <VL53L0X_device_read_strobe>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004c86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	2190      	movs	r1, #144	; 0x90
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fc fbf0 	bl	8001474 <VL53L0X_RdDWord>
 8004c94:	4603      	mov	r3, r0
 8004c96:	461a      	mov	r2, r3
 8004c98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca4:	0e5b      	lsrs	r3, r3, #25
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	0c9b      	lsrs	r3, r3, #18
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	0adb      	lsrs	r3, r3, #11
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	091b      	lsrs	r3, r3, #4
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8004cec:	2278      	movs	r2, #120	; 0x78
 8004cee:	2194      	movs	r1, #148	; 0x94
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7fc fadb 	bl	80012ac <VL53L0X_WrByte>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff fd87 	bl	8004818 <VL53L0X_device_read_strobe>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2190      	movs	r1, #144	; 0x90
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fc fba7 	bl	8001474 <VL53L0X_RdDWord>
 8004d26:	4603      	mov	r3, r0
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	0f5b      	lsrs	r3, r3, #29
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d3e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8004d40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004d44:	4413      	add	r3, r2
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	0d9b      	lsrs	r3, r3, #22
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	0bdb      	lsrs	r3, r3, #15
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	0a1b      	lsrs	r3, r3, #8
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	019b      	lsls	r3, r3, #6
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8004d94:	2279      	movs	r2, #121	; 0x79
 8004d96:	2194      	movs	r1, #148	; 0x94
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7fc fa87 	bl	80012ac <VL53L0X_WrByte>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	461a      	mov	r2, r3
 8004da2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff fd33 	bl	8004818 <VL53L0X_device_read_strobe>
 8004db2:	4603      	mov	r3, r0
 8004db4:	461a      	mov	r2, r3
 8004db6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004dc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	2190      	movs	r1, #144	; 0x90
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7fc fb53 	bl	8001474 <VL53L0X_RdDWord>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	0e9b      	lsrs	r3, r3, #26
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004de6:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8004de8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004dec:	4413      	add	r3, r2
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	0cdb      	lsrs	r3, r3, #19
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	0b1b      	lsrs	r3, r3, #12
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8004e2e:	227a      	movs	r2, #122	; 0x7a
 8004e30:	2194      	movs	r1, #148	; 0x94
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fc fa3a 	bl	80012ac <VL53L0X_WrByte>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff fce6 	bl	8004818 <VL53L0X_device_read_strobe>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004e5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e5e:	461a      	mov	r2, r3
 8004e60:	2190      	movs	r1, #144	; 0x90
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fc fb06 	bl	8001474 <VL53L0X_RdDWord>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	0f9b      	lsrs	r3, r3, #30
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e80:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8004e82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e86:	4413      	add	r3, r2
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	0ddb      	lsrs	r3, r3, #23
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	0c1b      	lsrs	r3, r3, #16
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	0a5b      	lsrs	r3, r3, #9
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	089b      	lsrs	r3, r3, #2
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 80f1 	beq.w	80050bc <VL53L0X_get_info_from_device+0x7c8>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8004eda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004ede:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f040 80ea 	bne.w	80050bc <VL53L0X_get_info_from_device+0x7c8>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8004ee8:	227b      	movs	r2, #123	; 0x7b
 8004eea:	2194      	movs	r1, #148	; 0x94
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7fc f9dd 	bl	80012ac <VL53L0X_WrByte>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff fc89 	bl	8004818 <VL53L0X_device_read_strobe>
 8004f06:	4603      	mov	r3, r0
 8004f08:	461a      	mov	r2, r3
 8004f0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8004f14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f18:	461a      	mov	r2, r3
 8004f1a:	2190      	movs	r1, #144	; 0x90
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7fc faa9 	bl	8001474 <VL53L0X_RdDWord>
 8004f22:	4603      	mov	r3, r0
 8004f24:	461a      	mov	r2, r3
 8004f26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8004f30:	227c      	movs	r2, #124	; 0x7c
 8004f32:	2194      	movs	r1, #148	; 0x94
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fc f9b9 	bl	80012ac <VL53L0X_WrByte>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff fc65 	bl	8004818 <VL53L0X_device_read_strobe>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	461a      	mov	r2, r3
 8004f52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8004f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f60:	461a      	mov	r2, r3
 8004f62:	2190      	movs	r1, #144	; 0x90
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7fc fa85 	bl	8001474 <VL53L0X_RdDWord>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8004f78:	2273      	movs	r2, #115	; 0x73
 8004f7a:	2194      	movs	r1, #148	; 0x94
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7fc f995 	bl	80012ac <VL53L0X_WrByte>
 8004f82:	4603      	mov	r3, r0
 8004f84:	461a      	mov	r2, r3
 8004f86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff fc41 	bl	8004818 <VL53L0X_device_read_strobe>
 8004f96:	4603      	mov	r3, r0
 8004f98:	461a      	mov	r2, r3
 8004f9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004fa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2190      	movs	r1, #144	; 0x90
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7fc fa61 	bl	8001474 <VL53L0X_RdDWord>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8004fc8:	2274      	movs	r2, #116	; 0x74
 8004fca:	2194      	movs	r1, #148	; 0x94
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7fc f96d 	bl	80012ac <VL53L0X_WrByte>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff fc19 	bl	8004818 <VL53L0X_device_read_strobe>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004ff4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	2190      	movs	r1, #144	; 0x90
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7fc fa39 	bl	8001474 <VL53L0X_RdDWord>
 8005002:	4603      	mov	r3, r0
 8005004:	461a      	mov	r2, r3
 8005006:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800500a:	4313      	orrs	r3, r2
 800500c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8005014:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005016:	4313      	orrs	r3, r2
 8005018:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800501a:	2275      	movs	r2, #117	; 0x75
 800501c:	2194      	movs	r1, #148	; 0x94
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fc f944 	bl	80012ac <VL53L0X_WrByte>
 8005024:	4603      	mov	r3, r0
 8005026:	461a      	mov	r2, r3
 8005028:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800502c:	4313      	orrs	r3, r2
 800502e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff fbf0 	bl	8004818 <VL53L0X_device_read_strobe>
 8005038:	4603      	mov	r3, r0
 800503a:	461a      	mov	r2, r3
 800503c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005040:	4313      	orrs	r3, r2
 8005042:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005046:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800504a:	461a      	mov	r2, r3
 800504c:	2190      	movs	r1, #144	; 0x90
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fc fa10 	bl	8001474 <VL53L0X_RdDWord>
 8005054:	4603      	mov	r3, r0
 8005056:	461a      	mov	r2, r3
 8005058:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800505c:	4313      	orrs	r3, r2
 800505e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8005066:	b29b      	uxth	r3, r3
 8005068:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800506a:	2276      	movs	r2, #118	; 0x76
 800506c:	2194      	movs	r1, #148	; 0x94
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fc f91c 	bl	80012ac <VL53L0X_WrByte>
 8005074:	4603      	mov	r3, r0
 8005076:	461a      	mov	r2, r3
 8005078:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800507c:	4313      	orrs	r3, r2
 800507e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fbc8 	bl	8004818 <VL53L0X_device_read_strobe>
 8005088:	4603      	mov	r3, r0
 800508a:	461a      	mov	r2, r3
 800508c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005090:	4313      	orrs	r3, r2
 8005092:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005096:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800509a:	461a      	mov	r2, r3
 800509c:	2190      	movs	r1, #144	; 0x90
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fc f9e8 	bl	8001474 <VL53L0X_RdDWord>
 80050a4:	4603      	mov	r3, r0
 80050a6:	461a      	mov	r2, r3
 80050a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80050b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050b8:	4313      	orrs	r3, r2
 80050ba:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80050bc:	2200      	movs	r2, #0
 80050be:	2181      	movs	r1, #129	; 0x81
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7fc f8f3 	bl	80012ac <VL53L0X_WrByte>
 80050c6:	4603      	mov	r3, r0
 80050c8:	461a      	mov	r2, r3
 80050ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80050d4:	2206      	movs	r2, #6
 80050d6:	21ff      	movs	r1, #255	; 0xff
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7fc f8e7 	bl	80012ac <VL53L0X_WrByte>
 80050de:	4603      	mov	r3, r0
 80050e0:	461a      	mov	r2, r3
 80050e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80050ec:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80050f0:	461a      	mov	r2, r3
 80050f2:	2183      	movs	r1, #131	; 0x83
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7fc f95b 	bl	80013b0 <VL53L0X_RdByte>
 80050fa:	4603      	mov	r3, r0
 80050fc:	461a      	mov	r2, r3
 80050fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005102:	4313      	orrs	r3, r2
 8005104:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8005108:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800510c:	f023 0304 	bic.w	r3, r3, #4
 8005110:	b2db      	uxtb	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	2183      	movs	r1, #131	; 0x83
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fc f8c8 	bl	80012ac <VL53L0X_WrByte>
 800511c:	4603      	mov	r3, r0
 800511e:	461a      	mov	r2, r3
 8005120:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005124:	4313      	orrs	r3, r2
 8005126:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800512a:	2201      	movs	r2, #1
 800512c:	21ff      	movs	r1, #255	; 0xff
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fc f8bc 	bl	80012ac <VL53L0X_WrByte>
 8005134:	4603      	mov	r3, r0
 8005136:	461a      	mov	r2, r3
 8005138:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800513c:	4313      	orrs	r3, r2
 800513e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005142:	2201      	movs	r2, #1
 8005144:	2100      	movs	r1, #0
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fc f8b0 	bl	80012ac <VL53L0X_WrByte>
 800514c:	4603      	mov	r3, r0
 800514e:	461a      	mov	r2, r3
 8005150:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005154:	4313      	orrs	r3, r2
 8005156:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800515a:	2200      	movs	r2, #0
 800515c:	21ff      	movs	r1, #255	; 0xff
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fc f8a4 	bl	80012ac <VL53L0X_WrByte>
 8005164:	4603      	mov	r3, r0
 8005166:	461a      	mov	r2, r3
 8005168:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800516c:	4313      	orrs	r3, r2
 800516e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005172:	2200      	movs	r2, #0
 8005174:	2180      	movs	r1, #128	; 0x80
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fc f898 	bl	80012ac <VL53L0X_WrByte>
 800517c:	4603      	mov	r3, r0
 800517e:	461a      	mov	r2, r3
 8005180:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005184:	4313      	orrs	r3, r2
 8005186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800518a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800518e:	2b00      	cmp	r3, #0
 8005190:	f040 808f 	bne.w	80052b2 <VL53L0X_get_info_from_device+0x9be>
 8005194:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005198:	2b07      	cmp	r3, #7
 800519a:	f000 808a 	beq.w	80052b2 <VL53L0X_get_info_from_device+0x9be>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d024      	beq.n	80051f2 <VL53L0X_get_info_from_device+0x8fe>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80051a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80051ac:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d11e      	bne.n	80051f2 <VL53L0X_get_info_from_device+0x8fe>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80051ba:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80051c4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80051c8:	2300      	movs	r3, #0
 80051ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051cc:	e00e      	b.n	80051ec <VL53L0X_get_info_from_device+0x8f8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80051ce:	f107 0208 	add.w	r2, r7, #8
 80051d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d4:	4413      	add	r3, r2
 80051d6:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051dc:	4413      	add	r3, r2
 80051de:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80051e2:	460a      	mov	r2, r1
 80051e4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80051e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e8:	3301      	adds	r3, #1
 80051ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ee:	2b05      	cmp	r3, #5
 80051f0:	dded      	ble.n	80051ce <VL53L0X_get_info_from_device+0x8da>
			}
		}

		if (((option & 2) == 2) &&
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d018      	beq.n	800522e <VL53L0X_get_info_from_device+0x93a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80051fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005200:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005204:	2b00      	cmp	r3, #0
 8005206:	d112      	bne.n	800522e <VL53L0X_get_info_from_device+0x93a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005208:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005212:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	33f3      	adds	r3, #243	; 0xf3
 8005220:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8005222:	f107 0310 	add.w	r3, r7, #16
 8005226:	4619      	mov	r1, r3
 8005228:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800522a:	f005 f899 	bl	800a360 <strcpy>

		}

		if (((option & 4) == 4) &&
 800522e:	78fb      	ldrb	r3, [r7, #3]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d030      	beq.n	800529a <VL53L0X_get_info_from_device+0x9a6>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005238:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800523c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005240:	2b00      	cmp	r3, #0
 8005242:	d12a      	bne.n	800529a <VL53L0X_get_info_from_device+0x9a6>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800524c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8005254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005256:	025b      	lsls	r3, r3, #9
 8005258:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800525e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8005268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800526a:	2b00      	cmp	r3, #0
 800526c:	d011      	beq.n	8005292 <VL53L0X_get_info_from_device+0x99e>
					OffsetFixed1104_mm =
 800526e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8005276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800527c:	fb02 f303 	mul.w	r3, r2, r3
 8005280:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8005282:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8005286:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800528a:	425b      	negs	r3, r3
 800528c:	b29b      	uxth	r3, r3
 800528e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8005292:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800529a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80052a8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
 80052b2:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <VL53L0X_get_info_from_device+0x9f0>)
 80052b4:	681c      	ldr	r4, [r3, #0]
 80052b6:	f001 fd5f 	bl	8006d78 <HAL_GetTick>
 80052ba:	4603      	mov	r3, r0
 80052bc:	461a      	mov	r2, r3
 80052be:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80052c2:	9302      	str	r3, [sp, #8]
 80052c4:	4b08      	ldr	r3, [pc, #32]	; (80052e8 <VL53L0X_get_info_from_device+0x9f4>)
 80052c6:	9301      	str	r3, [sp, #4]
 80052c8:	9200      	str	r2, [sp, #0]
 80052ca:	4b08      	ldr	r3, [pc, #32]	; (80052ec <VL53L0X_get_info_from_device+0x9f8>)
 80052cc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80052d0:	4621      	mov	r1, r4
 80052d2:	2001      	movs	r0, #1
 80052d4:	f001 fca2 	bl	8006c1c <trace_print_module_function>
	return Status;
 80052d8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3764      	adds	r7, #100	; 0x64
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd90      	pop	{r4, r7, pc}
 80052e4:	2000044c 	.word	0x2000044c
 80052e8:	0800bd00 	.word	0x0800bd00
 80052ec:	0800bca8 	.word	0x0800bca8

080052f0 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80052f0:	b590      	push	{r4, r7, lr}
 80052f2:	b08b      	sub	sp, #44	; 0x2c
 80052f4:	af04      	add	r7, sp, #16
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	70fb      	strb	r3, [r7, #3]
	uint64_t PLL_period_ps;
	uint32_t macro_period_vclks;
	uint32_t macro_period_ps;

	LOG_FUNCTION_START("");
 80052fc:	4b1b      	ldr	r3, [pc, #108]	; (800536c <VL53L0X_calc_macro_period_ps+0x7c>)
 80052fe:	681c      	ldr	r4, [r3, #0]
 8005300:	f001 fd3a 	bl	8006d78 <HAL_GetTick>
 8005304:	4603      	mov	r3, r0
 8005306:	461a      	mov	r2, r3
 8005308:	4b19      	ldr	r3, [pc, #100]	; (8005370 <VL53L0X_calc_macro_period_ps+0x80>)
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	9200      	str	r2, [sp, #0]
 800530e:	4b19      	ldr	r3, [pc, #100]	; (8005374 <VL53L0X_calc_macro_period_ps+0x84>)
 8005310:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005314:	4621      	mov	r1, r4
 8005316:	2001      	movs	r0, #1
 8005318:	f001 fc80 	bl	8006c1c <trace_print_module_function>

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800531c:	f240 6377 	movw	r3, #1655	; 0x677
 8005320:	f04f 0400 	mov.w	r4, #0
 8005324:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8005328:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800532c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	fb02 f303 	mul.w	r3, r2, r3
 800533c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <VL53L0X_calc_macro_period_ps+0x7c>)
 8005340:	681c      	ldr	r4, [r3, #0]
 8005342:	f001 fd19 	bl	8006d78 <HAL_GetTick>
 8005346:	4603      	mov	r3, r0
 8005348:	461a      	mov	r2, r3
 800534a:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <VL53L0X_calc_macro_period_ps+0x88>)
 800534c:	9302      	str	r3, [sp, #8]
 800534e:	4b08      	ldr	r3, [pc, #32]	; (8005370 <VL53L0X_calc_macro_period_ps+0x80>)
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	9200      	str	r2, [sp, #0]
 8005354:	4b09      	ldr	r3, [pc, #36]	; (800537c <VL53L0X_calc_macro_period_ps+0x8c>)
 8005356:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800535a:	4621      	mov	r1, r4
 800535c:	2001      	movs	r0, #1
 800535e:	f001 fc5d 	bl	8006c1c <trace_print_module_function>
	return macro_period_ps;
 8005362:	68bb      	ldr	r3, [r7, #8]
}
 8005364:	4618      	mov	r0, r3
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	bd90      	pop	{r4, r7, pc}
 800536c:	2000044c 	.word	0x2000044c
 8005370:	0800bd20 	.word	0x0800bd20
 8005374:	0800bc94 	.word	0x0800bc94
 8005378:	0800bcb8 	.word	0x0800bcb8
 800537c:	0800bca8 	.word	0x0800bca8

08005380 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005388:	2300      	movs	r3, #0
 800538a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800538c:	2300      	movs	r3, #0
 800538e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d017      	beq.n	80053ca <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3b01      	subs	r3, #1
 800539e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80053a0:	e005      	b.n	80053ae <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	085b      	lsrs	r3, r3, #1
 80053a6:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80053a8:	89fb      	ldrh	r3, [r7, #14]
 80053aa:	3301      	adds	r3, #1
 80053ac:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f4      	bne.n	80053a2 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80053b8:	89fb      	ldrh	r3, [r7, #14]
 80053ba:	021b      	lsls	r3, r3, #8
 80053bc:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80053c6:	4413      	add	r3, r2
 80053c8:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80053ca:	8afb      	ldrh	r3, [r7, #22]

}
 80053cc:	4618      	mov	r0, r3
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80053ea:	88fa      	ldrh	r2, [r7, #6]
 80053ec:	0a12      	lsrs	r2, r2, #8
 80053ee:	b292      	uxth	r2, r2
 80053f0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80053f2:	3301      	adds	r3, #1
 80053f4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80053f6:	68fb      	ldr	r3, [r7, #12]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	4613      	mov	r3, r2
 8005410:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	4619      	mov	r1, r3
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f7ff ff68 	bl	80052f0 <VL53L0X_calc_macro_period_ps>
 8005420:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005428:	4a0a      	ldr	r2, [pc, #40]	; (8005454 <VL53L0X_calc_timeout_mclks+0x50>)
 800542a:	fba2 2303 	umull	r2, r3, r2, r3
 800542e:	099b      	lsrs	r3, r3, #6
 8005430:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005438:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	085b      	lsrs	r3, r3, #1
 8005440:	441a      	add	r2, r3
	timeout_period_mclks =
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	fbb2 f3f3 	udiv	r3, r2, r3
 8005448:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800544a:	69fb      	ldr	r3, [r7, #28]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3720      	adds	r7, #32
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	10624dd3 	.word	0x10624dd3

08005458 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	807b      	strh	r3, [r7, #2]
 8005464:	4613      	mov	r3, r2
 8005466:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800546c:	787b      	ldrb	r3, [r7, #1]
 800546e:	4619      	mov	r1, r3
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff ff3d 	bl	80052f0 <VL53L0X_calc_macro_period_ps>
 8005476:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800547e:	4a0a      	ldr	r2, [pc, #40]	; (80054a8 <VL53L0X_calc_timeout_us+0x50>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	099b      	lsrs	r3, r3, #6
 8005486:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005488:	887b      	ldrh	r3, [r7, #2]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	fb02 f303 	mul.w	r3, r2, r3
 8005490:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8005494:	4a04      	ldr	r2, [pc, #16]	; (80054a8 <VL53L0X_calc_timeout_us+0x50>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	099b      	lsrs	r3, r3, #6
 800549c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800549e:	697b      	ldr	r3, [r7, #20]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	10624dd3 	.word	0x10624dd3

080054ac <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08c      	sub	sp, #48	; 0x30
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	460b      	mov	r3, r1
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80054c0:	2300      	movs	r3, #0
 80054c2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80054c6:	2300      	movs	r3, #0
 80054c8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80054d2:	7afb      	ldrb	r3, [r7, #11]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <get_sequence_step_timeout+0x38>
 80054d8:	7afb      	ldrb	r3, [r7, #11]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d002      	beq.n	80054e4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80054de:	7afb      	ldrb	r3, [r7, #11]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d128      	bne.n	8005536 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80054e4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80054e8:	461a      	mov	r2, r3
 80054ea:	2100      	movs	r1, #0
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f7fc fdfb 	bl	80020e8 <VL53L0X_GetVcselPulsePeriod>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80054f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d109      	bne.n	8005514 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005500:	f107 0320 	add.w	r3, r7, #32
 8005504:	461a      	mov	r2, r3
 8005506:	2146      	movs	r1, #70	; 0x46
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7fb ff51 	bl	80013b0 <VL53L0X_RdByte>
 800550e:	4603      	mov	r3, r0
 8005510:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005514:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005518:	b29b      	uxth	r3, r3
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff ff5c 	bl	80053d8 <VL53L0X_decode_timeout>
 8005520:	4603      	mov	r3, r0
 8005522:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005524:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005528:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800552a:	4619      	mov	r1, r3
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f7ff ff93 	bl	8005458 <VL53L0X_calc_timeout_us>
 8005532:	62b8      	str	r0, [r7, #40]	; 0x28
 8005534:	e092      	b.n	800565c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005536:	7afb      	ldrb	r3, [r7, #11]
 8005538:	2b03      	cmp	r3, #3
 800553a:	d135      	bne.n	80055a8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800553c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005540:	461a      	mov	r2, r3
 8005542:	2100      	movs	r1, #0
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f7fc fdcf 	bl	80020e8 <VL53L0X_GetVcselPulsePeriod>
 800554a:	4603      	mov	r3, r0
 800554c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005550:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005554:	2b00      	cmp	r3, #0
 8005556:	f040 8081 	bne.w	800565c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800555a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800555e:	461a      	mov	r2, r3
 8005560:	2100      	movs	r1, #0
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f7fc fdc0 	bl	80020e8 <VL53L0X_GetVcselPulsePeriod>
 8005568:	4603      	mov	r3, r0
 800556a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800556e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005572:	2b00      	cmp	r3, #0
 8005574:	d109      	bne.n	800558a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8005576:	f107 031e 	add.w	r3, r7, #30
 800557a:	461a      	mov	r2, r3
 800557c:	2151      	movs	r1, #81	; 0x51
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f7fb ff40 	bl	8001404 <VL53L0X_RdWord>
 8005584:	4603      	mov	r3, r0
 8005586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800558a:	8bfb      	ldrh	r3, [r7, #30]
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff ff23 	bl	80053d8 <VL53L0X_decode_timeout>
 8005592:	4603      	mov	r3, r0
 8005594:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005596:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800559a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800559c:	4619      	mov	r1, r3
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f7ff ff5a 	bl	8005458 <VL53L0X_calc_timeout_us>
 80055a4:	62b8      	str	r0, [r7, #40]	; 0x28
 80055a6:	e059      	b.n	800565c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80055a8:	7afb      	ldrb	r3, [r7, #11]
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d156      	bne.n	800565c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80055ae:	f107 0314 	add.w	r3, r7, #20
 80055b2:	4619      	mov	r1, r3
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f7fc ff23 	bl	8002400 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d01d      	beq.n	8005600 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80055c4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80055c8:	461a      	mov	r2, r3
 80055ca:	2100      	movs	r1, #0
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f7fc fd8b 	bl	80020e8 <VL53L0X_GetVcselPulsePeriod>
 80055d2:	4603      	mov	r3, r0
 80055d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80055d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10f      	bne.n	8005600 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80055e0:	f107 031e 	add.w	r3, r7, #30
 80055e4:	461a      	mov	r2, r3
 80055e6:	2151      	movs	r1, #81	; 0x51
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7fb ff0b 	bl	8001404 <VL53L0X_RdWord>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80055f4:	8bfb      	ldrh	r3, [r7, #30]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff feee 	bl	80053d8 <VL53L0X_decode_timeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005600:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005604:	2b00      	cmp	r3, #0
 8005606:	d109      	bne.n	800561c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005608:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800560c:	461a      	mov	r2, r3
 800560e:	2101      	movs	r1, #1
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7fc fd69 	bl	80020e8 <VL53L0X_GetVcselPulsePeriod>
 8005616:	4603      	mov	r3, r0
 8005618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800561c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10f      	bne.n	8005644 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8005624:	f107 031c 	add.w	r3, r7, #28
 8005628:	461a      	mov	r2, r3
 800562a:	2171      	movs	r1, #113	; 0x71
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f7fb fee9 	bl	8001404 <VL53L0X_RdWord>
 8005632:	4603      	mov	r3, r0
 8005634:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005638:	8bbb      	ldrh	r3, [r7, #28]
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff fecc 	bl	80053d8 <VL53L0X_decode_timeout>
 8005640:	4603      	mov	r3, r0
 8005642:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8005644:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005646:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800564c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005650:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005652:	4619      	mov	r1, r3
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f7ff feff 	bl	8005458 <VL53L0X_calc_timeout_us>
 800565a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005660:	601a      	str	r2, [r3, #0]

	return Status;
 8005662:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005666:	4618      	mov	r0, r3
 8005668:	3730      	adds	r7, #48	; 0x30
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b08a      	sub	sp, #40	; 0x28
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	460b      	mov	r3, r1
 8005678:	607a      	str	r2, [r7, #4]
 800567a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800567c:	2300      	movs	r3, #0
 800567e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005682:	7afb      	ldrb	r3, [r7, #11]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <set_sequence_step_timeout+0x26>
 8005688:	7afb      	ldrb	r3, [r7, #11]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d002      	beq.n	8005694 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800568e:	7afb      	ldrb	r3, [r7, #11]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d138      	bne.n	8005706 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005694:	f107 031b 	add.w	r3, r7, #27
 8005698:	461a      	mov	r2, r3
 800569a:	2100      	movs	r1, #0
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7fc fd23 	bl	80020e8 <VL53L0X_GetVcselPulsePeriod>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80056a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d11a      	bne.n	80056e6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80056b0:	7efb      	ldrb	r3, [r7, #27]
 80056b2:	461a      	mov	r2, r3
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f7ff fea4 	bl	8005404 <VL53L0X_calc_timeout_mclks>
 80056bc:	4603      	mov	r3, r0
 80056be:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80056c0:	8bbb      	ldrh	r3, [r7, #28]
 80056c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c6:	d903      	bls.n	80056d0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80056c8:	23ff      	movs	r3, #255	; 0xff
 80056ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80056ce:	e004      	b.n	80056da <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80056d0:	8bbb      	ldrh	r3, [r7, #28]
 80056d2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80056d4:	3b01      	subs	r3, #1
 80056d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80056da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80056e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f040 80ab 	bne.w	8005846 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80056f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80056f4:	461a      	mov	r2, r3
 80056f6:	2146      	movs	r1, #70	; 0x46
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f7fb fdd7 	bl	80012ac <VL53L0X_WrByte>
 80056fe:	4603      	mov	r3, r0
 8005700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8005704:	e09f      	b.n	8005846 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005706:	7afb      	ldrb	r3, [r7, #11]
 8005708:	2b03      	cmp	r3, #3
 800570a:	d135      	bne.n	8005778 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800570c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005710:	2b00      	cmp	r3, #0
 8005712:	d11b      	bne.n	800574c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005714:	f107 031b 	add.w	r3, r7, #27
 8005718:	461a      	mov	r2, r3
 800571a:	2100      	movs	r1, #0
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f7fc fce3 	bl	80020e8 <VL53L0X_GetVcselPulsePeriod>
 8005722:	4603      	mov	r3, r0
 8005724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005728:	7efb      	ldrb	r3, [r7, #27]
 800572a:	461a      	mov	r2, r3
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f7ff fe68 	bl	8005404 <VL53L0X_calc_timeout_mclks>
 8005734:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8005736:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8005738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff fe20 	bl	8005380 <VL53L0X_encode_timeout>
 8005740:	4603      	mov	r3, r0
 8005742:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005744:	8b3a      	ldrh	r2, [r7, #24]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800574c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005750:	2b00      	cmp	r3, #0
 8005752:	d108      	bne.n	8005766 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8005754:	8b3b      	ldrh	r3, [r7, #24]
 8005756:	461a      	mov	r2, r3
 8005758:	2151      	movs	r1, #81	; 0x51
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7fb fdca 	bl	80012f4 <VL53L0X_WrWord>
 8005760:	4603      	mov	r3, r0
 8005762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005766:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800576a:	2b00      	cmp	r3, #0
 800576c:	d16b      	bne.n	8005846 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8005776:	e066      	b.n	8005846 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005778:	7afb      	ldrb	r3, [r7, #11]
 800577a:	2b04      	cmp	r3, #4
 800577c:	d160      	bne.n	8005840 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800577e:	f107 0310 	add.w	r3, r7, #16
 8005782:	4619      	mov	r1, r3
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f7fc fe3b 	bl	8002400 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800578a:	2300      	movs	r3, #0
 800578c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800578e:	7cfb      	ldrb	r3, [r7, #19]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01d      	beq.n	80057d0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005794:	f107 031b 	add.w	r3, r7, #27
 8005798:	461a      	mov	r2, r3
 800579a:	2100      	movs	r1, #0
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7fc fca3 	bl	80020e8 <VL53L0X_GetVcselPulsePeriod>
 80057a2:	4603      	mov	r3, r0
 80057a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80057a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10f      	bne.n	80057d0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80057b0:	f107 0318 	add.w	r3, r7, #24
 80057b4:	461a      	mov	r2, r3
 80057b6:	2151      	movs	r1, #81	; 0x51
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f7fb fe23 	bl	8001404 <VL53L0X_RdWord>
 80057be:	4603      	mov	r3, r0
 80057c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80057c4:	8b3b      	ldrh	r3, [r7, #24]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff fe06 	bl	80053d8 <VL53L0X_decode_timeout>
 80057cc:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80057ce:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80057d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d109      	bne.n	80057ec <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80057d8:	f107 031b 	add.w	r3, r7, #27
 80057dc:	461a      	mov	r2, r3
 80057de:	2101      	movs	r1, #1
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f7fc fc81 	bl	80020e8 <VL53L0X_GetVcselPulsePeriod>
 80057e6:	4603      	mov	r3, r0
 80057e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80057ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d128      	bne.n	8005846 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80057f4:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 80057f6:	461a      	mov	r2, r3
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f7ff fe02 	bl	8005404 <VL53L0X_calc_timeout_mclks>
 8005800:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8005802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005804:	6a3a      	ldr	r2, [r7, #32]
 8005806:	4413      	add	r3, r2
 8005808:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 800580a:	6a38      	ldr	r0, [r7, #32]
 800580c:	f7ff fdb8 	bl	8005380 <VL53L0X_encode_timeout>
 8005810:	4603      	mov	r3, r0
 8005812:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8005814:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005818:	2b00      	cmp	r3, #0
 800581a:	d108      	bne.n	800582e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800581c:	8bfb      	ldrh	r3, [r7, #30]
 800581e:	461a      	mov	r2, r3
 8005820:	2171      	movs	r1, #113	; 0x71
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7fb fd66 	bl	80012f4 <VL53L0X_WrWord>
 8005828:	4603      	mov	r3, r0
 800582a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800582e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005832:	2b00      	cmp	r3, #0
 8005834:	d107      	bne.n	8005846 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800583e:	e002      	b.n	8005846 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005840:	23fc      	movs	r3, #252	; 0xfc
 8005842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8005846:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800584a:	4618      	mov	r0, r3
 800584c:	3728      	adds	r7, #40	; 0x28
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b086      	sub	sp, #24
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	460b      	mov	r3, r1
 800585c:	607a      	str	r2, [r7, #4]
 800585e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005860:	2300      	movs	r3, #0
 8005862:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8005864:	7afb      	ldrb	r3, [r7, #11]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800586a:	2b01      	cmp	r3, #1
 800586c:	d00a      	beq.n	8005884 <VL53L0X_get_vcsel_pulse_period+0x32>
 800586e:	e013      	b.n	8005898 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005870:	f107 0316 	add.w	r3, r7, #22
 8005874:	461a      	mov	r2, r3
 8005876:	2150      	movs	r1, #80	; 0x50
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f7fb fd99 	bl	80013b0 <VL53L0X_RdByte>
 800587e:	4603      	mov	r3, r0
 8005880:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005882:	e00b      	b.n	800589c <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005884:	f107 0316 	add.w	r3, r7, #22
 8005888:	461a      	mov	r2, r3
 800588a:	2170      	movs	r1, #112	; 0x70
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f7fb fd8f 	bl	80013b0 <VL53L0X_RdByte>
 8005892:	4603      	mov	r3, r0
 8005894:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005896:	e001      	b.n	800589c <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005898:	23fc      	movs	r3, #252	; 0xfc
 800589a:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800589c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d107      	bne.n	80058b4 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80058a4:	7dbb      	ldrb	r3, [r7, #22]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe ff6e 	bl	8004788 <VL53L0X_decode_vcsel_period>
 80058ac:	4603      	mov	r3, r0
 80058ae:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	701a      	strb	r2, [r3, #0]

	return Status;
 80058b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80058c0:	b590      	push	{r4, r7, lr}
 80058c2:	b097      	sub	sp, #92	; 0x5c
 80058c4:	af04      	add	r7, sp, #16
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80058d0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80058d4:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80058d6:	f240 7376 	movw	r3, #1910	; 0x776
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80058dc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80058e0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80058e2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80058e6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80058e8:	f240 234e 	movw	r3, #590	; 0x24e
 80058ec:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80058ee:	f240 23b2 	movw	r3, #690	; 0x2b2
 80058f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80058f4:	f44f 7325 	mov.w	r3, #660	; 0x294
 80058f8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80058fa:	f240 2326 	movw	r3, #550	; 0x226
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8005904:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005908:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");
 800590e:	4b81      	ldr	r3, [pc, #516]	; (8005b14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 8005910:	681c      	ldr	r4, [r3, #0]
 8005912:	f001 fa31 	bl	8006d78 <HAL_GetTick>
 8005916:	4603      	mov	r3, r0
 8005918:	461a      	mov	r2, r3
 800591a:	4b7f      	ldr	r3, [pc, #508]	; (8005b18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	9200      	str	r2, [sp, #0]
 8005920:	4b7e      	ldr	r3, [pc, #504]	; (8005b1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x25c>)
 8005922:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005926:	4621      	mov	r1, r4
 8005928:	2001      	movs	r0, #1
 800592a:	f001 f977 	bl	8006c1c <trace_print_module_function>

	if (MeasurementTimingBudgetMicroSeconds
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	429a      	cmp	r2, r3
 8005934:	d205      	bcs.n	8005942 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x82>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005936:	23fc      	movs	r3, #252	; 0xfc
 8005938:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800593c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005940:	e0e3      	b.n	8005b0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8005942:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005946:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800594e:	f107 0314 	add.w	r3, r7, #20
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fc fd53 	bl	8002400 <VL53L0X_GetSequenceStepEnables>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8005960:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005964:	2b00      	cmp	r3, #0
 8005966:	d16e      	bne.n	8005a46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
		(SchedulerSequenceSteps.TccOn  ||
 8005968:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800596a:	2b00      	cmp	r3, #0
 800596c:	d105      	bne.n	800597a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xba>
		SchedulerSequenceSteps.MsrcOn ||
 800596e:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8005970:	2b00      	cmp	r3, #0
 8005972:	d102      	bne.n	800597a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xba>
		SchedulerSequenceSteps.DssOn)) {
 8005974:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8005976:	2b00      	cmp	r3, #0
 8005978:	d065      	beq.n	8005a46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800597a:	f107 0310 	add.w	r3, r7, #16
 800597e:	461a      	mov	r2, r3
 8005980:	2102      	movs	r1, #2
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff fd92 	bl	80054ac <get_sequence_step_timeout>
 8005988:	4603      	mov	r3, r0
 800598a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800598e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
			return Status;
 8005996:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800599a:	e0b6      	b.n	8005b0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800599c:	7d3b      	ldrb	r3, [r7, #20]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00f      	beq.n	80059c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x102>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80059a2:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80059a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059a6:	4413      	add	r3, r2
 80059a8:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d204      	bcs.n	80059bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xfc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80059b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	643b      	str	r3, [r7, #64]	; 0x40
 80059ba:	e002      	b.n	80059c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x102>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80059bc:	23fc      	movs	r3, #252	; 0xfc
 80059be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80059c2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d015      	beq.n	80059f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x136>
			LOG_FUNCTION_END(Status);
 80059ca:	4b52      	ldr	r3, [pc, #328]	; (8005b14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 80059cc:	681c      	ldr	r4, [r3, #0]
 80059ce:	f001 f9d3 	bl	8006d78 <HAL_GetTick>
 80059d2:	4603      	mov	r3, r0
 80059d4:	461a      	mov	r2, r3
 80059d6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80059da:	9302      	str	r3, [sp, #8]
 80059dc:	4b4e      	ldr	r3, [pc, #312]	; (8005b18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 80059de:	9301      	str	r3, [sp, #4]
 80059e0:	9200      	str	r2, [sp, #0]
 80059e2:	4b4f      	ldr	r3, [pc, #316]	; (8005b20 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 80059e4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80059e8:	4621      	mov	r1, r4
 80059ea:	2001      	movs	r0, #1
 80059ec:	f001 f916 	bl	8006c1c <trace_print_module_function>
			return Status;
 80059f0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80059f4:	e089      	b.n	8005b0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80059f6:	7dbb      	ldrb	r3, [r7, #22]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d011      	beq.n	8005a20 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x160>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a00:	4413      	add	r3, r2
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d204      	bcs.n	8005a18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x158>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8005a0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	643b      	str	r3, [r7, #64]	; 0x40
 8005a16:	e016      	b.n	8005a46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005a18:	23fc      	movs	r3, #252	; 0xfc
 8005a1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005a1e:	e012      	b.n	8005a46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8005a20:	7d7b      	ldrb	r3, [r7, #21]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00f      	beq.n	8005a46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a2a:	4413      	add	r3, r2
 8005a2c:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d204      	bcs.n	8005a40 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x180>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8005a36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a3e:	e002      	b.n	8005a46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005a40:	23fc      	movs	r3, #252	; 0xfc
 8005a42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8005a46:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d015      	beq.n	8005a7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1ba>
		LOG_FUNCTION_END(Status);
 8005a4e:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 8005a50:	681c      	ldr	r4, [r3, #0]
 8005a52:	f001 f991 	bl	8006d78 <HAL_GetTick>
 8005a56:	4603      	mov	r3, r0
 8005a58:	461a      	mov	r2, r3
 8005a5a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005a5e:	9302      	str	r3, [sp, #8]
 8005a60:	4b2d      	ldr	r3, [pc, #180]	; (8005b18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	9200      	str	r2, [sp, #0]
 8005a66:	4b2e      	ldr	r3, [pc, #184]	; (8005b20 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 8005a68:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	2001      	movs	r0, #1
 8005a70:	f001 f8d4 	bl	8006c1c <trace_print_module_function>
		return Status;
 8005a74:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005a78:	e047      	b.n	8005b0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8005a7a:	7dfb      	ldrb	r3, [r7, #23]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d019      	beq.n	8005ab4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f4>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8005a80:	f107 030c 	add.w	r3, r7, #12
 8005a84:	461a      	mov	r2, r3
 8005a86:	2103      	movs	r1, #3
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff fd0f 	bl	80054ac <get_sequence_step_timeout>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a98:	4413      	add	r3, r2
 8005a9a:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d204      	bcs.n	8005aae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1ee>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8005aa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	643b      	str	r3, [r7, #64]	; 0x40
 8005aac:	e002      	b.n	8005ab4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f4>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005aae:	23fc      	movs	r3, #252	; 0xfc
 8005ab0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8005ab4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d111      	bne.n	8005ae0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x220>
		SchedulerSequenceSteps.FinalRangeOn) {
 8005abc:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00e      	beq.n	8005ae0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x220>

		FinalRangeTimingBudgetMicroSeconds -=
 8005ac2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8005aca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005acc:	2104      	movs	r1, #4
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff fdcd 	bl	800566e <set_sequence_step_timeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
 8005ae0:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 8005ae2:	681c      	ldr	r4, [r3, #0]
 8005ae4:	f001 f948 	bl	8006d78 <HAL_GetTick>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	461a      	mov	r2, r3
 8005aec:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005af0:	9302      	str	r3, [sp, #8]
 8005af2:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	9200      	str	r2, [sp, #0]
 8005af8:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 8005afa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005afe:	4621      	mov	r1, r4
 8005b00:	2001      	movs	r0, #1
 8005b02:	f001 f88b 	bl	8006c1c <trace_print_module_function>

	return Status;
 8005b06:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	374c      	adds	r7, #76	; 0x4c
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd90      	pop	{r4, r7, pc}
 8005b12:	bf00      	nop
 8005b14:	2000044c 	.word	0x2000044c
 8005b18:	0800bd40 	.word	0x0800bd40
 8005b1c:	0800bc94 	.word	0x0800bc94
 8005b20:	0800bca8 	.word	0x0800bca8

08005b24 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005b24:	b590      	push	{r4, r7, lr}
 8005b26:	b095      	sub	sp, #84	; 0x54
 8005b28:	af04      	add	r7, sp, #16
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005b34:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005b38:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8005b3a:	f240 7376 	movw	r3, #1910	; 0x776
 8005b3e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8005b40:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005b44:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8005b46:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005b4a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8005b4c:	f240 234e 	movw	r3, #590	; 0x24e
 8005b50:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8005b52:	f240 23b2 	movw	r3, #690	; 0x2b2
 8005b56:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8005b58:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005b5e:	f240 2326 	movw	r3, #550	; 0x226
 8005b62:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");
 8005b68:	4b62      	ldr	r3, [pc, #392]	; (8005cf4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 8005b6a:	681c      	ldr	r4, [r3, #0]
 8005b6c:	f001 f904 	bl	8006d78 <HAL_GetTick>
 8005b70:	4603      	mov	r3, r0
 8005b72:	461a      	mov	r2, r3
 8005b74:	4b60      	ldr	r3, [pc, #384]	; (8005cf8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	9200      	str	r2, [sp, #0]
 8005b7a:	4b60      	ldr	r3, [pc, #384]	; (8005cfc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d8>)
 8005b7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005b80:	4621      	mov	r1, r4
 8005b82:	2001      	movs	r0, #1
 8005b84:	f001 f84a 	bl	8006c1c <trace_print_module_function>

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8005b88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8c:	441a      	add	r2, r3
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005b92:	f107 0318 	add.w	r3, r7, #24
 8005b96:	4619      	mov	r1, r3
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7fc fc31 	bl	8002400 <VL53L0X_GetSequenceStepEnables>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8005ba4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d015      	beq.n	8005bd8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb4>
		LOG_FUNCTION_END(Status);
 8005bac:	4b51      	ldr	r3, [pc, #324]	; (8005cf4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 8005bae:	681c      	ldr	r4, [r3, #0]
 8005bb0:	f001 f8e2 	bl	8006d78 <HAL_GetTick>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005bbc:	9302      	str	r3, [sp, #8]
 8005bbe:	4b4e      	ldr	r3, [pc, #312]	; (8005cf8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	9200      	str	r2, [sp, #0]
 8005bc4:	4b4e      	ldr	r3, [pc, #312]	; (8005d00 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1dc>)
 8005bc6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005bca:	4621      	mov	r1, r4
 8005bcc:	2001      	movs	r0, #1
 8005bce:	f001 f825 	bl	8006c1c <trace_print_module_function>
		return Status;
 8005bd2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005bd6:	e088      	b.n	8005cea <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c6>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8005bd8:	7e3b      	ldrb	r3, [r7, #24]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d105      	bne.n	8005bea <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		SchedulerSequenceSteps.MsrcOn ||
 8005bde:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d102      	bne.n	8005bea <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		SchedulerSequenceSteps.DssOn) {
 8005be4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d030      	beq.n	8005c4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>

		Status = get_sequence_step_timeout(Dev,
 8005bea:	f107 0310 	add.w	r3, r7, #16
 8005bee:	461a      	mov	r2, r3
 8005bf0:	2102      	movs	r1, #2
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff fc5a 	bl	80054ac <get_sequence_step_timeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8005bfe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d122      	bne.n	8005c4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
			if (SchedulerSequenceSteps.TccOn) {
 8005c06:	7e3b      	ldrb	r3, [r7, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d007      	beq.n	8005c1c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xf8>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8005c10:	6939      	ldr	r1, [r7, #16]
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005c16:	441a      	add	r2, r3
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8005c1c:	7ebb      	ldrb	r3, [r7, #26]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d009      	beq.n	8005c36 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x112>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8005c26:	6939      	ldr	r1, [r7, #16]
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	440b      	add	r3, r1
 8005c2c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005c2e:	441a      	add	r2, r3
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	e00a      	b.n	8005c4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8005c36:	7e7b      	ldrb	r3, [r7, #25]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8005c40:	6939      	ldr	r1, [r7, #16]
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005c46:	441a      	add	r2, r3
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005c4c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d114      	bne.n	8005c7e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8005c54:	7efb      	ldrb	r3, [r7, #27]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d011      	beq.n	8005c7e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
			Status = get_sequence_step_timeout(Dev,
 8005c5a:	f107 030c 	add.w	r3, r7, #12
 8005c5e:	461a      	mov	r2, r3
 8005c60:	2103      	movs	r1, #3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff fc22 	bl	80054ac <get_sequence_step_timeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8005c72:	68f9      	ldr	r1, [r7, #12]
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005c78:	441a      	add	r2, r3
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005c7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d114      	bne.n	8005cb0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x18c>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8005c86:	7f3b      	ldrb	r3, [r7, #28]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d011      	beq.n	8005cb0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x18c>
			Status = get_sequence_step_timeout(Dev,
 8005c8c:	f107 0314 	add.w	r3, r7, #20
 8005c90:	461a      	mov	r2, r3
 8005c92:	2104      	movs	r1, #4
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff fc09 	bl	80054ac <get_sequence_step_timeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8005ca4:	6979      	ldr	r1, [r7, #20]
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005caa:	441a      	add	r2, r3
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005cb0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d103      	bne.n	8005cc0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x19c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 8005cc2:	681c      	ldr	r4, [r3, #0]
 8005cc4:	f001 f858 	bl	8006d78 <HAL_GetTick>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005cd0:	9302      	str	r3, [sp, #8]
 8005cd2:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	9200      	str	r2, [sp, #0]
 8005cd8:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1dc>)
 8005cda:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005cde:	4621      	mov	r1, r4
 8005ce0:	2001      	movs	r0, #1
 8005ce2:	f000 ff9b 	bl	8006c1c <trace_print_module_function>
	return Status;
 8005ce6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3744      	adds	r7, #68	; 0x44
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd90      	pop	{r4, r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	2000044c 	.word	0x2000044c
 8005cf8:	0800bd74 	.word	0x0800bd74
 8005cfc:	0800bc94 	.word	0x0800bc94
 8005d00:	0800bca8 	.word	0x0800bca8

08005d04 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8005d04:	b590      	push	{r4, r7, lr}
 8005d06:	b08d      	sub	sp, #52	; 0x34
 8005d08:	af04      	add	r7, sp, #16
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	77fb      	strb	r3, [r7, #31]
	uint8_t NumberOfWrites;
	uint8_t Address;
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");
 8005d12:	4b7f      	ldr	r3, [pc, #508]	; (8005f10 <VL53L0X_load_tuning_settings+0x20c>)
 8005d14:	681c      	ldr	r4, [r3, #0]
 8005d16:	f001 f82f 	bl	8006d78 <HAL_GetTick>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	4b7d      	ldr	r3, [pc, #500]	; (8005f14 <VL53L0X_load_tuning_settings+0x210>)
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	9200      	str	r2, [sp, #0]
 8005d24:	4b7c      	ldr	r3, [pc, #496]	; (8005f18 <VL53L0X_load_tuning_settings+0x214>)
 8005d26:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	f000 ff75 	bl	8006c1c <trace_print_module_function>

	Index = 0;
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8005d36:	e0c6      	b.n	8005ec6 <VL53L0X_load_tuning_settings+0x1c2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	74fb      	strb	r3, [r7, #19]
		Index++;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	3301      	adds	r3, #1
 8005d46:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8005d48:	7cfb      	ldrb	r3, [r7, #19]
 8005d4a:	2bff      	cmp	r3, #255	; 0xff
 8005d4c:	f040 808d 	bne.w	8005e6a <VL53L0X_load_tuning_settings+0x166>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	4413      	add	r3, r2
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	747b      	strb	r3, [r7, #17]
			Index++;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8005d60:	7c7b      	ldrb	r3, [r7, #17]
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d87e      	bhi.n	8005e64 <VL53L0X_load_tuning_settings+0x160>
 8005d66:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <VL53L0X_load_tuning_settings+0x68>)
 8005d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6c:	08005d7d 	.word	0x08005d7d
 8005d70:	08005db7 	.word	0x08005db7
 8005d74:	08005df1 	.word	0x08005df1
 8005d78:	08005e2b 	.word	0x08005e2b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	4413      	add	r3, r2
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	743b      	strb	r3, [r7, #16]
				Index++;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	4413      	add	r3, r2
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005d9c:	7c3b      	ldrb	r3, [r7, #16]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	021b      	lsls	r3, r3, #8
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	4413      	add	r3, r2
 8005daa:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	89ba      	ldrh	r2, [r7, #12]
 8005db0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8005db4:	e087      	b.n	8005ec6 <VL53L0X_load_tuning_settings+0x1c2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	4413      	add	r3, r2
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	743b      	strb	r3, [r7, #16]
				Index++;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	4413      	add	r3, r2
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005dd6:	7c3b      	ldrb	r3, [r7, #16]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	4413      	add	r3, r2
 8005de4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	89ba      	ldrh	r2, [r7, #12]
 8005dea:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8005dee:	e06a      	b.n	8005ec6 <VL53L0X_load_tuning_settings+0x1c2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	4413      	add	r3, r2
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	743b      	strb	r3, [r7, #16]
				Index++;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	4413      	add	r3, r2
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005e10:	7c3b      	ldrb	r3, [r7, #16]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	021b      	lsls	r3, r3, #8
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	89ba      	ldrh	r2, [r7, #12]
 8005e24:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8005e28:	e04d      	b.n	8005ec6 <VL53L0X_load_tuning_settings+0x1c2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	4413      	add	r3, r2
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	743b      	strb	r3, [r7, #16]
				Index++;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	3301      	adds	r3, #1
 8005e38:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	4413      	add	r3, r2
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	3301      	adds	r3, #1
 8005e48:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005e4a:	7c3b      	ldrb	r3, [r7, #16]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	4413      	add	r3, r2
 8005e58:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	89ba      	ldrh	r2, [r7, #12]
 8005e5e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8005e62:	e030      	b.n	8005ec6 <VL53L0X_load_tuning_settings+0x1c2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005e64:	23fc      	movs	r3, #252	; 0xfc
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e02d      	b.n	8005ec6 <VL53L0X_load_tuning_settings+0x1c2>
			}

		} else if (NumberOfWrites <= 4) {
 8005e6a:	7cfb      	ldrb	r3, [r7, #19]
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d828      	bhi.n	8005ec2 <VL53L0X_load_tuning_settings+0x1be>
			Address = *(pTuningSettingBuffer + Index);
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	4413      	add	r3, r2
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	74bb      	strb	r3, [r7, #18]
			Index++;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8005e80:	2300      	movs	r3, #0
 8005e82:	61bb      	str	r3, [r7, #24]
 8005e84:	e00f      	b.n	8005ea6 <VL53L0X_load_tuning_settings+0x1a2>
				localBuffer[i] = *(pTuningSettingBuffer +
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	7819      	ldrb	r1, [r3, #0]
 8005e8e:	f107 0208 	add.w	r2, r7, #8
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	4413      	add	r3, r2
 8005e96:	460a      	mov	r2, r1
 8005e98:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	7cfb      	ldrb	r3, [r7, #19]
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	dbeb      	blt.n	8005e86 <VL53L0X_load_tuning_settings+0x182>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8005eae:	7cfb      	ldrb	r3, [r7, #19]
 8005eb0:	f107 0208 	add.w	r2, r7, #8
 8005eb4:	7cb9      	ldrb	r1, [r7, #18]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7fb f99c 	bl	80011f4 <VL53L0X_WriteMulti>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	77fb      	strb	r3, [r7, #31]
 8005ec0:	e001      	b.n	8005ec6 <VL53L0X_load_tuning_settings+0x1c2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005ec2:	23fc      	movs	r3, #252	; 0xfc
 8005ec4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	4413      	add	r3, r2
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d004      	beq.n	8005edc <VL53L0X_load_tuning_settings+0x1d8>
 8005ed2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f43f af2e 	beq.w	8005d38 <VL53L0X_load_tuning_settings+0x34>
		}
	}

	LOG_FUNCTION_END(Status);
 8005edc:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <VL53L0X_load_tuning_settings+0x20c>)
 8005ede:	681c      	ldr	r4, [r3, #0]
 8005ee0:	f000 ff4a 	bl	8006d78 <HAL_GetTick>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005eec:	9302      	str	r3, [sp, #8]
 8005eee:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <VL53L0X_load_tuning_settings+0x210>)
 8005ef0:	9301      	str	r3, [sp, #4]
 8005ef2:	9200      	str	r2, [sp, #0]
 8005ef4:	4b09      	ldr	r3, [pc, #36]	; (8005f1c <VL53L0X_load_tuning_settings+0x218>)
 8005ef6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005efa:	4621      	mov	r1, r4
 8005efc:	2001      	movs	r0, #1
 8005efe:	f000 fe8d 	bl	8006c1c <trace_print_module_function>
	return Status;
 8005f02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3724      	adds	r7, #36	; 0x24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd90      	pop	{r4, r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	2000044c 	.word	0x2000044c
 8005f14:	0800bda8 	.word	0x0800bda8
 8005f18:	0800bc94 	.word	0x0800bc94
 8005f1c:	0800bca8 	.word	0x0800bca8

08005f20 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b088      	sub	sp, #32
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8005f36:	f107 0313 	add.w	r3, r7, #19
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7fc fb43 	bl	80025c8 <VL53L0X_GetXTalkCompensationEnable>
 8005f42:	4603      	mov	r3, r0
 8005f44:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8005f46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d111      	bne.n	8005f72 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8005f4e:	7cfb      	ldrb	r3, [r7, #19]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00e      	beq.n	8005f72 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	8a9b      	ldrh	r3, [r3, #20]
 8005f5e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	fb02 f303 	mul.w	r3, r2, r3
 8005f66:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	3380      	adds	r3, #128	; 0x80
 8005f6c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8005f72:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8005f80:	b590      	push	{r4, r7, lr}
 8005f82:	b089      	sub	sp, #36	; 0x24
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");
 8005f90:	4b16      	ldr	r3, [pc, #88]	; (8005fec <VL53L0X_get_total_signal_rate+0x6c>)
 8005f92:	681c      	ldr	r4, [r3, #0]
 8005f94:	f000 fef0 	bl	8006d78 <HAL_GetTick>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	4b14      	ldr	r3, [pc, #80]	; (8005ff0 <VL53L0X_get_total_signal_rate+0x70>)
 8005f9e:	9301      	str	r3, [sp, #4]
 8005fa0:	9200      	str	r2, [sp, #0]
 8005fa2:	4b14      	ldr	r3, [pc, #80]	; (8005ff4 <VL53L0X_get_total_signal_rate+0x74>)
 8005fa4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005fa8:	4621      	mov	r1, r4
 8005faa:	2001      	movs	r0, #1
 8005fac:	f000 fe36 	bl	8006c1c <trace_print_module_function>

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8005fb8:	f107 0310 	add.w	r3, r7, #16
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	68b9      	ldr	r1, [r7, #8]
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f7ff ffad 	bl	8005f20 <VL53L0X_get_total_xtalk_rate>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8005fca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d105      	bne.n	8005fde <VL53L0X_get_total_signal_rate+0x5e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	441a      	add	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	601a      	str	r2, [r3, #0]

	return Status;
 8005fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd90      	pop	{r4, r7, pc}
 8005fea:	bf00      	nop
 8005fec:	2000044c 	.word	0x2000044c
 8005ff0:	0800bdc8 	.word	0x0800bdc8
 8005ff4:	0800bc94 	.word	0x0800bc94

08005ff8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8005ff8:	b590      	push	{r4, r7, lr}
 8005ffa:	b09f      	sub	sp, #124	; 0x7c
 8005ffc:	af04      	add	r7, sp, #16
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8006006:	2312      	movs	r3, #18
 8006008:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800600a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800600e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8006010:	2342      	movs	r3, #66	; 0x42
 8006012:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8006014:	2306      	movs	r3, #6
 8006016:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8006018:	2307      	movs	r3, #7
 800601a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800601c:	2300      	movs	r3, #0
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");
 8006022:	4b97      	ldr	r3, [pc, #604]	; (8006280 <VL53L0X_calc_dmax+0x288>)
 8006024:	681c      	ldr	r4, [r3, #0]
 8006026:	f000 fea7 	bl	8006d78 <HAL_GetTick>
 800602a:	4603      	mov	r3, r0
 800602c:	461a      	mov	r2, r3
 800602e:	4b95      	ldr	r3, [pc, #596]	; (8006284 <VL53L0X_calc_dmax+0x28c>)
 8006030:	9301      	str	r3, [sp, #4]
 8006032:	9200      	str	r2, [sp, #0]
 8006034:	4b94      	ldr	r3, [pc, #592]	; (8006288 <VL53L0X_calc_dmax+0x290>)
 8006036:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800603a:	4621      	mov	r1, r4
 800603c:	2001      	movs	r0, #1
 800603e:	f000 fded 	bl	8006c1c <trace_print_module_function>

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8006048:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006050:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8006052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006056:	fb02 f303 	mul.w	r3, r2, r3
 800605a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800605c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605e:	3380      	adds	r3, #128	; 0x80
 8006060:	0a1b      	lsrs	r3, r3, #8
 8006062:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8006064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006066:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006068:	fb02 f303 	mul.w	r3, r2, r3
 800606c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d01b      	beq.n	80060b0 <VL53L0X_calc_dmax+0xb8>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	029b      	lsls	r3, r3, #10
 800607c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8006082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006084:	4413      	add	r3, r2
 8006086:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8006088:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006090:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8006092:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006094:	4613      	mov	r3, r2
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	4413      	add	r3, r2
 800609a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800609c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800609e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80060a0:	fb02 f303 	mul.w	r3, r2, r3
 80060a4:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80060a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80060ac:	0c1b      	lsrs	r3, r3, #16
 80060ae:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80060b4:	fb02 f303 	mul.w	r3, r2, r3
 80060b8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80060ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80060c0:	0c1b      	lsrs	r3, r3, #16
 80060c2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060c8:	fb02 f303 	mul.w	r3, r2, r3
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80060ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80060d4:	0c1b      	lsrs	r3, r3, #16
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80060d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060da:	085a      	lsrs	r2, r3, #1
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	441a      	add	r2, r3
 80060e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e6:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060ec:	fb02 f303 	mul.w	r3, r2, r3
 80060f0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f8:	d302      	bcc.n	8006100 <VL53L0X_calc_dmax+0x108>
		minSignalNeeded_p3 = 0xfff00000;
 80060fa:	4b64      	ldr	r3, [pc, #400]	; (800628c <VL53L0X_calc_dmax+0x294>)
 80060fc:	663b      	str	r3, [r7, #96]	; 0x60
 80060fe:	e016      	b.n	800612e <VL53L0X_calc_dmax+0x136>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8006100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006102:	085a      	lsrs	r2, r3, #1
 8006104:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006106:	441a      	add	r2, r3
 8006108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800610a:	fbb2 f3f3 	udiv	r3, r2, r3
 800610e:	67fb      	str	r3, [r7, #124]	; 0x7c
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8006110:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006114:	fb02 f303 	mul.w	r3, r2, r3
 8006118:	67fb      	str	r3, [r7, #124]	; 0x7c

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800611a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800611c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006120:	0c1b      	lsrs	r3, r3, #16
 8006122:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8006124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006126:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006128:	fb02 f303 	mul.w	r3, r2, r3
 800612c:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800612e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006130:	039b      	lsls	r3, r3, #14
 8006132:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006136:	4a56      	ldr	r2, [pc, #344]	; (8006290 <VL53L0X_calc_dmax+0x298>)
 8006138:	fba2 2303 	umull	r2, r3, r2, r3
 800613c:	099b      	lsrs	r3, r3, #6
 800613e:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006144:	fb02 f303 	mul.w	r3, r2, r3
 8006148:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800614a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800614c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800614e:	fb02 f303 	mul.w	r3, r2, r3
 8006152:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	3308      	adds	r3, #8
 8006158:	091b      	lsrs	r3, r3, #4
 800615a:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800615c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8006164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006166:	4613      	mov	r3, r2
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	4413      	add	r3, r2
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006176:	0b9b      	lsrs	r3, r3, #14
 8006178:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800617a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800617c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800617e:	4413      	add	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8006182:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006186:	085b      	lsrs	r3, r3, #1
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	4413      	add	r3, r2
 800618c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006194:	fbb2 f3f3 	udiv	r3, r2, r3
 8006198:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	039b      	lsls	r3, r3, #14
 800619e:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	085b      	lsrs	r3, r3, #1
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	4413      	add	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b2:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80061b8:	fb02 f303 	mul.w	r3, r2, r3
 80061bc:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80061c4:	4a32      	ldr	r2, [pc, #200]	; (8006290 <VL53L0X_calc_dmax+0x298>)
 80061c6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ca:	099b      	lsrs	r3, r3, #6
 80061cc:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80061da:	4a2d      	ldr	r2, [pc, #180]	; (8006290 <VL53L0X_calc_dmax+0x298>)
 80061dc:	fba2 2303 	umull	r2, r3, r2, r3
 80061e0:	099b      	lsrs	r3, r3, #6
 80061e2:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80061e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e6:	3380      	adds	r3, #128	; 0x80
 80061e8:	0a1b      	lsrs	r3, r3, #8
 80061ea:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d008      	beq.n	8006204 <VL53L0X_calc_dmax+0x20c>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	085a      	lsrs	r2, r3, #1
 80061f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f8:	441a      	add	r2, r3
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006200:	65bb      	str	r3, [r7, #88]	; 0x58
 8006202:	e001      	b.n	8006208 <VL53L0X_calc_dmax+0x210>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8006204:	2300      	movs	r3, #0
 8006206:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8006208:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800620a:	f7fe fad0 	bl	80047ae <VL53L0X_isqrt>
 800620e:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d008      	beq.n	8006228 <VL53L0X_calc_dmax+0x230>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	085a      	lsrs	r2, r3, #1
 800621a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621c:	441a      	add	r2, r3
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	fbb2 f3f3 	udiv	r3, r2, r3
 8006224:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006226:	e001      	b.n	800622c <VL53L0X_calc_dmax+0x234>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8006228:	2300      	movs	r3, #0
 800622a:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800622c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800622e:	f7fe fabe 	bl	80047ae <VL53L0X_isqrt>
 8006232:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8006234:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006240:	429a      	cmp	r2, r3
 8006242:	d903      	bls.n	800624c <VL53L0X_calc_dmax+0x254>
		*pdmax_mm = dmaxAmbient;
 8006244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006248:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800624a:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 800624c:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <VL53L0X_calc_dmax+0x288>)
 800624e:	681c      	ldr	r4, [r3, #0]
 8006250:	f000 fd92 	bl	8006d78 <HAL_GetTick>
 8006254:	4603      	mov	r3, r0
 8006256:	461a      	mov	r2, r3
 8006258:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800625c:	9302      	str	r3, [sp, #8]
 800625e:	4b09      	ldr	r3, [pc, #36]	; (8006284 <VL53L0X_calc_dmax+0x28c>)
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	9200      	str	r2, [sp, #0]
 8006264:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <VL53L0X_calc_dmax+0x29c>)
 8006266:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800626a:	4621      	mov	r1, r4
 800626c:	2001      	movs	r0, #1
 800626e:	f000 fcd5 	bl	8006c1c <trace_print_module_function>

	return Status;
 8006272:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8006276:	4618      	mov	r0, r3
 8006278:	376c      	adds	r7, #108	; 0x6c
 800627a:	46bd      	mov	sp, r7
 800627c:	bd90      	pop	{r4, r7, pc}
 800627e:	bf00      	nop
 8006280:	2000044c 	.word	0x2000044c
 8006284:	0800bde8 	.word	0x0800bde8
 8006288:	0800bc94 	.word	0x0800bc94
 800628c:	fff00000 	.word	0xfff00000
 8006290:	10624dd3 	.word	0x10624dd3
 8006294:	0800bca8 	.word	0x0800bca8

08006298 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8006298:	b590      	push	{r4, r7, lr}
 800629a:	b0b5      	sub	sp, #212	; 0xd4
 800629c:	af04      	add	r7, sp, #16
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80062a6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80062aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80062ae:	f44f 7316 	mov.w	r3, #600	; 0x258
 80062b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 80062b6:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 80062ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80062be:	f241 235c 	movw	r3, #4700	; 0x125c
 80062c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80062c6:	4baf      	ldr	r3, [pc, #700]	; (8006584 <VL53L0X_calc_sigma_estimate+0x2ec>)
 80062c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80062cc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80062d0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80062d2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80062d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062da:	fbb2 f3f3 	udiv	r3, r2, r3
 80062de:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80062e0:	4ba9      	ldr	r3, [pc, #676]	; (8006588 <VL53L0X_calc_sigma_estimate+0x2f0>)
 80062e2:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80062e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062e8:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80062ea:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80062ee:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80062f0:	f240 6377 	movw	r3, #1655	; 0x677
 80062f4:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062f6:	2300      	movs	r3, #0
 80062f8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * @{
	 *
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");
 80062fc:	4ba3      	ldr	r3, [pc, #652]	; (800658c <VL53L0X_calc_sigma_estimate+0x2f4>)
 80062fe:	681c      	ldr	r4, [r3, #0]
 8006300:	f000 fd3a 	bl	8006d78 <HAL_GetTick>
 8006304:	4603      	mov	r3, r0
 8006306:	461a      	mov	r2, r3
 8006308:	4ba1      	ldr	r3, [pc, #644]	; (8006590 <VL53L0X_calc_sigma_estimate+0x2f8>)
 800630a:	9301      	str	r3, [sp, #4]
 800630c:	9200      	str	r2, [sp, #0]
 800630e:	4ba1      	ldr	r3, [pc, #644]	; (8006594 <VL53L0X_calc_sigma_estimate+0x2fc>)
 8006310:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006314:	4621      	mov	r1, r4
 8006316:	2001      	movs	r0, #1
 8006318:	f000 fc80 	bl	8006c1c <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800632a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800632e:	0c1b      	lsrs	r3, r3, #16
 8006330:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8006338:	f107 0310 	add.w	r3, r7, #16
 800633c:	461a      	mov	r2, r3
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f7ff fe1d 	bl	8005f80 <VL53L0X_get_total_signal_rate>
 8006346:	4603      	mov	r3, r0
 8006348:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800634c:	f107 0314 	add.w	r3, r7, #20
 8006350:	461a      	mov	r2, r3
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f7ff fde3 	bl	8005f20 <VL53L0X_get_total_xtalk_rate>
 800635a:	4603      	mov	r3, r0
 800635c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006366:	fb02 f303 	mul.w	r3, r2, r3
 800636a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800636c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800636e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006372:	0c1b      	lsrs	r3, r3, #16
 8006374:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800637c:	fb02 f303 	mul.w	r3, r2, r3
 8006380:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8006384:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8006388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638a:	429a      	cmp	r2, r3
 800638c:	d902      	bls.n	8006394 <VL53L0X_calc_sigma_estimate+0xfc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800638e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006390:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8006394:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006398:	2b00      	cmp	r3, #0
 800639a:	d168      	bne.n	800646e <VL53L0X_calc_sigma_estimate+0x1d6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80063a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80063ac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80063b0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80063b4:	461a      	mov	r2, r3
 80063b6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f7ff f822 	bl	8005404 <VL53L0X_calc_timeout_mclks>
 80063c0:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80063c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80063d2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80063d6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80063da:	461a      	mov	r2, r3
 80063dc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f7ff f80f 	bl	8005404 <VL53L0X_calc_timeout_mclks>
 80063e6:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80063e8:	2303      	movs	r3, #3
 80063ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 80063ee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80063f2:	2b08      	cmp	r3, #8
 80063f4:	d102      	bne.n	80063fc <VL53L0X_calc_sigma_estimate+0x164>
			vcselWidth = 2;
 80063f6:	2302      	movs	r3, #2
 80063f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80063fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006400:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8006402:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006406:	fb02 f303 	mul.w	r3, r2, r3
 800640a:	02db      	lsls	r3, r3, #11
 800640c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006410:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006414:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006418:	4a5f      	ldr	r2, [pc, #380]	; (8006598 <VL53L0X_calc_sigma_estimate+0x300>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	099b      	lsrs	r3, r3, #6
 8006420:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8006424:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006428:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800642a:	fb02 f303 	mul.w	r3, r2, r3
 800642e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006432:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006436:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800643a:	4a57      	ldr	r2, [pc, #348]	; (8006598 <VL53L0X_calc_sigma_estimate+0x300>)
 800643c:	fba2 2303 	umull	r2, r3, r2, r3
 8006440:	099b      	lsrs	r3, r3, #6
 8006442:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	3380      	adds	r3, #128	; 0x80
 800644a:	0a1b      	lsrs	r3, r3, #8
 800644c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006454:	fb02 f303 	mul.w	r3, r2, r3
 8006458:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800645c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006460:	3380      	adds	r3, #128	; 0x80
 8006462:	0a1b      	lsrs	r3, r3, #8
 8006464:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800646e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006472:	2b00      	cmp	r3, #0
 8006474:	d015      	beq.n	80064a2 <VL53L0X_calc_sigma_estimate+0x20a>
		LOG_FUNCTION_END(Status);
 8006476:	4b45      	ldr	r3, [pc, #276]	; (800658c <VL53L0X_calc_sigma_estimate+0x2f4>)
 8006478:	681c      	ldr	r4, [r3, #0]
 800647a:	f000 fc7d 	bl	8006d78 <HAL_GetTick>
 800647e:	4603      	mov	r3, r0
 8006480:	461a      	mov	r2, r3
 8006482:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006486:	9302      	str	r3, [sp, #8]
 8006488:	4b41      	ldr	r3, [pc, #260]	; (8006590 <VL53L0X_calc_sigma_estimate+0x2f8>)
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	9200      	str	r2, [sp, #0]
 800648e:	4b43      	ldr	r3, [pc, #268]	; (800659c <VL53L0X_calc_sigma_estimate+0x304>)
 8006490:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006494:	4621      	mov	r1, r4
 8006496:	2001      	movs	r0, #1
 8006498:	f000 fbc0 	bl	8006c1c <trace_print_module_function>
		return Status;
 800649c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80064a0:	e17f      	b.n	80067a2 <VL53L0X_calc_sigma_estimate+0x50a>
	}

	if (peakSignalRate_kcps == 0) {
 80064a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10c      	bne.n	80064c2 <VL53L0X_calc_sigma_estimate+0x22a>
		*pSigmaEstimate = cSigmaEstMax;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064ae:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064b6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	e15a      	b.n	8006778 <VL53L0X_calc_sigma_estimate+0x4e0>
	} else {
		if (vcselTotalEventsRtn < 1)
 80064c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d102      	bne.n	80064d0 <VL53L0X_calc_sigma_estimate+0x238>
			vcselTotalEventsRtn = 1;
 80064ca:	2301      	movs	r3, #1
 80064cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 80064d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80064d4:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80064d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064d8:	041a      	lsls	r2, r3, #16
 80064da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80064e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d902      	bls.n	80064f4 <VL53L0X_calc_sigma_estimate+0x25c>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80064ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80064f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064f8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80064fc:	fb02 f303 	mul.w	r3, r2, r3
 8006500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8006504:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006508:	4613      	mov	r3, r2
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4618      	mov	r0, r3
 8006512:	f7fe f94c 	bl	80047ae <VL53L0X_isqrt>
 8006516:	4603      	mov	r3, r0
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	891b      	ldrh	r3, [r3, #8]
 8006520:	461a      	mov	r2, r3
 8006522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006524:	fb02 f303 	mul.w	r3, r2, r3
 8006528:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800652a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800652c:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800652e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006532:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006534:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8006536:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800653a:	4a17      	ldr	r2, [pc, #92]	; (8006598 <VL53L0X_calc_sigma_estimate+0x300>)
 800653c:	fba2 2303 	umull	r2, r3, r2, r3
 8006540:	099b      	lsrs	r3, r3, #6
 8006542:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8006544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006546:	041b      	lsls	r3, r3, #16
 8006548:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800654c:	4a12      	ldr	r2, [pc, #72]	; (8006598 <VL53L0X_calc_sigma_estimate+0x300>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	099b      	lsrs	r3, r3, #6
 8006554:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8006556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006558:	021b      	lsls	r3, r3, #8
 800655a:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800655c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800655e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006560:	fbb2 f3f3 	udiv	r3, r2, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	bfb8      	it	lt
 8006568:	425b      	neglt	r3, r3
 800656a:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800656c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656e:	021b      	lsls	r3, r3, #8
 8006570:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	7e1b      	ldrb	r3, [r3, #24]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d012      	beq.n	80065a0 <VL53L0X_calc_sigma_estimate+0x308>
			pwMult = 1 << 16;
 800657a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800657e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006582:	e03c      	b.n	80065fe <VL53L0X_calc_sigma_estimate+0x366>
 8006584:	028f87ae 	.word	0x028f87ae
 8006588:	0006999a 	.word	0x0006999a
 800658c:	2000044c 	.word	0x2000044c
 8006590:	0800bdfc 	.word	0x0800bdfc
 8006594:	0800bc94 	.word	0x0800bc94
 8006598:	10624dd3 	.word	0x10624dd3
 800659c:	0800bca8 	.word	0x0800bca8
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80065a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80065ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b0:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 80065b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065b8:	fb02 f303 	mul.w	r3, r2, r3
 80065bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80065c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80065c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065c6:	4413      	add	r3, r2
 80065c8:	0c1b      	lsrs	r3, r3, #16
 80065ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 80065ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065d2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80065d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 80065da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065de:	085b      	lsrs	r3, r3, #1
 80065e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 80065e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80065ec:	fb02 f303 	mul.w	r3, r2, r3
 80065f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 80065f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065f8:	0b9b      	lsrs	r3, r3, #14
 80065fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 80065fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006604:	fb02 f303 	mul.w	r3, r2, r3
 8006608:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006618:	fb02 f303 	mul.w	r3, r2, r3
 800661c:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800661e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8006624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006626:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800662a:	0c1b      	lsrs	r3, r3, #16
 800662c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006632:	fb02 f303 	mul.w	r3, r2, r3
 8006636:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8006638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	4413      	add	r3, r2
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8006640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006642:	f7fe f8b4 	bl	80047ae <VL53L0X_isqrt>
 8006646:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	041b      	lsls	r3, r3, #16
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	3332      	adds	r3, #50	; 0x32
 8006652:	4a56      	ldr	r2, [pc, #344]	; (80067ac <VL53L0X_calc_sigma_estimate+0x514>)
 8006654:	fba2 2303 	umull	r2, r3, r2, r3
 8006658:	095a      	lsrs	r2, r3, #5
 800665a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800665c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006660:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8006664:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006668:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800666c:	fb02 f303 	mul.w	r3, r2, r3
 8006670:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8006674:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006678:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800667c:	3308      	adds	r3, #8
 800667e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8006682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006686:	4a4a      	ldr	r2, [pc, #296]	; (80067b0 <VL53L0X_calc_sigma_estimate+0x518>)
 8006688:	fba2 2303 	umull	r2, r3, r2, r3
 800668c:	0b5b      	lsrs	r3, r3, #13
 800668e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8006692:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006696:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006698:	429a      	cmp	r2, r3
 800669a:	d902      	bls.n	80066a2 <VL53L0X_calc_sigma_estimate+0x40a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800669c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800669e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80066a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80066a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80066b0:	4a40      	ldr	r2, [pc, #256]	; (80067b4 <VL53L0X_calc_sigma_estimate+0x51c>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	099b      	lsrs	r3, r3, #6
 80066b8:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80066be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066c2:	441a      	add	r2, r3
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fe f86f 	bl	80047ae <VL53L0X_isqrt>
 80066d0:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	021b      	lsls	r3, r3, #8
 80066d6:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80066de:	4a35      	ldr	r2, [pc, #212]	; (80067b4 <VL53L0X_calc_sigma_estimate+0x51c>)
 80066e0:	fba2 2303 	umull	r2, r3, r2, r3
 80066e4:	099b      	lsrs	r3, r3, #6
 80066e6:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 80066e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066ec:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066f0:	fb02 f303 	mul.w	r3, r2, r3
 80066f4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	69fa      	ldr	r2, [r7, #28]
 80066fa:	fb02 f303 	mul.w	r3, r2, r3
 80066fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8006700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	4413      	add	r3, r2
 8006706:	4618      	mov	r0, r3
 8006708:	f7fe f851 	bl	80047ae <VL53L0X_isqrt>
 800670c:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006714:	fb02 f303 	mul.w	r3, r2, r3
 8006718:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800671c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d009      	beq.n	8006736 <VL53L0X_calc_sigma_estimate+0x49e>
 8006722:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <VL53L0X_calc_sigma_estimate+0x49e>
 800672a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800672e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006732:	429a      	cmp	r2, r3
 8006734:	d903      	bls.n	800673e <VL53L0X_calc_sigma_estimate+0x4a6>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8006736:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800673a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006744:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8006750:	6939      	ldr	r1, [r7, #16]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	9303      	str	r3, [sp, #12]
 8006756:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800675a:	9302      	str	r3, [sp, #8]
 800675c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006760:	9301      	str	r3, [sp, #4]
 8006762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800676a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f7ff fc43 	bl	8005ff8 <VL53L0X_calc_dmax>
 8006772:	4603      	mov	r3, r0
 8006774:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			sigmaEstimateP2,
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
 8006778:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <VL53L0X_calc_sigma_estimate+0x520>)
 800677a:	681c      	ldr	r4, [r3, #0]
 800677c:	f000 fafc 	bl	8006d78 <HAL_GetTick>
 8006780:	4603      	mov	r3, r0
 8006782:	461a      	mov	r2, r3
 8006784:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8006788:	9302      	str	r3, [sp, #8]
 800678a:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <VL53L0X_calc_sigma_estimate+0x524>)
 800678c:	9301      	str	r3, [sp, #4]
 800678e:	9200      	str	r2, [sp, #0]
 8006790:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <VL53L0X_calc_sigma_estimate+0x528>)
 8006792:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006796:	4621      	mov	r1, r4
 8006798:	2001      	movs	r0, #1
 800679a:	f000 fa3f 	bl	8006c1c <trace_print_module_function>
	return Status;
 800679e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	37c4      	adds	r7, #196	; 0xc4
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd90      	pop	{r4, r7, pc}
 80067aa:	bf00      	nop
 80067ac:	51eb851f 	.word	0x51eb851f
 80067b0:	d1b71759 	.word	0xd1b71759
 80067b4:	10624dd3 	.word	0x10624dd3
 80067b8:	2000044c 	.word	0x2000044c
 80067bc:	0800bdfc 	.word	0x0800bdfc
 80067c0:	0800bca8 	.word	0x0800bca8

080067c4 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80067c4:	b590      	push	{r4, r7, lr}
 80067c6:	b095      	sub	sp, #84	; 0x54
 80067c8:	af04      	add	r7, sp, #16
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	607a      	str	r2, [r7, #4]
 80067ce:	461a      	mov	r2, r3
 80067d0:	460b      	mov	r3, r1
 80067d2:	72fb      	strb	r3, [r7, #11]
 80067d4:	4613      	mov	r3, r2
 80067d6:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067d8:	2300      	movs	r3, #0
 80067da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80067de:	2300      	movs	r3, #0
 80067e0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80067f0:	2300      	movs	r3, #0
 80067f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80067fc:	2300      	movs	r3, #0
 80067fe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8006802:	2300      	movs	r3, #0
 8006804:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8006808:	2300      	movs	r3, #0
 800680a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	613b      	str	r3, [r7, #16]
	FixPoint1616_t LastSignalRefMcps;

	LOG_FUNCTION_START("");
 8006816:	4bc6      	ldr	r3, [pc, #792]	; (8006b30 <VL53L0X_get_pal_range_status+0x36c>)
 8006818:	681c      	ldr	r4, [r3, #0]
 800681a:	f000 faad 	bl	8006d78 <HAL_GetTick>
 800681e:	4603      	mov	r3, r0
 8006820:	461a      	mov	r2, r3
 8006822:	4bc4      	ldr	r3, [pc, #784]	; (8006b34 <VL53L0X_get_pal_range_status+0x370>)
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	9200      	str	r2, [sp, #0]
 8006828:	4bc3      	ldr	r3, [pc, #780]	; (8006b38 <VL53L0X_get_pal_range_status+0x374>)
 800682a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800682e:	4621      	mov	r1, r4
 8006830:	2001      	movs	r0, #1
 8006832:	f000 f9f3 	bl	8006c1c <trace_print_module_function>
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8006836:	7afb      	ldrb	r3, [r7, #11]
 8006838:	10db      	asrs	r3, r3, #3
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f003 030f 	and.w	r3, r3, #15
 8006840:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8006844:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006848:	2b00      	cmp	r3, #0
 800684a:	d017      	beq.n	800687c <VL53L0X_get_pal_range_status+0xb8>
 800684c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006850:	2b05      	cmp	r3, #5
 8006852:	d013      	beq.n	800687c <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 5 ||
 8006854:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006858:	2b07      	cmp	r3, #7
 800685a:	d00f      	beq.n	800687c <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 7 ||
 800685c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006860:	2b0c      	cmp	r3, #12
 8006862:	d00b      	beq.n	800687c <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 12 ||
 8006864:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006868:	2b0d      	cmp	r3, #13
 800686a:	d007      	beq.n	800687c <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 13 ||
 800686c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006870:	2b0e      	cmp	r3, #14
 8006872:	d003      	beq.n	800687c <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 14 ||
 8006874:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006878:	2b0f      	cmp	r3, #15
 800687a:	d103      	bne.n	8006884 <VL53L0X_get_pal_range_status+0xc0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8006882:	e002      	b.n	800688a <VL53L0X_get_pal_range_status+0xc6>
	} else {
		NoneFlag = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800688a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800688e:	2b00      	cmp	r3, #0
 8006890:	d109      	bne.n	80068a6 <VL53L0X_get_pal_range_status+0xe2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006892:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006896:	461a      	mov	r2, r3
 8006898:	2100      	movs	r1, #0
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f7fb ffe8 	bl	8002870 <VL53L0X_GetLimitCheckEnable>
 80068a0:	4603      	mov	r3, r0
 80068a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80068a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d02e      	beq.n	800690c <VL53L0X_get_pal_range_status+0x148>
 80068ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d12a      	bne.n	800690c <VL53L0X_get_pal_range_status+0x148>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80068b6:	f107 0310 	add.w	r3, r7, #16
 80068ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80068be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7ff fce9 	bl	8006298 <VL53L0X_calc_sigma_estimate>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80068cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d103      	bne.n	80068dc <VL53L0X_get_pal_range_status+0x118>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068da:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80068dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d113      	bne.n	800690c <VL53L0X_get_pal_range_status+0x148>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80068e4:	f107 0320 	add.w	r3, r7, #32
 80068e8:	461a      	mov	r2, r3
 80068ea:	2100      	movs	r1, #0
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f7fc f897 	bl	8002a20 <VL53L0X_GetLimitCheckValue>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d006      	beq.n	800690c <VL53L0X_get_pal_range_status+0x148>
				(SigmaEstimate > SigmaLimitValue))
 80068fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006900:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8006902:	429a      	cmp	r2, r3
 8006904:	d902      	bls.n	800690c <VL53L0X_get_pal_range_status+0x148>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8006906:	2301      	movs	r3, #1
 8006908:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800690c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006910:	2b00      	cmp	r3, #0
 8006912:	d109      	bne.n	8006928 <VL53L0X_get_pal_range_status+0x164>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006914:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8006918:	461a      	mov	r2, r3
 800691a:	2102      	movs	r1, #2
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f7fb ffa7 	bl	8002870 <VL53L0X_GetLimitCheckEnable>
 8006922:	4603      	mov	r3, r0
 8006924:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8006928:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800692c:	2b00      	cmp	r3, #0
 800692e:	d044      	beq.n	80069ba <VL53L0X_get_pal_range_status+0x1f6>
 8006930:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006934:	2b00      	cmp	r3, #0
 8006936:	d140      	bne.n	80069ba <VL53L0X_get_pal_range_status+0x1f6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8006938:	f107 031c 	add.w	r3, r7, #28
 800693c:	461a      	mov	r2, r3
 800693e:	2102      	movs	r1, #2
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f7fc f86d 	bl	8002a20 <VL53L0X_GetLimitCheckValue>
 8006946:	4603      	mov	r3, r0
 8006948:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800694c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006950:	2b00      	cmp	r3, #0
 8006952:	d107      	bne.n	8006964 <VL53L0X_get_pal_range_status+0x1a0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006954:	2201      	movs	r2, #1
 8006956:	21ff      	movs	r1, #255	; 0xff
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f7fa fca7 	bl	80012ac <VL53L0X_WrByte>
 800695e:	4603      	mov	r3, r0
 8006960:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8006964:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006968:	2b00      	cmp	r3, #0
 800696a:	d109      	bne.n	8006980 <VL53L0X_get_pal_range_status+0x1bc>
			Status = VL53L0X_RdWord(Dev,
 800696c:	f107 0316 	add.w	r3, r7, #22
 8006970:	461a      	mov	r2, r3
 8006972:	21b6      	movs	r1, #182	; 0xb6
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f7fa fd45 	bl	8001404 <VL53L0X_RdWord>
 800697a:	4603      	mov	r3, r0
 800697c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8006980:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006984:	2b00      	cmp	r3, #0
 8006986:	d107      	bne.n	8006998 <VL53L0X_get_pal_range_status+0x1d4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006988:	2200      	movs	r2, #0
 800698a:	21ff      	movs	r1, #255	; 0xff
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7fa fc8d 	bl	80012ac <VL53L0X_WrByte>
 8006992:	4603      	mov	r3, r0
 8006994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8006998:	8afb      	ldrh	r3, [r7, #22]
 800699a:	025b      	lsls	r3, r3, #9
 800699c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069a2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d006      	beq.n	80069ba <VL53L0X_get_pal_range_status+0x1f6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80069ac:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80069ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d902      	bls.n	80069ba <VL53L0X_get_pal_range_status+0x1f6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80069ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d109      	bne.n	80069d6 <VL53L0X_get_pal_range_status+0x212>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80069c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069c6:	461a      	mov	r2, r3
 80069c8:	2103      	movs	r1, #3
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f7fb ff50 	bl	8002870 <VL53L0X_GetLimitCheckEnable>
 80069d0:	4603      	mov	r3, r0
 80069d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80069d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d023      	beq.n	8006a26 <VL53L0X_get_pal_range_status+0x262>
 80069de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d11f      	bne.n	8006a26 <VL53L0X_get_pal_range_status+0x262>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80069e6:	893b      	ldrh	r3, [r7, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d102      	bne.n	80069f2 <VL53L0X_get_pal_range_status+0x22e>
			SignalRatePerSpad = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	637b      	str	r3, [r7, #52]	; 0x34
 80069f0:	e005      	b.n	80069fe <VL53L0X_get_pal_range_status+0x23a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	021a      	lsls	r2, r3, #8
 80069f6:	893b      	ldrh	r3, [r7, #8]
 80069f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fc:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80069fe:	f107 0318 	add.w	r3, r7, #24
 8006a02:	461a      	mov	r2, r3
 8006a04:	2103      	movs	r1, #3
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7fc f80a 	bl	8002a20 <VL53L0X_GetLimitCheckValue>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d006      	beq.n	8006a26 <VL53L0X_get_pal_range_status+0x262>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8006a18:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8006a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d202      	bcs.n	8006a26 <VL53L0X_get_pal_range_status+0x262>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8006a20:	2301      	movs	r3, #1
 8006a22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d14a      	bne.n	8006ac4 <VL53L0X_get_pal_range_status+0x300>
		if (NoneFlag == 1) {
 8006a2e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d103      	bne.n	8006a3e <VL53L0X_get_pal_range_status+0x27a>
			*pPalRangeStatus = 255;	 /* NONE */
 8006a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a38:	22ff      	movs	r2, #255	; 0xff
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	e042      	b.n	8006ac4 <VL53L0X_get_pal_range_status+0x300>
		} else if (DeviceRangeStatusInternal == 1 ||
 8006a3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d007      	beq.n	8006a56 <VL53L0X_get_pal_range_status+0x292>
 8006a46:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d003      	beq.n	8006a56 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 2 ||
 8006a4e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d103      	bne.n	8006a5e <VL53L0X_get_pal_range_status+0x29a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8006a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a58:	2205      	movs	r2, #5
 8006a5a:	701a      	strb	r2, [r3, #0]
 8006a5c:	e032      	b.n	8006ac4 <VL53L0X_get_pal_range_status+0x300>
		} else if (DeviceRangeStatusInternal == 6 ||
 8006a5e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006a62:	2b06      	cmp	r3, #6
 8006a64:	d003      	beq.n	8006a6e <VL53L0X_get_pal_range_status+0x2aa>
 8006a66:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006a6a:	2b09      	cmp	r3, #9
 8006a6c:	d103      	bne.n	8006a76 <VL53L0X_get_pal_range_status+0x2b2>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8006a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a70:	2204      	movs	r2, #4
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	e026      	b.n	8006ac4 <VL53L0X_get_pal_range_status+0x300>
		} else if (DeviceRangeStatusInternal == 8 ||
 8006a76:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006a7a:	2b08      	cmp	r3, #8
 8006a7c:	d007      	beq.n	8006a8e <VL53L0X_get_pal_range_status+0x2ca>
 8006a7e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006a82:	2b0a      	cmp	r3, #10
 8006a84:	d003      	beq.n	8006a8e <VL53L0X_get_pal_range_status+0x2ca>
					DeviceRangeStatusInternal == 10 ||
 8006a86:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d103      	bne.n	8006a96 <VL53L0X_get_pal_range_status+0x2d2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8006a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a90:	2203      	movs	r2, #3
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	e016      	b.n	8006ac4 <VL53L0X_get_pal_range_status+0x300>
		} else if (DeviceRangeStatusInternal == 4 ||
 8006a96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d003      	beq.n	8006aa6 <VL53L0X_get_pal_range_status+0x2e2>
 8006a9e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d103      	bne.n	8006aae <VL53L0X_get_pal_range_status+0x2ea>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8006aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	e00a      	b.n	8006ac4 <VL53L0X_get_pal_range_status+0x300>
		} else if (SigmaLimitflag == 1) {
 8006aae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d103      	bne.n	8006abe <VL53L0X_get_pal_range_status+0x2fa>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8006ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ab8:	2201      	movs	r2, #1
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	e002      	b.n	8006ac4 <VL53L0X_get_pal_range_status+0x300>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8006abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8006ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d102      	bne.n	8006ad2 <VL53L0X_get_pal_range_status+0x30e>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8006acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ace:	2200      	movs	r2, #0
 8006ad0:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006ad2:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	2101      	movs	r1, #1
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f7fb fec8 	bl	8002870 <VL53L0X_GetLimitCheckEnable>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8006ae6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d156      	bne.n	8006b9c <VL53L0X_get_pal_range_status+0x3d8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8006aee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <VL53L0X_get_pal_range_status+0x33a>
 8006af6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d103      	bne.n	8006b06 <VL53L0X_get_pal_range_status+0x342>
			Temp8 = 1;
 8006afe:	2301      	movs	r3, #1
 8006b00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b04:	e002      	b.n	8006b0c <VL53L0X_get_pal_range_status+0x348>
		else
			Temp8 = 0;
 8006b06:	2300      	movs	r3, #0
 8006b08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006b12:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8006b16:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d003      	beq.n	8006b26 <VL53L0X_get_pal_range_status+0x362>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8006b1e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10a      	bne.n	8006b3c <VL53L0X_get_pal_range_status+0x378>
			Temp8 = 1;
 8006b26:	2301      	movs	r3, #1
 8006b28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b2c:	e009      	b.n	8006b42 <VL53L0X_get_pal_range_status+0x37e>
 8006b2e:	bf00      	nop
 8006b30:	2000044c 	.word	0x2000044c
 8006b34:	0800be18 	.word	0x0800be18
 8006b38:	0800bc94 	.word	0x0800bc94
		else
			Temp8 = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006b48:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8006b4c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <VL53L0X_get_pal_range_status+0x398>
 8006b54:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d103      	bne.n	8006b64 <VL53L0X_get_pal_range_status+0x3a0>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b62:	e002      	b.n	8006b6a <VL53L0X_get_pal_range_status+0x3a6>
		else
			Temp8 = 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006b70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8006b74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <VL53L0X_get_pal_range_status+0x3c0>
 8006b7c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d103      	bne.n	8006b8c <VL53L0X_get_pal_range_status+0x3c8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8006b84:	2301      	movs	r3, #1
 8006b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b8a:	e002      	b.n	8006b92 <VL53L0X_get_pal_range_status+0x3ce>
		else
			Temp8 = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006b98:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
 8006b9c:	4b0c      	ldr	r3, [pc, #48]	; (8006bd0 <VL53L0X_get_pal_range_status+0x40c>)
 8006b9e:	681c      	ldr	r4, [r3, #0]
 8006ba0:	f000 f8ea 	bl	8006d78 <HAL_GetTick>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006bac:	9302      	str	r3, [sp, #8]
 8006bae:	4b09      	ldr	r3, [pc, #36]	; (8006bd4 <VL53L0X_get_pal_range_status+0x410>)
 8006bb0:	9301      	str	r3, [sp, #4]
 8006bb2:	9200      	str	r2, [sp, #0]
 8006bb4:	4b08      	ldr	r3, [pc, #32]	; (8006bd8 <VL53L0X_get_pal_range_status+0x414>)
 8006bb6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006bba:	4621      	mov	r1, r4
 8006bbc:	2001      	movs	r0, #1
 8006bbe:	f000 f82d 	bl	8006c1c <trace_print_module_function>
	return Status;
 8006bc2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3744      	adds	r7, #68	; 0x44
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd90      	pop	{r4, r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	2000044c 	.word	0x2000044c
 8006bd4:	0800be18 	.word	0x0800be18
 8006bd8:	0800bca8 	.word	0x0800bca8

08006bdc <VL53L0X_trace_config>:
uint32_t _trace_modules = TRACE_MODULE_NONE;
uint32_t _trace_functions = TRACE_FUNCTION_NONE;

#if defined(VL53L0X_LOG_ENABLE) && (TRACE_UART==1)
int32_t VL53L0X_trace_config(char *filename, uint32_t modules, uint32_t level, uint32_t functions)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	603b      	str	r3, [r7, #0]
    int STATUS = 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	617b      	str	r3, [r7, #20]

    _trace_functions = functions;
 8006bee:	4a08      	ldr	r2, [pc, #32]	; (8006c10 <VL53L0X_trace_config+0x34>)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	6013      	str	r3, [r2, #0]
    _trace_level = level;
 8006bf4:	4a07      	ldr	r2, [pc, #28]	; (8006c14 <VL53L0X_trace_config+0x38>)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6013      	str	r3, [r2, #0]
    _trace_modules = modules;
 8006bfa:	4a07      	ldr	r2, [pc, #28]	; (8006c18 <VL53L0X_trace_config+0x3c>)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	6013      	str	r3, [r2, #0]

    return STATUS;
 8006c00:	697b      	ldr	r3, [r7, #20]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	200005e8 	.word	0x200005e8
 8006c14:	2000044c 	.word	0x2000044c
 8006c18:	200005e4 	.word	0x200005e4

08006c1c <trace_print_module_function>:


void trace_print_module_function(uint32_t module, uint32_t level, uint32_t function, const char *format, ...)
{
 8006c1c:	b408      	push	{r3}
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b087      	sub	sp, #28
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
    if ( ((level <=_trace_level) && ((module & _trace_modules) > 0))
 8006c2a:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <trace_print_module_function+0x4c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d805      	bhi.n	8006c40 <trace_print_module_function+0x24>
 8006c34:	4b0d      	ldr	r3, [pc, #52]	; (8006c6c <trace_print_module_function+0x50>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d105      	bne.n	8006c4c <trace_print_module_function+0x30>
        || ((function & _trace_functions) > 0) )
 8006c40:	4b0b      	ldr	r3, [pc, #44]	; (8006c70 <trace_print_module_function+0x54>)
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4013      	ands	r3, r2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d006      	beq.n	8006c5a <trace_print_module_function+0x3e>
    {
    	va_list arg_list;
        va_start(arg_list, format);
 8006c4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c50:	617b      	str	r3, [r7, #20]
        trace_vprintf( format, arg_list);
 8006c52:	6979      	ldr	r1, [r7, #20]
 8006c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c56:	f7fa f93b 	bl	8000ed0 <uart_vprintf>
        va_end(arg_list);
    }
}
 8006c5a:	bf00      	nop
 8006c5c:	371c      	adds	r7, #28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c64:	b001      	add	sp, #4
 8006c66:	4770      	bx	lr
 8006c68:	2000044c 	.word	0x2000044c
 8006c6c:	200005e4 	.word	0x200005e4
 8006c70:	200005e8 	.word	0x200005e8

08006c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c78:	4b16      	ldr	r3, [pc, #88]	; (8006cd4 <SystemInit+0x60>)
 8006c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7e:	4a15      	ldr	r2, [pc, #84]	; (8006cd4 <SystemInit+0x60>)
 8006c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006c88:	4b13      	ldr	r3, [pc, #76]	; (8006cd8 <SystemInit+0x64>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a12      	ldr	r2, [pc, #72]	; (8006cd8 <SystemInit+0x64>)
 8006c8e:	f043 0301 	orr.w	r3, r3, #1
 8006c92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006c94:	4b10      	ldr	r3, [pc, #64]	; (8006cd8 <SystemInit+0x64>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006c9a:	4b0f      	ldr	r3, [pc, #60]	; (8006cd8 <SystemInit+0x64>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a0e      	ldr	r2, [pc, #56]	; (8006cd8 <SystemInit+0x64>)
 8006ca0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ca8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006caa:	4b0b      	ldr	r3, [pc, #44]	; (8006cd8 <SystemInit+0x64>)
 8006cac:	4a0b      	ldr	r2, [pc, #44]	; (8006cdc <SystemInit+0x68>)
 8006cae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006cb0:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <SystemInit+0x64>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a08      	ldr	r2, [pc, #32]	; (8006cd8 <SystemInit+0x64>)
 8006cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006cbc:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <SystemInit+0x64>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006cc2:	4b04      	ldr	r3, [pc, #16]	; (8006cd4 <SystemInit+0x60>)
 8006cc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006cc8:	609a      	str	r2, [r3, #8]
#endif
}
 8006cca:	bf00      	nop
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	e000ed00 	.word	0xe000ed00
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	24003010 	.word	0x24003010

08006ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ce4:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <HAL_Init+0x40>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a0d      	ldr	r2, [pc, #52]	; (8006d20 <HAL_Init+0x40>)
 8006cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8006cf0:	4b0b      	ldr	r3, [pc, #44]	; (8006d20 <HAL_Init+0x40>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a0a      	ldr	r2, [pc, #40]	; (8006d20 <HAL_Init+0x40>)
 8006cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006cfc:	4b08      	ldr	r3, [pc, #32]	; (8006d20 <HAL_Init+0x40>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a07      	ldr	r2, [pc, #28]	; (8006d20 <HAL_Init+0x40>)
 8006d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d08:	2003      	movs	r0, #3
 8006d0a:	f000 f923 	bl	8006f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d0e:	200f      	movs	r0, #15
 8006d10:	f000 f808 	bl	8006d24 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8006d14:	f7f9 fdee 	bl	80008f4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	40023c00 	.word	0x40023c00

08006d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8006d2c:	4b09      	ldr	r3, [pc, #36]	; (8006d54 <HAL_InitTick+0x30>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a09      	ldr	r2, [pc, #36]	; (8006d58 <HAL_InitTick+0x34>)
 8006d32:	fba2 2303 	umull	r2, r3, r2, r3
 8006d36:	099b      	lsrs	r3, r3, #6
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f940 	bl	8006fbe <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8006d3e:	2200      	movs	r2, #0
 8006d40:	6879      	ldr	r1, [r7, #4]
 8006d42:	f04f 30ff 	mov.w	r0, #4294967295
 8006d46:	f000 f910 	bl	8006f6a <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000450 	.word	0x20000450
 8006d58:	10624dd3 	.word	0x10624dd3

08006d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  uwTick++;
 8006d60:	4b04      	ldr	r3, [pc, #16]	; (8006d74 <HAL_IncTick+0x18>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3301      	adds	r3, #1
 8006d66:	4a03      	ldr	r2, [pc, #12]	; (8006d74 <HAL_IncTick+0x18>)
 8006d68:	6013      	str	r3, [r2, #0]
}
 8006d6a:	bf00      	nop
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	2000079c 	.word	0x2000079c

08006d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8006d7c:	4b03      	ldr	r3, [pc, #12]	; (8006d8c <HAL_GetTick+0x14>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	2000079c 	.word	0x2000079c

08006d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8006d9c:	f7ff ffec 	bl	8006d78 <HAL_GetTick>
 8006da0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8006da2:	bf00      	nop
 8006da4:	f7ff ffe8 	bl	8006d78 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	1ad2      	subs	r2, r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d3f7      	bcc.n	8006da4 <HAL_Delay+0x14>
  {
  }
}
 8006db4:	bf00      	nop
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f003 0307 	and.w	r3, r3, #7
 8006dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006dcc:	4b0c      	ldr	r3, [pc, #48]	; (8006e00 <NVIC_SetPriorityGrouping+0x44>)
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006dd8:	4013      	ands	r3, r2
 8006dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006dee:	4a04      	ldr	r2, [pc, #16]	; (8006e00 <NVIC_SetPriorityGrouping+0x44>)
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	60d3      	str	r3, [r2, #12]
}
 8006df4:	bf00      	nop
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	e000ed00 	.word	0xe000ed00

08006e04 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e08:	4b04      	ldr	r3, [pc, #16]	; (8006e1c <NVIC_GetPriorityGrouping+0x18>)
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	0a1b      	lsrs	r3, r3, #8
 8006e0e:	f003 0307 	and.w	r3, r3, #7
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	e000ed00 	.word	0xe000ed00

08006e20 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	4603      	mov	r3, r0
 8006e28:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
 8006e2c:	f003 021f 	and.w	r2, r3, #31
 8006e30:	4907      	ldr	r1, [pc, #28]	; (8006e50 <NVIC_EnableIRQ+0x30>)
 8006e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	2001      	movs	r0, #1
 8006e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8006e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	e000e100 	.word	0xe000e100

08006e54 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	6039      	str	r1, [r7, #0]
 8006e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8006e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	da0b      	bge.n	8006e80 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	490c      	ldr	r1, [pc, #48]	; (8006ea0 <NVIC_SetPriority+0x4c>)
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	f003 030f 	and.w	r3, r3, #15
 8006e74:	3b04      	subs	r3, #4
 8006e76:	0112      	lsls	r2, r2, #4
 8006e78:	b2d2      	uxtb	r2, r2
 8006e7a:	440b      	add	r3, r1
 8006e7c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e7e:	e009      	b.n	8006e94 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	4907      	ldr	r1, [pc, #28]	; (8006ea4 <NVIC_SetPriority+0x50>)
 8006e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e8a:	0112      	lsls	r2, r2, #4
 8006e8c:	b2d2      	uxtb	r2, r2
 8006e8e:	440b      	add	r3, r1
 8006e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	e000ed00 	.word	0xe000ed00
 8006ea4:	e000e100 	.word	0xe000e100

08006ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b089      	sub	sp, #36	; 0x24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f003 0307 	and.w	r3, r3, #7
 8006eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	f1c3 0307 	rsb	r3, r3, #7
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	bf28      	it	cs
 8006ec6:	2304      	movcs	r3, #4
 8006ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	3304      	adds	r3, #4
 8006ece:	2b06      	cmp	r3, #6
 8006ed0:	d902      	bls.n	8006ed8 <NVIC_EncodePriority+0x30>
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	3b03      	subs	r3, #3
 8006ed6:	e000      	b.n	8006eda <NVIC_EncodePriority+0x32>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006edc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee6:	43da      	mvns	r2, r3
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	401a      	ands	r2, r3
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8006efa:	43d9      	mvns	r1, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f00:	4313      	orrs	r3, r2
         );
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3724      	adds	r7, #36	; 0x24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
	...

08006f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f20:	d301      	bcc.n	8006f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f22:	2301      	movs	r3, #1
 8006f24:	e00f      	b.n	8006f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f26:	4a0a      	ldr	r2, [pc, #40]	; (8006f50 <SysTick_Config+0x40>)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f2e:	210f      	movs	r1, #15
 8006f30:	f04f 30ff 	mov.w	r0, #4294967295
 8006f34:	f7ff ff8e 	bl	8006e54 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f38:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <SysTick_Config+0x40>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f3e:	4b04      	ldr	r3, [pc, #16]	; (8006f50 <SysTick_Config+0x40>)
 8006f40:	2207      	movs	r2, #7
 8006f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	e000e010 	.word	0xe000e010

08006f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff ff2d 	bl	8006dbc <NVIC_SetPriorityGrouping>
}
 8006f62:	bf00      	nop
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b086      	sub	sp, #24
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	4603      	mov	r3, r0
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	607a      	str	r2, [r7, #4]
 8006f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f7c:	f7ff ff42 	bl	8006e04 <NVIC_GetPriorityGrouping>
 8006f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	68b9      	ldr	r1, [r7, #8]
 8006f86:	6978      	ldr	r0, [r7, #20]
 8006f88:	f7ff ff8e 	bl	8006ea8 <NVIC_EncodePriority>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f92:	4611      	mov	r1, r2
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7ff ff5d 	bl	8006e54 <NVIC_SetPriority>
}
 8006f9a:	bf00      	nop
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b082      	sub	sp, #8
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	4603      	mov	r3, r0
 8006faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff ff35 	bl	8006e20 <NVIC_EnableIRQ>
}
 8006fb6:	bf00      	nop
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff ffa2 	bl	8006f10 <SysTick_Config>
 8006fcc:	4603      	mov	r3, r0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006fda:	f000 f802 	bl	8006fe2 <HAL_SYSTICK_Callback>
}
 8006fde:	bf00      	nop
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006fe6:	bf00      	nop
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006ffc:	f7ff febc 	bl	8006d78 <HAL_GetTick>
 8007000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e095      	b.n	8007138 <HAL_DMA_Init+0x148>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0201 	bic.w	r2, r2, #1
 800702a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800702c:	e00f      	b.n	800704e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800702e:	f7ff fea3 	bl	8006d78 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b05      	cmp	r3, #5
 800703a:	d908      	bls.n	800704e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2203      	movs	r2, #3
 8007046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e074      	b.n	8007138 <HAL_DMA_Init+0x148>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e8      	bne.n	800702e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	4b36      	ldr	r3, [pc, #216]	; (8007140 <HAL_DMA_Init+0x150>)
 8007068:	4013      	ands	r3, r2
 800706a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800707a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	4313      	orrs	r3, r2
 800709e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	d107      	bne.n	80070b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	4313      	orrs	r3, r2
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f023 0307 	bic.w	r3, r3, #7
 80070ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	2b04      	cmp	r3, #4
 80070e0:	d113      	bne.n	800710a <HAL_DMA_Init+0x11a>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]
    
    if(DMA_CheckFifoParam(hdma) != HAL_OK)
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fa9f 	bl	8007630 <DMA_CheckFifoParam>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d008      	beq.n	800710a <HAL_DMA_Init+0x11a>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2240      	movs	r2, #64	; 0x40
 80070fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_ERROR; 
 8007106:	2301      	movs	r3, #1
 8007108:	e016      	b.n	8007138 <HAL_DMA_Init+0x148>
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fa56 	bl	80075c4 <DMA_CalcBaseAndBitshift>
 8007118:	4603      	mov	r3, r0
 800711a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007120:	223f      	movs	r2, #63	; 0x3f
 8007122:	409a      	lsls	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	f010803f 	.word	0xf010803f

08007144 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007162:	2b01      	cmp	r3, #1
 8007164:	d101      	bne.n	800716a <HAL_DMA_Start_IT+0x26>
 8007166:	2302      	movs	r3, #2
 8007168:	e048      	b.n	80071fc <HAL_DMA_Start_IT+0xb8>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b01      	cmp	r3, #1
 800717c:	d137      	bne.n	80071ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2202      	movs	r2, #2
 8007182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	68b9      	ldr	r1, [r7, #8]
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 f9e8 	bl	8007568 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719c:	223f      	movs	r2, #63	; 0x3f
 800719e:	409a      	lsls	r2, r3
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0216 	orr.w	r2, r2, #22
 80071b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695a      	ldr	r2, [r3, #20]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80071c2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d007      	beq.n	80071dc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f042 0208 	orr.w	r2, r2, #8
 80071da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0201 	orr.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	e005      	b.n	80071fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80071f6:	2302      	movs	r3, #2
 80071f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b02      	cmp	r3, #2
 8007216:	d004      	beq.n	8007222 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2280      	movs	r2, #128	; 0x80
 800721c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e00c      	b.n	800723c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2205      	movs	r2, #5
 8007226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 0201 	bic.w	r2, r2, #1
 8007238:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007250:	2300      	movs	r3, #0
 8007252:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007254:	4b93      	ldr	r3, [pc, #588]	; (80074a4 <HAL_DMA_IRQHandler+0x25c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a93      	ldr	r2, [pc, #588]	; (80074a8 <HAL_DMA_IRQHandler+0x260>)
 800725a:	fba2 2303 	umull	r2, r3, r2, r3
 800725e:	0a9b      	lsrs	r3, r3, #10
 8007260:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007266:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007272:	2208      	movs	r2, #8
 8007274:	409a      	lsls	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4013      	ands	r3, r2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01a      	beq.n	80072b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b00      	cmp	r3, #0
 800728a:	d013      	beq.n	80072b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0204 	bic.w	r2, r2, #4
 800729a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a0:	2208      	movs	r2, #8
 80072a2:	409a      	lsls	r2, r3
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ac:	f043 0201 	orr.w	r2, r3, #1
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b8:	4a7c      	ldr	r2, [pc, #496]	; (80074ac <HAL_DMA_IRQHandler+0x264>)
 80072ba:	409a      	lsls	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4013      	ands	r3, r2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d012      	beq.n	80072ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00b      	beq.n	80072ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d6:	4a75      	ldr	r2, [pc, #468]	; (80074ac <HAL_DMA_IRQHandler+0x264>)
 80072d8:	409a      	lsls	r2, r3
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	f043 0202 	orr.w	r2, r3, #2
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ee:	4a70      	ldr	r2, [pc, #448]	; (80074b0 <HAL_DMA_IRQHandler+0x268>)
 80072f0:	409a      	lsls	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4013      	ands	r3, r2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d012      	beq.n	8007320 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00b      	beq.n	8007320 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800730c:	4a68      	ldr	r2, [pc, #416]	; (80074b0 <HAL_DMA_IRQHandler+0x268>)
 800730e:	409a      	lsls	r2, r3
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007318:	f043 0204 	orr.w	r2, r3, #4
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007324:	2210      	movs	r2, #16
 8007326:	409a      	lsls	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4013      	ands	r3, r2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d043      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0308 	and.w	r3, r3, #8
 800733a:	2b00      	cmp	r3, #0
 800733c:	d03c      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007342:	2210      	movs	r2, #16
 8007344:	409a      	lsls	r2, r3
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d018      	beq.n	800738a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d108      	bne.n	8007378 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	d024      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	4798      	blx	r3
 8007376:	e01f      	b.n	80073b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800737c:	2b00      	cmp	r3, #0
 800737e:	d01b      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4798      	blx	r3
 8007388:	e016      	b.n	80073b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007394:	2b00      	cmp	r3, #0
 8007396:	d107      	bne.n	80073a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0208 	bic.w	r2, r2, #8
 80073a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073bc:	2220      	movs	r2, #32
 80073be:	409a      	lsls	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4013      	ands	r3, r2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 8094 	beq.w	80074f2 <HAL_DMA_IRQHandler+0x2aa>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0310 	and.w	r3, r3, #16
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 808c 	beq.w	80074f2 <HAL_DMA_IRQHandler+0x2aa>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073de:	2220      	movs	r2, #32
 80073e0:	409a      	lsls	r2, r3
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b05      	cmp	r3, #5
 80073f0:	d137      	bne.n	8007462 <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 0216 	bic.w	r2, r2, #22
 8007400:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	695a      	ldr	r2, [r3, #20]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007410:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	2b00      	cmp	r3, #0
 8007418:	d103      	bne.n	8007422 <HAL_DMA_IRQHandler+0x1da>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800741e:	2b00      	cmp	r3, #0
 8007420:	d007      	beq.n	8007432 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0208 	bic.w	r2, r2, #8
 8007430:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007436:	223f      	movs	r2, #63	; 0x3f
 8007438:	409a      	lsls	r2, r3
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 8083 	beq.w	800755e <HAL_DMA_IRQHandler+0x316>
        {
          hdma->XferAbortCallback(hdma);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	4798      	blx	r3
        }
        return;
 8007460:	e07d      	b.n	800755e <HAL_DMA_IRQHandler+0x316>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d021      	beq.n	80074b4 <HAL_DMA_IRQHandler+0x26c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d108      	bne.n	8007490 <HAL_DMA_IRQHandler+0x248>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007482:	2b00      	cmp	r3, #0
 8007484:	d035      	beq.n	80074f2 <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	4798      	blx	r3
 800748e:	e030      	b.n	80074f2 <HAL_DMA_IRQHandler+0x2aa>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007494:	2b00      	cmp	r3, #0
 8007496:	d02c      	beq.n	80074f2 <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	4798      	blx	r3
 80074a0:	e027      	b.n	80074f2 <HAL_DMA_IRQHandler+0x2aa>
 80074a2:	bf00      	nop
 80074a4:	20000450 	.word	0x20000450
 80074a8:	1b4e81b5 	.word	0x1b4e81b5
 80074ac:	00800001 	.word	0x00800001
 80074b0:	00800004 	.word	0x00800004
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10f      	bne.n	80074e2 <HAL_DMA_IRQHandler+0x29a>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0210 	bic.w	r2, r2, #16
 80074d0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_DMA_IRQHandler+0x2aa>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d032      	beq.n	8007560 <HAL_DMA_IRQHandler+0x318>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d022      	beq.n	800754c <HAL_DMA_IRQHandler+0x304>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2205      	movs	r2, #5
 800750a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0201 	bic.w	r2, r2, #1
 800751c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	3301      	adds	r3, #1
 8007522:	60bb      	str	r3, [r7, #8]
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	429a      	cmp	r2, r3
 8007528:	d307      	bcc.n	800753a <HAL_DMA_IRQHandler+0x2f2>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1f2      	bne.n	800751e <HAL_DMA_IRQHandler+0x2d6>
 8007538:	e000      	b.n	800753c <HAL_DMA_IRQHandler+0x2f4>
          break;
 800753a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <HAL_DMA_IRQHandler+0x318>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	4798      	blx	r3
 800755c:	e000      	b.n	8007560 <HAL_DMA_IRQHandler+0x318>
        return;
 800755e:	bf00      	nop
    }
  }
}
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop

08007568 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007584:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	2b40      	cmp	r3, #64	; 0x40
 8007594:	d108      	bne.n	80075a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80075a6:	e007      	b.n	80075b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	60da      	str	r2, [r3, #12]
}
 80075b8:	bf00      	nop
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	3b10      	subs	r3, #16
 80075d4:	4a14      	ldr	r2, [pc, #80]	; (8007628 <DMA_CalcBaseAndBitshift+0x64>)
 80075d6:	fba2 2303 	umull	r2, r3, r2, r3
 80075da:	091b      	lsrs	r3, r3, #4
 80075dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80075de:	4a13      	ldr	r2, [pc, #76]	; (800762c <DMA_CalcBaseAndBitshift+0x68>)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4413      	add	r3, r2
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d909      	bls.n	8007606 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80075fa:	f023 0303 	bic.w	r3, r3, #3
 80075fe:	1d1a      	adds	r2, r3, #4
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	659a      	str	r2, [r3, #88]	; 0x58
 8007604:	e007      	b.n	8007616 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800760e:	f023 0303 	bic.w	r3, r3, #3
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	aaaaaaab 	.word	0xaaaaaaab
 800762c:	0800be38 	.word	0x0800be38

08007630 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007640:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d128      	bne.n	800769c <DMA_CheckFifoParam+0x6c>
  {
    switch (tmp)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2b03      	cmp	r3, #3
 800764e:	d862      	bhi.n	8007716 <DMA_CheckFifoParam+0xe6>
 8007650:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <DMA_CheckFifoParam+0x28>)
 8007652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007656:	bf00      	nop
 8007658:	08007669 	.word	0x08007669
 800765c:	0800767b 	.word	0x0800767b
 8007660:	0800768b 	.word	0x0800768b
 8007664:	08007717 	.word	0x08007717
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        if((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d052      	beq.n	800771a <DMA_CheckFifoParam+0xea>
        {
          status = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007678:	e04f      	b.n	800771a <DMA_CheckFifoParam+0xea>
      case DMA_FIFO_THRESHOLD_HALFFULL:
        if(hdma->Init.MemBurst == DMA_MBURST_INC16)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007682:	d14c      	bne.n	800771e <DMA_CheckFifoParam+0xee>
        {
          status = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007688:	e049      	b.n	800771e <DMA_CheckFifoParam+0xee>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        if((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d045      	beq.n	8007722 <DMA_CheckFifoParam+0xf2>
        {
          status = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800769a:	e042      	b.n	8007722 <DMA_CheckFifoParam+0xf2>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076a4:	d125      	bne.n	80076f2 <DMA_CheckFifoParam+0xc2>
  {
    switch (tmp)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	d83c      	bhi.n	8007726 <DMA_CheckFifoParam+0xf6>
 80076ac:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <DMA_CheckFifoParam+0x84>)
 80076ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b2:	bf00      	nop
 80076b4:	080076c5 	.word	0x080076c5
 80076b8:	080076cb 	.word	0x080076cb
 80076bc:	080076dd 	.word	0x080076dd
 80076c0:	080076e3 	.word	0x080076e3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        status = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	73fb      	strb	r3, [r7, #15]
        break;
 80076c8:	e034      	b.n	8007734 <DMA_CheckFifoParam+0x104>
      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d029      	beq.n	800772a <DMA_CheckFifoParam+0xfa>
        {
          status = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076da:	e026      	b.n	800772a <DMA_CheckFifoParam+0xfa>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	73fb      	strb	r3, [r7, #15]
        break;
 80076e0:	e028      	b.n	8007734 <DMA_CheckFifoParam+0x104>
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076ea:	d120      	bne.n	800772e <DMA_CheckFifoParam+0xfe>
        {
          status = HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	73fb      	strb	r3, [r7, #15]
        }
        break;   
 80076f0:	e01d      	b.n	800772e <DMA_CheckFifoParam+0xfe>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d902      	bls.n	80076fe <DMA_CheckFifoParam+0xce>
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d003      	beq.n	8007704 <DMA_CheckFifoParam+0xd4>
        {
          status = HAL_ERROR;
        }
		break;
      default:
        break;
 80076fc:	e01a      	b.n	8007734 <DMA_CheckFifoParam+0x104>
        status = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	73fb      	strb	r3, [r7, #15]
        break;
 8007702:	e017      	b.n	8007734 <DMA_CheckFifoParam+0x104>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d010      	beq.n	8007732 <DMA_CheckFifoParam+0x102>
          status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	73fb      	strb	r3, [r7, #15]
		break;
 8007714:	e00d      	b.n	8007732 <DMA_CheckFifoParam+0x102>
        break;
 8007716:	bf00      	nop
 8007718:	e00c      	b.n	8007734 <DMA_CheckFifoParam+0x104>
        break;
 800771a:	bf00      	nop
 800771c:	e00a      	b.n	8007734 <DMA_CheckFifoParam+0x104>
        break;
 800771e:	bf00      	nop
 8007720:	e008      	b.n	8007734 <DMA_CheckFifoParam+0x104>
        break;
 8007722:	bf00      	nop
 8007724:	e006      	b.n	8007734 <DMA_CheckFifoParam+0x104>
        break;
 8007726:	bf00      	nop
 8007728:	e004      	b.n	8007734 <DMA_CheckFifoParam+0x104>
        break;
 800772a:	bf00      	nop
 800772c:	e002      	b.n	8007734 <DMA_CheckFifoParam+0x104>
        break;   
 800772e:	bf00      	nop
 8007730:	e000      	b.n	8007734 <DMA_CheckFifoParam+0x104>
		break;
 8007732:	bf00      	nop
    }
  } 
  
  return status; 
 8007734:	7bfb      	ldrb	r3, [r7, #15]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop

08007744 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007744:	b480      	push	{r7}
 8007746:	b089      	sub	sp, #36	; 0x24
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800774e:	2300      	movs	r3, #0
 8007750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007752:	2300      	movs	r3, #0
 8007754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007756:	2300      	movs	r3, #0
 8007758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800775a:	2300      	movs	r3, #0
 800775c:	61fb      	str	r3, [r7, #28]
 800775e:	e159      	b.n	8007a14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8007760:	2201      	movs	r2, #1
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	fa02 f303 	lsl.w	r3, r2, r3
 8007768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	4013      	ands	r3, r2
 8007772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	429a      	cmp	r2, r3
 800777a:	f040 8148 	bne.w	8007a0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d003      	beq.n	800778e <HAL_GPIO_Init+0x4a>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	2b12      	cmp	r3, #18
 800778c:	d123      	bne.n	80077d6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	08da      	lsrs	r2, r3, #3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	3208      	adds	r2, #8
 8007796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800779a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	f003 0307 	and.w	r3, r3, #7
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	220f      	movs	r2, #15
 80077a6:	fa02 f303 	lsl.w	r3, r2, r3
 80077aa:	43db      	mvns	r3, r3
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	4013      	ands	r3, r2
 80077b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	691a      	ldr	r2, [r3, #16]
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	f003 0307 	and.w	r3, r3, #7
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	fa02 f303 	lsl.w	r3, r2, r3
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	08da      	lsrs	r2, r3, #3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3208      	adds	r2, #8
 80077d0:	69b9      	ldr	r1, [r7, #24]
 80077d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	2203      	movs	r2, #3
 80077e2:	fa02 f303 	lsl.w	r3, r2, r3
 80077e6:	43db      	mvns	r3, r3
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	4013      	ands	r3, r2
 80077ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f003 0203 	and.w	r2, r3, #3
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	fa02 f303 	lsl.w	r3, r2, r3
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	4313      	orrs	r3, r2
 8007802:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d00b      	beq.n	800782a <HAL_GPIO_Init+0xe6>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	2b02      	cmp	r3, #2
 8007818:	d007      	beq.n	800782a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800781e:	2b11      	cmp	r3, #17
 8007820:	d003      	beq.n	800782a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	2b12      	cmp	r3, #18
 8007828:	d130      	bne.n	800788c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	2203      	movs	r2, #3
 8007836:	fa02 f303 	lsl.w	r3, r2, r3
 800783a:	43db      	mvns	r3, r3
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	4013      	ands	r3, r2
 8007840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	fa02 f303 	lsl.w	r3, r2, r3
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	4313      	orrs	r3, r2
 8007852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007860:	2201      	movs	r2, #1
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	fa02 f303 	lsl.w	r3, r2, r3
 8007868:	43db      	mvns	r3, r3
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	4013      	ands	r3, r2
 800786e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	091b      	lsrs	r3, r3, #4
 8007876:	f003 0201 	and.w	r2, r3, #1
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	fa02 f303 	lsl.w	r3, r2, r3
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	4313      	orrs	r3, r2
 8007884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	2203      	movs	r2, #3
 8007898:	fa02 f303 	lsl.w	r3, r2, r3
 800789c:	43db      	mvns	r3, r3
 800789e:	69ba      	ldr	r2, [r7, #24]
 80078a0:	4013      	ands	r3, r2
 80078a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	fa02 f303 	lsl.w	r3, r2, r3
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 80a2 	beq.w	8007a0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	4b56      	ldr	r3, [pc, #344]	; (8007a28 <HAL_GPIO_Init+0x2e4>)
 80078d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d2:	4a55      	ldr	r2, [pc, #340]	; (8007a28 <HAL_GPIO_Init+0x2e4>)
 80078d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078d8:	6453      	str	r3, [r2, #68]	; 0x44
 80078da:	4b53      	ldr	r3, [pc, #332]	; (8007a28 <HAL_GPIO_Init+0x2e4>)
 80078dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80078e6:	4a51      	ldr	r2, [pc, #324]	; (8007a2c <HAL_GPIO_Init+0x2e8>)
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	089b      	lsrs	r3, r3, #2
 80078ec:	3302      	adds	r3, #2
 80078ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	220f      	movs	r2, #15
 80078fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007902:	43db      	mvns	r3, r3
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	4013      	ands	r3, r2
 8007908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a48      	ldr	r2, [pc, #288]	; (8007a30 <HAL_GPIO_Init+0x2ec>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d019      	beq.n	8007946 <HAL_GPIO_Init+0x202>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a47      	ldr	r2, [pc, #284]	; (8007a34 <HAL_GPIO_Init+0x2f0>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d013      	beq.n	8007942 <HAL_GPIO_Init+0x1fe>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a46      	ldr	r2, [pc, #280]	; (8007a38 <HAL_GPIO_Init+0x2f4>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d00d      	beq.n	800793e <HAL_GPIO_Init+0x1fa>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a45      	ldr	r2, [pc, #276]	; (8007a3c <HAL_GPIO_Init+0x2f8>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d007      	beq.n	800793a <HAL_GPIO_Init+0x1f6>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a44      	ldr	r2, [pc, #272]	; (8007a40 <HAL_GPIO_Init+0x2fc>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d101      	bne.n	8007936 <HAL_GPIO_Init+0x1f2>
 8007932:	2304      	movs	r3, #4
 8007934:	e008      	b.n	8007948 <HAL_GPIO_Init+0x204>
 8007936:	2307      	movs	r3, #7
 8007938:	e006      	b.n	8007948 <HAL_GPIO_Init+0x204>
 800793a:	2303      	movs	r3, #3
 800793c:	e004      	b.n	8007948 <HAL_GPIO_Init+0x204>
 800793e:	2302      	movs	r3, #2
 8007940:	e002      	b.n	8007948 <HAL_GPIO_Init+0x204>
 8007942:	2301      	movs	r3, #1
 8007944:	e000      	b.n	8007948 <HAL_GPIO_Init+0x204>
 8007946:	2300      	movs	r3, #0
 8007948:	69fa      	ldr	r2, [r7, #28]
 800794a:	f002 0203 	and.w	r2, r2, #3
 800794e:	0092      	lsls	r2, r2, #2
 8007950:	4093      	lsls	r3, r2
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	4313      	orrs	r3, r2
 8007956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007958:	4934      	ldr	r1, [pc, #208]	; (8007a2c <HAL_GPIO_Init+0x2e8>)
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	089b      	lsrs	r3, r3, #2
 800795e:	3302      	adds	r3, #2
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007966:	4b37      	ldr	r3, [pc, #220]	; (8007a44 <HAL_GPIO_Init+0x300>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	43db      	mvns	r3, r3
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	4013      	ands	r3, r2
 8007974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	4313      	orrs	r3, r2
 8007988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800798a:	4a2e      	ldr	r2, [pc, #184]	; (8007a44 <HAL_GPIO_Init+0x300>)
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007990:	4b2c      	ldr	r3, [pc, #176]	; (8007a44 <HAL_GPIO_Init+0x300>)
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	43db      	mvns	r3, r3
 800799a:	69ba      	ldr	r2, [r7, #24]
 800799c:	4013      	ands	r3, r2
 800799e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80079b4:	4a23      	ldr	r2, [pc, #140]	; (8007a44 <HAL_GPIO_Init+0x300>)
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80079ba:	4b22      	ldr	r3, [pc, #136]	; (8007a44 <HAL_GPIO_Init+0x300>)
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	43db      	mvns	r3, r3
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	4013      	ands	r3, r2
 80079c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	4313      	orrs	r3, r2
 80079dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80079de:	4a19      	ldr	r2, [pc, #100]	; (8007a44 <HAL_GPIO_Init+0x300>)
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80079e4:	4b17      	ldr	r3, [pc, #92]	; (8007a44 <HAL_GPIO_Init+0x300>)
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	43db      	mvns	r3, r3
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	4013      	ands	r3, r2
 80079f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d003      	beq.n	8007a08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007a00:	69ba      	ldr	r2, [r7, #24]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a08:	4a0e      	ldr	r2, [pc, #56]	; (8007a44 <HAL_GPIO_Init+0x300>)
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	3301      	adds	r3, #1
 8007a12:	61fb      	str	r3, [r7, #28]
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	2b0f      	cmp	r3, #15
 8007a18:	f67f aea2 	bls.w	8007760 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	3724      	adds	r7, #36	; 0x24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	40023800 	.word	0x40023800
 8007a2c:	40013800 	.word	0x40013800
 8007a30:	40020000 	.word	0x40020000
 8007a34:	40020400 	.word	0x40020400
 8007a38:	40020800 	.word	0x40020800
 8007a3c:	40020c00 	.word	0x40020c00
 8007a40:	40021000 	.word	0x40021000
 8007a44:	40013c00 	.word	0x40013c00

08007a48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	460b      	mov	r3, r1
 8007a52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	691a      	ldr	r2, [r3, #16]
 8007a58:	887b      	ldrh	r3, [r7, #2]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a60:	2301      	movs	r3, #1
 8007a62:	73fb      	strb	r3, [r7, #15]
 8007a64:	e001      	b.n	8007a6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a66:	2300      	movs	r3, #0
 8007a68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	807b      	strh	r3, [r7, #2]
 8007a84:	4613      	mov	r3, r2
 8007a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a88:	787b      	ldrb	r3, [r7, #1]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a8e:	887a      	ldrh	r2, [r7, #2]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007a94:	e003      	b.n	8007a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007a96:	887b      	ldrh	r3, [r7, #2]
 8007a98:	041a      	lsls	r2, r3, #16
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	619a      	str	r2, [r3, #24]
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
	...

08007aac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007ab6:	4b08      	ldr	r3, [pc, #32]	; (8007ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ab8:	695a      	ldr	r2, [r3, #20]
 8007aba:	88fb      	ldrh	r3, [r7, #6]
 8007abc:	4013      	ands	r3, r2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d006      	beq.n	8007ad0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007ac2:	4a05      	ldr	r2, [pc, #20]	; (8007ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ac4:	88fb      	ldrh	r3, [r7, #6]
 8007ac6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ac8:	88fb      	ldrh	r3, [r7, #6]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7f9 fb16 	bl	80010fc <HAL_GPIO_EXTI_Callback>
  }
}
 8007ad0:	bf00      	nop
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	40013c00 	.word	0x40013c00

08007adc <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e0c8      	b.n	8007c88 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d106      	bne.n	8007b10 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f8c6 	bl	8007c9c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2224      	movs	r2, #36	; 0x24
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 0201 	bic.w	r2, r2, #1
 8007b26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007b28:	f001 faa6 	bl	8009078 <HAL_RCC_GetPCLK1Freq>
 8007b2c:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	4a57      	ldr	r2, [pc, #348]	; (8007c90 <HAL_I2C_Init+0x1b4>)
 8007b32:	fba2 2303 	umull	r2, r3, r2, r3
 8007b36:	0c9b      	lsrs	r3, r3, #18
 8007b38:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	4a53      	ldr	r2, [pc, #332]	; (8007c94 <HAL_I2C_Init+0x1b8>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d802      	bhi.n	8007b52 <HAL_I2C_Init+0x76>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	e009      	b.n	8007b66 <HAL_I2C_Init+0x8a>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007b58:	fb02 f303 	mul.w	r3, r2, r3
 8007b5c:	4a4e      	ldr	r2, [pc, #312]	; (8007c98 <HAL_I2C_Init+0x1bc>)
 8007b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b62:	099b      	lsrs	r3, r3, #6
 8007b64:	3301      	adds	r3, #1
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	6812      	ldr	r2, [r2, #0]
 8007b6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	4a48      	ldr	r2, [pc, #288]	; (8007c94 <HAL_I2C_Init+0x1b8>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d812      	bhi.n	8007b9c <HAL_I2C_Init+0xc0>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	d906      	bls.n	8007b98 <HAL_I2C_Init+0xbc>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	005b      	lsls	r3, r3, #1
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b96:	e045      	b.n	8007c24 <HAL_I2C_Init+0x148>
 8007b98:	2304      	movs	r3, #4
 8007b9a:	e043      	b.n	8007c24 <HAL_I2C_Init+0x148>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10f      	bne.n	8007bc4 <HAL_I2C_Init+0xe8>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	4413      	add	r3, r2
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	bf0c      	ite	eq
 8007bbc:	2301      	moveq	r3, #1
 8007bbe:	2300      	movne	r3, #0
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	e010      	b.n	8007be6 <HAL_I2C_Init+0x10a>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	009a      	lsls	r2, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	bf0c      	ite	eq
 8007be0:	2301      	moveq	r3, #1
 8007be2:	2300      	movne	r3, #0
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <HAL_I2C_Init+0x112>
 8007bea:	2301      	movs	r3, #1
 8007bec:	e01a      	b.n	8007c24 <HAL_I2C_Init+0x148>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10a      	bne.n	8007c0c <HAL_I2C_Init+0x130>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	4413      	add	r3, r2
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c0a:	e00b      	b.n	8007c24 <HAL_I2C_Init+0x148>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	009a      	lsls	r2, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6812      	ldr	r2, [r2, #0]
 8007c28:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69d9      	ldr	r1, [r3, #28]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1a      	ldr	r2, [r3, #32]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	430a      	orrs	r2, r1
 8007c38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6919      	ldr	r1, [r3, #16]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68da      	ldr	r2, [r3, #12]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6959      	ldr	r1, [r3, #20]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	699a      	ldr	r2, [r3, #24]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f042 0201 	orr.w	r2, r2, #1
 8007c68:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	431bde83 	.word	0x431bde83
 8007c94:	000186a0 	.word	0x000186a0
 8007c98:	10624dd3 	.word	0x10624dd3

08007c9c <HAL_I2C_MspInit>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af02      	add	r7, sp, #8
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	607a      	str	r2, [r7, #4]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	817b      	strh	r3, [r7, #10]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cc8:	f7ff f856 	bl	8006d78 <HAL_GetTick>
 8007ccc:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b20      	cmp	r3, #32
 8007cd8:	f040 80ed 	bne.w	8007eb6 <HAL_I2C_Master_Transmit+0x206>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	2319      	movs	r3, #25
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	4976      	ldr	r1, [pc, #472]	; (8007ec0 <HAL_I2C_Master_Transmit+0x210>)
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 fc6a 	bl	80085c0 <I2C_WaitOnFlagUntilTimeout>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e0e0      	b.n	8007eb8 <HAL_I2C_Master_Transmit+0x208>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d101      	bne.n	8007d04 <HAL_I2C_Master_Transmit+0x54>
 8007d00:	2302      	movs	r3, #2
 8007d02:	e0d9      	b.n	8007eb8 <HAL_I2C_Master_Transmit+0x208>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d007      	beq.n	8007d2a <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f042 0201 	orr.w	r2, r2, #1
 8007d28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d38:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2221      	movs	r2, #33	; 0x21
 8007d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2210      	movs	r2, #16
 8007d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	893a      	ldrh	r2, [r7, #8]
 8007d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4a59      	ldr	r2, [pc, #356]	; (8007ec4 <HAL_I2C_Master_Transmit+0x214>)
 8007d60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007d6c:	8979      	ldrh	r1, [r7, #10]
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	6a3a      	ldr	r2, [r7, #32]
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 fada 	bl	800832c <I2C_MasterRequestWrite>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00f      	beq.n	8007d9e <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d105      	bne.n	8007d92 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e092      	b.n	8007eb8 <HAL_I2C_Master_Transmit+0x208>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e08c      	b.n	8007eb8 <HAL_I2C_Master_Transmit+0x208>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d9e:	2300      	movs	r3, #0
 8007da0:	613b      	str	r3, [r7, #16]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	613b      	str	r3, [r7, #16]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8007db4:	e065      	b.n	8007e82 <HAL_I2C_Master_Transmit+0x1d2>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	6a39      	ldr	r1, [r7, #32]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 fcbf 	bl	800873e <I2C_WaitOnTXEFlagUntilTimeout>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00f      	beq.n	8007de6 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dca:	2b04      	cmp	r3, #4
 8007dcc:	d109      	bne.n	8007de2 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ddc:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e06a      	b.n	8007eb8 <HAL_I2C_Master_Transmit+0x208>
        }
        else
        {
          return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e068      	b.n	8007eb8 <HAL_I2C_Master_Transmit+0x208>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	1c59      	adds	r1, r3, #1
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	6251      	str	r1, [r2, #36]	; 0x24
 8007df0:	781a      	ldrb	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	f003 0304 	and.w	r3, r3, #4
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d118      	bne.n	8007e52 <HAL_I2C_Master_Transmit+0x1a2>
 8007e20:	893b      	ldrh	r3, [r7, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d015      	beq.n	8007e52 <HAL_I2C_Master_Transmit+0x1a2>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	1c59      	adds	r1, r3, #1
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	6251      	str	r1, [r2, #36]	; 0x24
 8007e30:	781a      	ldrb	r2, [r3, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	6a39      	ldr	r1, [r7, #32]
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 fcae 	bl	80087b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00f      	beq.n	8007e82 <HAL_I2C_Master_Transmit+0x1d2>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e66:	2b04      	cmp	r3, #4
 8007e68:	d109      	bne.n	8007e7e <HAL_I2C_Master_Transmit+0x1ce>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e78:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e01c      	b.n	8007eb8 <HAL_I2C_Master_Transmit+0x208>
        }
        else
        {
          return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e01a      	b.n	8007eb8 <HAL_I2C_Master_Transmit+0x208>
    while(hi2c->XferSize > 0U)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d195      	bne.n	8007db6 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e000      	b.n	8007eb8 <HAL_I2C_Master_Transmit+0x208>
  }
  else
  {
    return HAL_BUSY;
 8007eb6:	2302      	movs	r3, #2
  }
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	00100002 	.word	0x00100002
 8007ec4:	ffff0000 	.word	0xffff0000

08007ec8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08c      	sub	sp, #48	; 0x30
 8007ecc:	af02      	add	r7, sp, #8
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	607a      	str	r2, [r7, #4]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	817b      	strh	r3, [r7, #10]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ee0:	f7fe ff4a 	bl	8006d78 <HAL_GetTick>
 8007ee4:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b20      	cmp	r3, #32
 8007ef0:	f040 8215 	bne.w	800831e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	2319      	movs	r3, #25
 8007efa:	2201      	movs	r2, #1
 8007efc:	4985      	ldr	r1, [pc, #532]	; (8008114 <HAL_I2C_Master_Receive+0x24c>)
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f000 fb5e 	bl	80085c0 <I2C_WaitOnFlagUntilTimeout>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d001      	beq.n	8007f0e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	e208      	b.n	8008320 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d101      	bne.n	8007f1c <HAL_I2C_Master_Receive+0x54>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	e201      	b.n	8008320 <HAL_I2C_Master_Receive+0x458>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d007      	beq.n	8007f42 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f042 0201 	orr.w	r2, r2, #1
 8007f40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2222      	movs	r2, #34	; 0x22
 8007f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2210      	movs	r2, #16
 8007f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	893a      	ldrh	r2, [r7, #8]
 8007f72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4a68      	ldr	r2, [pc, #416]	; (8008118 <HAL_I2C_Master_Receive+0x250>)
 8007f78:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007f84:	8979      	ldrh	r1, [r7, #10]
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 fa50 	bl	8008430 <I2C_MasterRequestRead>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00f      	beq.n	8007fb6 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	2b04      	cmp	r3, #4
 8007f9c:	d105      	bne.n	8007faa <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e1ba      	b.n	8008320 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e1b4      	b.n	8008320 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d113      	bne.n	8007fe6 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	623b      	str	r3, [r7, #32]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	623b      	str	r3, [r7, #32]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	623b      	str	r3, [r7, #32]
 8007fd2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	e188      	b.n	80082f8 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d11b      	bne.n	8008026 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ffc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ffe:	2300      	movs	r3, #0
 8008000:	61fb      	str	r3, [r7, #28]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	61fb      	str	r3, [r7, #28]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	61fb      	str	r3, [r7, #28]
 8008012:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	e168      	b.n	80082f8 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800802a:	2b02      	cmp	r3, #2
 800802c:	d11b      	bne.n	8008066 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800803c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800804c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800804e:	2300      	movs	r3, #0
 8008050:	61bb      	str	r3, [r7, #24]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	61bb      	str	r3, [r7, #24]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	61bb      	str	r3, [r7, #24]
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	e148      	b.n	80082f8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008074:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008076:	2300      	movs	r3, #0
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	617b      	str	r3, [r7, #20]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	617b      	str	r3, [r7, #20]
 800808a:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 800808c:	e134      	b.n	80082f8 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008092:	2b03      	cmp	r3, #3
 8008094:	f200 80eb 	bhi.w	800826e <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800809c:	2b01      	cmp	r3, #1
 800809e:	d127      	bne.n	80080f0 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80080a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 fbc4 	bl	8008832 <I2C_WaitOnRXNEFlagUntilTimeout>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d007      	beq.n	80080c0 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	d101      	bne.n	80080bc <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e131      	b.n	8008320 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e12f      	b.n	8008320 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6918      	ldr	r0, [r3, #16]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	1c59      	adds	r1, r3, #1
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	6251      	str	r1, [r2, #36]	; 0x24
 80080d0:	b2c2      	uxtb	r2, r0
 80080d2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080d8:	3b01      	subs	r3, #1
 80080da:	b29a      	uxth	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	3b01      	subs	r3, #1
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080ee:	e103      	b.n	80082f8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d14a      	bne.n	800818e <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fe:	2200      	movs	r2, #0
 8008100:	4906      	ldr	r1, [pc, #24]	; (800811c <HAL_I2C_Master_Receive+0x254>)
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 fa5c 	bl	80085c0 <I2C_WaitOnFlagUntilTimeout>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d008      	beq.n	8008120 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e106      	b.n	8008320 <HAL_I2C_Master_Receive+0x458>
 8008112:	bf00      	nop
 8008114:	00100002 	.word	0x00100002
 8008118:	ffff0000 	.word	0xffff0000
 800811c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800812e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6918      	ldr	r0, [r3, #16]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	1c59      	adds	r1, r3, #1
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	6251      	str	r1, [r2, #36]	; 0x24
 8008140:	b2c2      	uxtb	r2, r0
 8008142:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008148:	3b01      	subs	r3, #1
 800814a:	b29a      	uxth	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008154:	b29b      	uxth	r3, r3
 8008156:	3b01      	subs	r3, #1
 8008158:	b29a      	uxth	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	6918      	ldr	r0, [r3, #16]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008168:	1c59      	adds	r1, r3, #1
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	6251      	str	r1, [r2, #36]	; 0x24
 800816e:	b2c2      	uxtb	r2, r0
 8008170:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008176:	3b01      	subs	r3, #1
 8008178:	b29a      	uxth	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008182:	b29b      	uxth	r3, r3
 8008184:	3b01      	subs	r3, #1
 8008186:	b29a      	uxth	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800818c:	e0b4      	b.n	80082f8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008194:	2200      	movs	r2, #0
 8008196:	4964      	ldr	r1, [pc, #400]	; (8008328 <HAL_I2C_Master_Receive+0x460>)
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 fa11 	bl	80085c0 <I2C_WaitOnFlagUntilTimeout>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e0bb      	b.n	8008320 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6918      	ldr	r0, [r3, #16]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	1c59      	adds	r1, r3, #1
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	6251      	str	r1, [r2, #36]	; 0x24
 80081c8:	b2c2      	uxtb	r2, r0
 80081ca:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081d0:	3b01      	subs	r3, #1
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081dc:	b29b      	uxth	r3, r3
 80081de:	3b01      	subs	r3, #1
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	2200      	movs	r2, #0
 80081ee:	494e      	ldr	r1, [pc, #312]	; (8008328 <HAL_I2C_Master_Receive+0x460>)
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f000 f9e5 	bl	80085c0 <I2C_WaitOnFlagUntilTimeout>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e08f      	b.n	8008320 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800820e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6918      	ldr	r0, [r3, #16]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	1c59      	adds	r1, r3, #1
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	6251      	str	r1, [r2, #36]	; 0x24
 8008220:	b2c2      	uxtb	r2, r0
 8008222:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008228:	3b01      	subs	r3, #1
 800822a:	b29a      	uxth	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008234:	b29b      	uxth	r3, r3
 8008236:	3b01      	subs	r3, #1
 8008238:	b29a      	uxth	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6918      	ldr	r0, [r3, #16]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	1c59      	adds	r1, r3, #1
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	6251      	str	r1, [r2, #36]	; 0x24
 800824e:	b2c2      	uxtb	r2, r0
 8008250:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008256:	3b01      	subs	r3, #1
 8008258:	b29a      	uxth	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008262:	b29b      	uxth	r3, r3
 8008264:	3b01      	subs	r3, #1
 8008266:	b29a      	uxth	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800826c:	e044      	b.n	80082f8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800826e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008270:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f000 fadd 	bl	8008832 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d007      	beq.n	800828e <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	2b20      	cmp	r3, #32
 8008284:	d101      	bne.n	800828a <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e04a      	b.n	8008320 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e048      	b.n	8008320 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6918      	ldr	r0, [r3, #16]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	1c59      	adds	r1, r3, #1
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	6251      	str	r1, [r2, #36]	; 0x24
 800829e:	b2c2      	uxtb	r2, r0
 80082a0:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a6:	3b01      	subs	r3, #1
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	3b01      	subs	r3, #1
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	f003 0304 	and.w	r3, r3, #4
 80082c6:	2b04      	cmp	r3, #4
 80082c8:	d116      	bne.n	80082f8 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6918      	ldr	r0, [r3, #16]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	1c59      	adds	r1, r3, #1
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	6251      	str	r1, [r2, #36]	; 0x24
 80082da:	b2c2      	uxtb	r2, r0
 80082dc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e2:	3b01      	subs	r3, #1
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	3b01      	subs	r3, #1
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f47f aec6 	bne.w	800808e <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2220      	movs	r2, #32
 8008306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	e000      	b.n	8008320 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800831e:	2302      	movs	r3, #2
  }
}
 8008320:	4618      	mov	r0, r3
 8008322:	3728      	adds	r7, #40	; 0x28
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	00010004 	.word	0x00010004

0800832c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b088      	sub	sp, #32
 8008330:	af02      	add	r7, sp, #8
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	607a      	str	r2, [r7, #4]
 8008336:	603b      	str	r3, [r7, #0]
 8008338:	460b      	mov	r3, r1
 800833a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008340:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b04      	cmp	r3, #4
 8008346:	d006      	beq.n	8008356 <I2C_MasterRequestWrite+0x2a>
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d003      	beq.n	8008356 <I2C_MasterRequestWrite+0x2a>
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008354:	d108      	bne.n	8008368 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	e00b      	b.n	8008380 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836c:	2b12      	cmp	r3, #18
 800836e:	d107      	bne.n	8008380 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800837e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 f917 	bl	80085c0 <I2C_WaitOnFlagUntilTimeout>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	e041      	b.n	8008420 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083a4:	d108      	bne.n	80083b8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80083a6:	897b      	ldrh	r3, [r7, #10]
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	461a      	mov	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80083b4:	611a      	str	r2, [r3, #16]
 80083b6:	e021      	b.n	80083fc <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80083b8:	897b      	ldrh	r3, [r7, #10]
 80083ba:	11db      	asrs	r3, r3, #7
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	f003 0306 	and.w	r3, r3, #6
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	f063 030f 	orn	r3, r3, #15
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	4914      	ldr	r1, [pc, #80]	; (8008428 <I2C_MasterRequestWrite+0xfc>)
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f000 f943 	bl	8008662 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d007      	beq.n	80083f2 <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	d101      	bne.n	80083ee <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e018      	b.n	8008420 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e016      	b.n	8008420 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80083f2:	897b      	ldrh	r3, [r7, #10]
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	490a      	ldr	r1, [pc, #40]	; (800842c <I2C_MasterRequestWrite+0x100>)
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 f92d 	bl	8008662 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d007      	beq.n	800841e <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	2b04      	cmp	r3, #4
 8008414:	d101      	bne.n	800841a <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e002      	b.n	8008420 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e000      	b.n	8008420 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	00010008 	.word	0x00010008
 800842c:	00010002 	.word	0x00010002

08008430 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	af02      	add	r7, sp, #8
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	607a      	str	r2, [r7, #4]
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	460b      	mov	r3, r1
 800843e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008454:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2b04      	cmp	r3, #4
 800845a:	d006      	beq.n	800846a <I2C_MasterRequestRead+0x3a>
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d003      	beq.n	800846a <I2C_MasterRequestRead+0x3a>
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008468:	d108      	bne.n	800847c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	e00b      	b.n	8008494 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008480:	2b11      	cmp	r3, #17
 8008482:	d107      	bne.n	8008494 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008492:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 f88d 	bl	80085c0 <I2C_WaitOnFlagUntilTimeout>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e07f      	b.n	80085b0 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084b8:	d108      	bne.n	80084cc <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80084ba:	897b      	ldrh	r3, [r7, #10]
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	f043 0301 	orr.w	r3, r3, #1
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	611a      	str	r2, [r3, #16]
 80084ca:	e05f      	b.n	800858c <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80084cc:	897b      	ldrh	r3, [r7, #10]
 80084ce:	11db      	asrs	r3, r3, #7
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	f003 0306 	and.w	r3, r3, #6
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	f063 030f 	orn	r3, r3, #15
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	4933      	ldr	r1, [pc, #204]	; (80085b8 <I2C_MasterRequestRead+0x188>)
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 f8b9 	bl	8008662 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d007      	beq.n	8008506 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	d101      	bne.n	8008502 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e056      	b.n	80085b0 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e054      	b.n	80085b0 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008506:	897b      	ldrh	r3, [r7, #10]
 8008508:	b2da      	uxtb	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	4929      	ldr	r1, [pc, #164]	; (80085bc <I2C_MasterRequestRead+0x18c>)
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f000 f8a3 	bl	8008662 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d007      	beq.n	8008532 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008526:	2b04      	cmp	r3, #4
 8008528:	d101      	bne.n	800852e <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e040      	b.n	80085b0 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e03e      	b.n	80085b0 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008532:	2300      	movs	r3, #0
 8008534:	613b      	str	r3, [r7, #16]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	613b      	str	r3, [r7, #16]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	613b      	str	r3, [r7, #16]
 8008546:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008556:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 f82b 	bl	80085c0 <I2C_WaitOnFlagUntilTimeout>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e01d      	b.n	80085b0 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008574:	897b      	ldrh	r3, [r7, #10]
 8008576:	11db      	asrs	r3, r3, #7
 8008578:	b2db      	uxtb	r3, r3
 800857a:	f003 0306 	and.w	r3, r3, #6
 800857e:	b2db      	uxtb	r3, r3
 8008580:	f063 030e 	orn	r3, r3, #14
 8008584:	b2da      	uxtb	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	490a      	ldr	r1, [pc, #40]	; (80085bc <I2C_MasterRequestRead+0x18c>)
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 f865 	bl	8008662 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d007      	beq.n	80085ae <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	d101      	bne.n	80085aa <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e002      	b.n	80085b0 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e000      	b.n	80085b0 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	00010008 	.word	0x00010008
 80085bc:	00010002 	.word	0x00010002

080085c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	603b      	str	r3, [r7, #0]
 80085cc:	4613      	mov	r3, r2
 80085ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80085d0:	e01f      	b.n	8008612 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d8:	d01b      	beq.n	8008612 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d007      	beq.n	80085f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80085e0:	f7fe fbca 	bl	8006d78 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	683a      	ldr	r2, [r7, #0]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d210      	bcs.n	8008612 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2220      	movs	r2, #32
 80085fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e023      	b.n	800865a <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	0c1b      	lsrs	r3, r3, #16
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b01      	cmp	r3, #1
 800861a:	d10d      	bne.n	8008638 <I2C_WaitOnFlagUntilTimeout+0x78>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	43da      	mvns	r2, r3
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	4013      	ands	r3, r2
 8008628:	b29b      	uxth	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	bf0c      	ite	eq
 800862e:	2301      	moveq	r3, #1
 8008630:	2300      	movne	r3, #0
 8008632:	b2db      	uxtb	r3, r3
 8008634:	461a      	mov	r2, r3
 8008636:	e00c      	b.n	8008652 <I2C_WaitOnFlagUntilTimeout+0x92>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	43da      	mvns	r2, r3
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	4013      	ands	r3, r2
 8008644:	b29b      	uxth	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	bf0c      	ite	eq
 800864a:	2301      	moveq	r3, #1
 800864c:	2300      	movne	r3, #0
 800864e:	b2db      	uxtb	r3, r3
 8008650:	461a      	mov	r2, r3
 8008652:	79fb      	ldrb	r3, [r7, #7]
 8008654:	429a      	cmp	r2, r3
 8008656:	d0bc      	beq.n	80085d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	607a      	str	r2, [r7, #4]
 800866e:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008670:	e040      	b.n	80086f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	695b      	ldr	r3, [r3, #20]
 8008678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800867c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008680:	d11c      	bne.n	80086bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008690:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800869a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2204      	movs	r2, #4
 80086a0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2220      	movs	r2, #32
 80086ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e03c      	b.n	8008736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c2:	d017      	beq.n	80086f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d007      	beq.n	80086da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80086ca:	f7fe fb55 	bl	8006d78 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d20c      	bcs.n	80086f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2220      	movs	r2, #32
 80086e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e020      	b.n	8008736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	0c1b      	lsrs	r3, r3, #16
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d10c      	bne.n	8008718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	43da      	mvns	r2, r3
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	4013      	ands	r3, r2
 800870a:	b29b      	uxth	r3, r3
 800870c:	2b00      	cmp	r3, #0
 800870e:	bf14      	ite	ne
 8008710:	2301      	movne	r3, #1
 8008712:	2300      	moveq	r3, #0
 8008714:	b2db      	uxtb	r3, r3
 8008716:	e00b      	b.n	8008730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	43da      	mvns	r2, r3
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	4013      	ands	r3, r2
 8008724:	b29b      	uxth	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	bf14      	ite	ne
 800872a:	2301      	movne	r3, #1
 800872c:	2300      	moveq	r3, #0
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b00      	cmp	r3, #0
 8008732:	d19e      	bne.n	8008672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800874a:	e029      	b.n	80087a0 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 f8ba 	bl	80088c6 <I2C_IsAcknowledgeFailed>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e029      	b.n	80087b0 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008762:	d01d      	beq.n	80087a0 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d007      	beq.n	800877a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800876a:	f7fe fb05 	bl	8006d78 <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	429a      	cmp	r2, r3
 8008778:	d212      	bcs.n	80087a0 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877e:	f043 0220 	orr.w	r2, r3, #32
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2220      	movs	r2, #32
 8008790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e007      	b.n	80087b0 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087aa:	2b80      	cmp	r3, #128	; 0x80
 80087ac:	d1ce      	bne.n	800874c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80087c4:	e029      	b.n	800881a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f000 f87d 	bl	80088c6 <I2C_IsAcknowledgeFailed>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e029      	b.n	800882a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087dc:	d01d      	beq.n	800881a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d007      	beq.n	80087f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80087e4:	f7fe fac8 	bl	8006d78 <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d212      	bcs.n	800881a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f8:	f043 0220 	orr.w	r2, r3, #32
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2220      	movs	r2, #32
 800880a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e007      	b.n	800882a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	f003 0304 	and.w	r3, r3, #4
 8008824:	2b04      	cmp	r3, #4
 8008826:	d1ce      	bne.n	80087c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	60b9      	str	r1, [r7, #8]
 800883c:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800883e:	e036      	b.n	80088ae <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	f003 0310 	and.w	r3, r3, #16
 800884a:	2b10      	cmp	r3, #16
 800884c:	d114      	bne.n	8008878 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f06f 0210 	mvn.w	r2, #16
 8008856:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2220      	movs	r2, #32
 8008868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e022      	b.n	80088be <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d007      	beq.n	800888e <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800887e:	f7fe fa7b 	bl	8006d78 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	429a      	cmp	r2, r3
 800888c:	d20f      	bcs.n	80088ae <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008892:	f043 0220 	orr.w	r2, r3, #32
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2220      	movs	r2, #32
 800889e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e007      	b.n	80088be <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	695b      	ldr	r3, [r3, #20]
 80088b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b8:	2b40      	cmp	r3, #64	; 0x40
 80088ba:	d1c1      	bne.n	8008840 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b083      	sub	sp, #12
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	695b      	ldr	r3, [r3, #20]
 80088d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088dc:	d114      	bne.n	8008908 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088e6:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2204      	movs	r2, #4
 80088ec:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2220      	movs	r2, #32
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e000      	b.n	800890a <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
	...

08008918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08e      	sub	sp, #56	; 0x38
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 uint32_t tickstart = 0U;  
 8008920:	2300      	movs	r3, #0
 8008922:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d050      	beq.n	80089d2 <HAL_RCC_OscConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008930:	4ba5      	ldr	r3, [pc, #660]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f003 030c 	and.w	r3, r3, #12
 8008938:	2b04      	cmp	r3, #4
 800893a:	d00c      	beq.n	8008956 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800893c:	4ba2      	ldr	r3, [pc, #648]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008944:	2b08      	cmp	r3, #8
 8008946:	d112      	bne.n	800896e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008948:	4b9f      	ldr	r3, [pc, #636]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008954:	d10b      	bne.n	800896e <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008956:	4b9c      	ldr	r3, [pc, #624]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d036      	beq.n	80089d0 <HAL_RCC_OscConfig+0xb8>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d132      	bne.n	80089d0 <HAL_RCC_OscConfig+0xb8>
      {
        return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e1e0      	b.n	8008d30 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	4b96      	ldr	r3, [pc, #600]	; (8008bcc <HAL_RCC_OscConfig+0x2b4>)
 8008974:	b2d2      	uxtb	r2, r2
 8008976:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d013      	beq.n	80089a8 <HAL_RCC_OscConfig+0x90>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008980:	f7fe f9fa 	bl	8006d78 <HAL_GetTick>
 8008984:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008986:	e008      	b.n	800899a <HAL_RCC_OscConfig+0x82>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008988:	f7fe f9f6 	bl	8006d78 <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	2b64      	cmp	r3, #100	; 0x64
 8008994:	d901      	bls.n	800899a <HAL_RCC_OscConfig+0x82>
          {
            return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e1ca      	b.n	8008d30 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800899a:	4b8b      	ldr	r3, [pc, #556]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d0f0      	beq.n	8008988 <HAL_RCC_OscConfig+0x70>
 80089a6:	e014      	b.n	80089d2 <HAL_RCC_OscConfig+0xba>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a8:	f7fe f9e6 	bl	8006d78 <HAL_GetTick>
 80089ac:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089ae:	e008      	b.n	80089c2 <HAL_RCC_OscConfig+0xaa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089b0:	f7fe f9e2 	bl	8006d78 <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	2b64      	cmp	r3, #100	; 0x64
 80089bc:	d901      	bls.n	80089c2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e1b6      	b.n	8008d30 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089c2:	4b81      	ldr	r3, [pc, #516]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1f0      	bne.n	80089b0 <HAL_RCC_OscConfig+0x98>
 80089ce:	e000      	b.n	80089d2 <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0302 	and.w	r3, r3, #2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d077      	beq.n	8008ace <HAL_RCC_OscConfig+0x1b6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80089de:	4b7a      	ldr	r3, [pc, #488]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	f003 030c 	and.w	r3, r3, #12
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00b      	beq.n	8008a02 <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80089ea:	4b77      	ldr	r3, [pc, #476]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80089f2:	2b08      	cmp	r3, #8
 80089f4:	d126      	bne.n	8008a44 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80089f6:	4b74      	ldr	r3, [pc, #464]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d120      	bne.n	8008a44 <HAL_RCC_OscConfig+0x12c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a02:	4b71      	ldr	r3, [pc, #452]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d005      	beq.n	8008a1a <HAL_RCC_OscConfig+0x102>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d001      	beq.n	8008a1a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e18a      	b.n	8008d30 <HAL_RCC_OscConfig+0x418>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a1a:	4b6b      	ldr	r3, [pc, #428]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6919      	ldr	r1, [r3, #16]
 8008a26:	23f8      	movs	r3, #248	; 0xf8
 8008a28:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	fa93 f3a3 	rbit	r3, r3
 8008a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8008a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a34:	fab3 f383 	clz	r3, r3
 8008a38:	fa01 f303 	lsl.w	r3, r1, r3
 8008a3c:	4962      	ldr	r1, [pc, #392]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a42:	e044      	b.n	8008ace <HAL_RCC_OscConfig+0x1b6>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d02a      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x18a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a4c:	4b60      	ldr	r3, [pc, #384]	; (8008bd0 <HAL_RCC_OscConfig+0x2b8>)
 8008a4e:	2201      	movs	r2, #1
 8008a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a52:	f7fe f991 	bl	8006d78 <HAL_GetTick>
 8008a56:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a58:	e008      	b.n	8008a6c <HAL_RCC_OscConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a5a:	f7fe f98d 	bl	8006d78 <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d901      	bls.n	8008a6c <HAL_RCC_OscConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e161      	b.n	8008d30 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a6c:	4b56      	ldr	r3, [pc, #344]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d0f0      	beq.n	8008a5a <HAL_RCC_OscConfig+0x142>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a78:	4b53      	ldr	r3, [pc, #332]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6919      	ldr	r1, [r3, #16]
 8008a84:	23f8      	movs	r3, #248	; 0xf8
 8008a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	fa93 f3a3 	rbit	r3, r3
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	fab3 f383 	clz	r3, r3
 8008a96:	fa01 f303 	lsl.w	r3, r1, r3
 8008a9a:	494b      	ldr	r1, [pc, #300]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	600b      	str	r3, [r1, #0]
 8008aa0:	e015      	b.n	8008ace <HAL_RCC_OscConfig+0x1b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008aa2:	4b4b      	ldr	r3, [pc, #300]	; (8008bd0 <HAL_RCC_OscConfig+0x2b8>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa8:	f7fe f966 	bl	8006d78 <HAL_GetTick>
 8008aac:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008aae:	e008      	b.n	8008ac2 <HAL_RCC_OscConfig+0x1aa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ab0:	f7fe f962 	bl	8006d78 <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d901      	bls.n	8008ac2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e136      	b.n	8008d30 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ac2:	4b41      	ldr	r3, [pc, #260]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1f0      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x198>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0308 	and.w	r3, r3, #8
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d030      	beq.n	8008b3c <HAL_RCC_OscConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d016      	beq.n	8008b10 <HAL_RCC_OscConfig+0x1f8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ae2:	4b3c      	ldr	r3, [pc, #240]	; (8008bd4 <HAL_RCC_OscConfig+0x2bc>)
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ae8:	f7fe f946 	bl	8006d78 <HAL_GetTick>
 8008aec:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008aee:	e008      	b.n	8008b02 <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008af0:	f7fe f942 	bl	8006d78 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d901      	bls.n	8008b02 <HAL_RCC_OscConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e116      	b.n	8008d30 <HAL_RCC_OscConfig+0x418>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b02:	4b31      	ldr	r3, [pc, #196]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 8008b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b06:	f003 0302 	and.w	r3, r3, #2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d0f0      	beq.n	8008af0 <HAL_RCC_OscConfig+0x1d8>
 8008b0e:	e015      	b.n	8008b3c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b10:	4b30      	ldr	r3, [pc, #192]	; (8008bd4 <HAL_RCC_OscConfig+0x2bc>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b16:	f7fe f92f 	bl	8006d78 <HAL_GetTick>
 8008b1a:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b1c:	e008      	b.n	8008b30 <HAL_RCC_OscConfig+0x218>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b1e:	f7fe f92b 	bl	8006d78 <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d901      	bls.n	8008b30 <HAL_RCC_OscConfig+0x218>
        {
          return HAL_TIMEOUT;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e0ff      	b.n	8008d30 <HAL_RCC_OscConfig+0x418>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b30:	4b25      	ldr	r3, [pc, #148]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 8008b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1f0      	bne.n	8008b1e <HAL_RCC_OscConfig+0x206>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 0304 	and.w	r3, r3, #4
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d067      	beq.n	8008c18 <HAL_RCC_OscConfig+0x300>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008b48:	2300      	movs	r3, #0
 8008b4a:	60bb      	str	r3, [r7, #8]
 8008b4c:	4b1e      	ldr	r3, [pc, #120]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 8008b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b50:	4a1d      	ldr	r2, [pc, #116]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 8008b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b56:	6413      	str	r3, [r2, #64]	; 0x40
 8008b58:	4b1b      	ldr	r3, [pc, #108]	; (8008bc8 <HAL_RCC_OscConfig+0x2b0>)
 8008b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b60:	60bb      	str	r3, [r7, #8]
 8008b62:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008b64:	4b1c      	ldr	r3, [pc, #112]	; (8008bd8 <HAL_RCC_OscConfig+0x2c0>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a1b      	ldr	r2, [pc, #108]	; (8008bd8 <HAL_RCC_OscConfig+0x2c0>)
 8008b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b6e:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8008b70:	f7fe f902 	bl	8006d78 <HAL_GetTick>
 8008b74:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008b76:	e008      	b.n	8008b8a <HAL_RCC_OscConfig+0x272>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008b78:	f7fe f8fe 	bl	8006d78 <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d901      	bls.n	8008b8a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e0d2      	b.n	8008d30 <HAL_RCC_OscConfig+0x418>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008b8a:	4b13      	ldr	r3, [pc, #76]	; (8008bd8 <HAL_RCC_OscConfig+0x2c0>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d0f0      	beq.n	8008b78 <HAL_RCC_OscConfig+0x260>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	689a      	ldr	r2, [r3, #8]
 8008b9a:	4b10      	ldr	r3, [pc, #64]	; (8008bdc <HAL_RCC_OscConfig+0x2c4>)
 8008b9c:	b2d2      	uxtb	r2, r2
 8008b9e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d022      	beq.n	8008bee <HAL_RCC_OscConfig+0x2d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ba8:	f7fe f8e6 	bl	8006d78 <HAL_GetTick>
 8008bac:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bae:	e017      	b.n	8008be0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bb0:	f7fe f8e2 	bl	8006d78 <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d90e      	bls.n	8008be0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e0b4      	b.n	8008d30 <HAL_RCC_OscConfig+0x418>
 8008bc6:	bf00      	nop
 8008bc8:	40023800 	.word	0x40023800
 8008bcc:	40023802 	.word	0x40023802
 8008bd0:	42470000 	.word	0x42470000
 8008bd4:	42470e80 	.word	0x42470e80
 8008bd8:	40007000 	.word	0x40007000
 8008bdc:	40023870 	.word	0x40023870
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008be0:	4b55      	ldr	r3, [pc, #340]	; (8008d38 <HAL_RCC_OscConfig+0x420>)
 8008be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be4:	f003 0302 	and.w	r3, r3, #2
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d0e1      	beq.n	8008bb0 <HAL_RCC_OscConfig+0x298>
 8008bec:	e014      	b.n	8008c18 <HAL_RCC_OscConfig+0x300>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bee:	f7fe f8c3 	bl	8006d78 <HAL_GetTick>
 8008bf2:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008bf4:	e00a      	b.n	8008c0c <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bf6:	f7fe f8bf 	bl	8006d78 <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d901      	bls.n	8008c0c <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e091      	b.n	8008d30 <HAL_RCC_OscConfig+0x418>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c0c:	4b4a      	ldr	r3, [pc, #296]	; (8008d38 <HAL_RCC_OscConfig+0x420>)
 8008c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c10:	f003 0302 	and.w	r3, r3, #2
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1ee      	bne.n	8008bf6 <HAL_RCC_OscConfig+0x2de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 8086 	beq.w	8008d2e <HAL_RCC_OscConfig+0x416>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c22:	4b45      	ldr	r3, [pc, #276]	; (8008d38 <HAL_RCC_OscConfig+0x420>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f003 030c 	and.w	r3, r3, #12
 8008c2a:	2b08      	cmp	r3, #8
 8008c2c:	d07d      	beq.n	8008d2a <HAL_RCC_OscConfig+0x412>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d162      	bne.n	8008cfc <HAL_RCC_OscConfig+0x3e4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c36:	4b41      	ldr	r3, [pc, #260]	; (8008d3c <HAL_RCC_OscConfig+0x424>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c3c:	f7fe f89c 	bl	8006d78 <HAL_GetTick>
 8008c40:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c42:	e008      	b.n	8008c56 <HAL_RCC_OscConfig+0x33e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c44:	f7fe f898 	bl	8006d78 <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d901      	bls.n	8008c56 <HAL_RCC_OscConfig+0x33e>
          {
            return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e06c      	b.n	8008d30 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c56:	4b38      	ldr	r3, [pc, #224]	; (8008d38 <HAL_RCC_OscConfig+0x420>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1f0      	bne.n	8008c44 <HAL_RCC_OscConfig+0x32c>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	69da      	ldr	r2, [r3, #28]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008c70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	fa93 f3a3 	rbit	r3, r3
 8008c7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	fab3 f383 	clz	r3, r3
 8008c84:	fa01 f303 	lsl.w	r3, r1, r3
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8e:	085b      	lsrs	r3, r3, #1
 8008c90:	1e59      	subs	r1, r3, #1
 8008c92:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8008c96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	fa93 f3a3 	rbit	r3, r3
 8008c9e:	617b      	str	r3, [r7, #20]
  return(result);
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	fab3 f383 	clz	r3, r3
 8008ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8008caa:	431a      	orrs	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008cb0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8008cb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	fa93 f3a3 	rbit	r3, r3
 8008cbc:	61fb      	str	r3, [r7, #28]
  return(result);
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	fab3 f383 	clz	r3, r3
 8008cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cc8:	491b      	ldr	r1, [pc, #108]	; (8008d38 <HAL_RCC_OscConfig+0x420>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cce:	4b1b      	ldr	r3, [pc, #108]	; (8008d3c <HAL_RCC_OscConfig+0x424>)
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cd4:	f7fe f850 	bl	8006d78 <HAL_GetTick>
 8008cd8:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cda:	e008      	b.n	8008cee <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cdc:	f7fe f84c 	bl	8006d78 <HAL_GetTick>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d901      	bls.n	8008cee <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	e020      	b.n	8008d30 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cee:	4b12      	ldr	r3, [pc, #72]	; (8008d38 <HAL_RCC_OscConfig+0x420>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d0f0      	beq.n	8008cdc <HAL_RCC_OscConfig+0x3c4>
 8008cfa:	e018      	b.n	8008d2e <HAL_RCC_OscConfig+0x416>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cfc:	4b0f      	ldr	r3, [pc, #60]	; (8008d3c <HAL_RCC_OscConfig+0x424>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d02:	f7fe f839 	bl	8006d78 <HAL_GetTick>
 8008d06:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d08:	e008      	b.n	8008d1c <HAL_RCC_OscConfig+0x404>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d0a:	f7fe f835 	bl	8006d78 <HAL_GetTick>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d901      	bls.n	8008d1c <HAL_RCC_OscConfig+0x404>
          {
            return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e009      	b.n	8008d30 <HAL_RCC_OscConfig+0x418>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d1c:	4b06      	ldr	r3, [pc, #24]	; (8008d38 <HAL_RCC_OscConfig+0x420>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1f0      	bne.n	8008d0a <HAL_RCC_OscConfig+0x3f2>
 8008d28:	e001      	b.n	8008d2e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e000      	b.n	8008d30 <HAL_RCC_OscConfig+0x418>
    }
  }
  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3738      	adds	r7, #56	; 0x38
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	40023800 	.word	0x40023800
 8008d3c:	42470060 	.word	0x42470060

08008d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8008d4e:	4b81      	ldr	r3, [pc, #516]	; (8008f54 <HAL_RCC_ClockConfig+0x214>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 030f 	and.w	r3, r3, #15
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d90c      	bls.n	8008d76 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d5c:	4b7d      	ldr	r3, [pc, #500]	; (8008f54 <HAL_RCC_ClockConfig+0x214>)
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	b2d2      	uxtb	r2, r2
 8008d62:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008d64:	4b7b      	ldr	r3, [pc, #492]	; (8008f54 <HAL_RCC_ClockConfig+0x214>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 030f 	and.w	r3, r3, #15
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d001      	beq.n	8008d76 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e0ea      	b.n	8008f4c <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0302 	and.w	r3, r3, #2
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d008      	beq.n	8008d94 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d82:	4b75      	ldr	r3, [pc, #468]	; (8008f58 <HAL_RCC_ClockConfig+0x218>)
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	4972      	ldr	r1, [pc, #456]	; (8008f58 <HAL_RCC_ClockConfig+0x218>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 8086 	beq.w	8008eae <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d107      	bne.n	8008dba <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008daa:	4b6b      	ldr	r3, [pc, #428]	; (8008f58 <HAL_RCC_ClockConfig+0x218>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d119      	bne.n	8008dea <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e0c8      	b.n	8008f4c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d003      	beq.n	8008dca <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d107      	bne.n	8008dda <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dca:	4b63      	ldr	r3, [pc, #396]	; (8008f58 <HAL_RCC_ClockConfig+0x218>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d109      	bne.n	8008dea <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e0b8      	b.n	8008f4c <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dda:	4b5f      	ldr	r3, [pc, #380]	; (8008f58 <HAL_RCC_ClockConfig+0x218>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0302 	and.w	r3, r3, #2
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e0b0      	b.n	8008f4c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008dea:	4b5b      	ldr	r3, [pc, #364]	; (8008f58 <HAL_RCC_ClockConfig+0x218>)
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f023 0203 	bic.w	r2, r3, #3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	4958      	ldr	r1, [pc, #352]	; (8008f58 <HAL_RCC_ClockConfig+0x218>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dfc:	f7fd ffbc 	bl	8006d78 <HAL_GetTick>
 8008e00:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d112      	bne.n	8008e30 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008e0a:	e00a      	b.n	8008e22 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e0c:	f7fd ffb4 	bl	8006d78 <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e094      	b.n	8008f4c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008e22:	4b4d      	ldr	r3, [pc, #308]	; (8008f58 <HAL_RCC_ClockConfig+0x218>)
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f003 030c 	and.w	r3, r3, #12
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	d1ee      	bne.n	8008e0c <HAL_RCC_ClockConfig+0xcc>
 8008e2e:	e03e      	b.n	8008eae <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d112      	bne.n	8008e5e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e38:	e00a      	b.n	8008e50 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e3a:	f7fd ff9d 	bl	8006d78 <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d901      	bls.n	8008e50 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e07d      	b.n	8008f4c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e50:	4b41      	ldr	r3, [pc, #260]	; (8008f58 <HAL_RCC_ClockConfig+0x218>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f003 030c 	and.w	r3, r3, #12
 8008e58:	2b08      	cmp	r3, #8
 8008e5a:	d1ee      	bne.n	8008e3a <HAL_RCC_ClockConfig+0xfa>
 8008e5c:	e027      	b.n	8008eae <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	2b03      	cmp	r3, #3
 8008e64:	d11d      	bne.n	8008ea2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8008e66:	e00a      	b.n	8008e7e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e68:	f7fd ff86 	bl	8006d78 <HAL_GetTick>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d901      	bls.n	8008e7e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	e066      	b.n	8008f4c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8008e7e:	4b36      	ldr	r3, [pc, #216]	; (8008f58 <HAL_RCC_ClockConfig+0x218>)
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f003 030c 	and.w	r3, r3, #12
 8008e86:	2b0c      	cmp	r3, #12
 8008e88:	d1ee      	bne.n	8008e68 <HAL_RCC_ClockConfig+0x128>
 8008e8a:	e010      	b.n	8008eae <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e8c:	f7fd ff74 	bl	8006d78 <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d901      	bls.n	8008ea2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e054      	b.n	8008f4c <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008ea2:	4b2d      	ldr	r3, [pc, #180]	; (8008f58 <HAL_RCC_ClockConfig+0x218>)
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f003 030c 	and.w	r3, r3, #12
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1ee      	bne.n	8008e8c <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8008eae:	4b29      	ldr	r3, [pc, #164]	; (8008f54 <HAL_RCC_ClockConfig+0x214>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 030f 	and.w	r3, r3, #15
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d20c      	bcs.n	8008ed6 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ebc:	4b25      	ldr	r3, [pc, #148]	; (8008f54 <HAL_RCC_ClockConfig+0x214>)
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	b2d2      	uxtb	r2, r2
 8008ec2:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008ec4:	4b23      	ldr	r3, [pc, #140]	; (8008f54 <HAL_RCC_ClockConfig+0x214>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 030f 	and.w	r3, r3, #15
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d001      	beq.n	8008ed6 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e03a      	b.n	8008f4c <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0304 	and.w	r3, r3, #4
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d008      	beq.n	8008ef4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ee2:	4b1d      	ldr	r3, [pc, #116]	; (8008f58 <HAL_RCC_ClockConfig+0x218>)
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	491a      	ldr	r1, [pc, #104]	; (8008f58 <HAL_RCC_ClockConfig+0x218>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0308 	and.w	r3, r3, #8
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d009      	beq.n	8008f14 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f00:	4b15      	ldr	r3, [pc, #84]	; (8008f58 <HAL_RCC_ClockConfig+0x218>)
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	00db      	lsls	r3, r3, #3
 8008f0e:	4912      	ldr	r1, [pc, #72]	; (8008f58 <HAL_RCC_ClockConfig+0x218>)
 8008f10:	4313      	orrs	r3, r2
 8008f12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8008f14:	f000 f826 	bl	8008f64 <HAL_RCC_GetSysClockFreq>
 8008f18:	4601      	mov	r1, r0
 8008f1a:	4b0f      	ldr	r3, [pc, #60]	; (8008f58 <HAL_RCC_ClockConfig+0x218>)
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008f22:	23f0      	movs	r3, #240	; 0xf0
 8008f24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	fa93 f3a3 	rbit	r3, r3
 8008f2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	fab3 f383 	clz	r3, r3
 8008f34:	fa22 f303 	lsr.w	r3, r2, r3
 8008f38:	4a08      	ldr	r2, [pc, #32]	; (8008f5c <HAL_RCC_ClockConfig+0x21c>)
 8008f3a:	5cd3      	ldrb	r3, [r2, r3]
 8008f3c:	fa21 f303 	lsr.w	r3, r1, r3
 8008f40:	4a07      	ldr	r2, [pc, #28]	; (8008f60 <HAL_RCC_ClockConfig+0x220>)
 8008f42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008f44:	200f      	movs	r0, #15
 8008f46:	f7fd feed 	bl	8006d24 <HAL_InitTick>
  
  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	40023c00 	.word	0x40023c00
 8008f58:	40023800 	.word	0x40023800
 8008f5c:	0800be40 	.word	0x0800be40
 8008f60:	20000450 	.word	0x20000450

08008f64 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b08b      	sub	sp, #44	; 0x2c
 8008f68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	61fb      	str	r3, [r7, #28]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	627b      	str	r3, [r7, #36]	; 0x24
 8008f72:	2300      	movs	r3, #0
 8008f74:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f7a:	4b36      	ldr	r3, [pc, #216]	; (8009054 <HAL_RCC_GetSysClockFreq+0xf0>)
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	f003 030c 	and.w	r3, r3, #12
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	d006      	beq.n	8008f94 <HAL_RCC_GetSysClockFreq+0x30>
 8008f86:	2b08      	cmp	r3, #8
 8008f88:	d007      	beq.n	8008f9a <HAL_RCC_GetSysClockFreq+0x36>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d158      	bne.n	8009040 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008f8e:	4b32      	ldr	r3, [pc, #200]	; (8009058 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008f90:	623b      	str	r3, [r7, #32]
       break;
 8008f92:	e058      	b.n	8009046 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008f94:	4b31      	ldr	r3, [pc, #196]	; (800905c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008f96:	623b      	str	r3, [r7, #32]
      break;
 8008f98:	e055      	b.n	8009046 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008f9a:	4b2e      	ldr	r3, [pc, #184]	; (8009054 <HAL_RCC_GetSysClockFreq+0xf0>)
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fa2:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008fa4:	4b2b      	ldr	r3, [pc, #172]	; (8009054 <HAL_RCC_GetSysClockFreq+0xf0>)
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d017      	beq.n	8008fe0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8008fb0:	4a2a      	ldr	r2, [pc, #168]	; (800905c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fb8:	4b26      	ldr	r3, [pc, #152]	; (8009054 <HAL_RCC_GetSysClockFreq+0xf0>)
 8008fba:	6859      	ldr	r1, [r3, #4]
 8008fbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008fc0:	400b      	ands	r3, r1
 8008fc2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8008fc6:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fc8:	6979      	ldr	r1, [r7, #20]
 8008fca:	fa91 f1a1 	rbit	r1, r1
 8008fce:	6139      	str	r1, [r7, #16]
  return(result);
 8008fd0:	6939      	ldr	r1, [r7, #16]
 8008fd2:	fab1 f181 	clz	r1, r1
 8008fd6:	40cb      	lsrs	r3, r1
 8008fd8:	fb03 f302 	mul.w	r3, r3, r2
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8008fde:	e016      	b.n	800900e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8008fe0:	4a1d      	ldr	r2, [pc, #116]	; (8009058 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fe8:	4b1a      	ldr	r3, [pc, #104]	; (8009054 <HAL_RCC_GetSysClockFreq+0xf0>)
 8008fea:	6859      	ldr	r1, [r3, #4]
 8008fec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008ff0:	400b      	ands	r3, r1
 8008ff2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8008ff6:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ff8:	68f9      	ldr	r1, [r7, #12]
 8008ffa:	fa91 f1a1 	rbit	r1, r1
 8008ffe:	60b9      	str	r1, [r7, #8]
  return(result);
 8009000:	68b9      	ldr	r1, [r7, #8]
 8009002:	fab1 f181 	clz	r1, r1
 8009006:	40cb      	lsrs	r3, r1
 8009008:	fb03 f302 	mul.w	r3, r3, r2
 800900c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800900e:	4b11      	ldr	r3, [pc, #68]	; (8009054 <HAL_RCC_GetSysClockFreq+0xf0>)
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009016:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800901a:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	fa93 f3a3 	rbit	r3, r3
 8009022:	603b      	str	r3, [r7, #0]
  return(result);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	fab3 f383 	clz	r3, r3
 800902a:	fa22 f303 	lsr.w	r3, r2, r3
 800902e:	3301      	adds	r3, #1
 8009030:	005b      	lsls	r3, r3, #1
 8009032:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8009034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	fbb2 f3f3 	udiv	r3, r2, r3
 800903c:	623b      	str	r3, [r7, #32]
      break;
 800903e:	e002      	b.n	8009046 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009040:	4b05      	ldr	r3, [pc, #20]	; (8009058 <HAL_RCC_GetSysClockFreq+0xf4>)
 8009042:	623b      	str	r3, [r7, #32]
      break;
 8009044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009046:	6a3b      	ldr	r3, [r7, #32]
}
 8009048:	4618      	mov	r0, r3
 800904a:	372c      	adds	r7, #44	; 0x2c
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	40023800 	.word	0x40023800
 8009058:	00f42400 	.word	0x00f42400
 800905c:	017d7840 	.word	0x017d7840

08009060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009060:	b480      	push	{r7}
 8009062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009064:	4b03      	ldr	r3, [pc, #12]	; (8009074 <HAL_RCC_GetHCLKFreq+0x14>)
 8009066:	681b      	ldr	r3, [r3, #0]
}
 8009068:	4618      	mov	r0, r3
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	20000450 	.word	0x20000450

08009078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800907e:	f7ff ffef 	bl	8009060 <HAL_RCC_GetHCLKFreq>
 8009082:	4601      	mov	r1, r0
 8009084:	4b0b      	ldr	r3, [pc, #44]	; (80090b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800908c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009090:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	fa93 f3a3 	rbit	r3, r3
 8009098:	603b      	str	r3, [r7, #0]
  return(result);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	fab3 f383 	clz	r3, r3
 80090a0:	fa22 f303 	lsr.w	r3, r2, r3
 80090a4:	4a04      	ldr	r2, [pc, #16]	; (80090b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80090a6:	5cd3      	ldrb	r3, [r2, r3]
 80090a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	40023800 	.word	0x40023800
 80090b8:	0800be40 	.word	0x0800be40

080090bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80090c2:	f7ff ffcd 	bl	8009060 <HAL_RCC_GetHCLKFreq>
 80090c6:	4601      	mov	r1, r0
 80090c8:	4b0b      	ldr	r3, [pc, #44]	; (80090f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 80090d0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80090d4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	fa93 f3a3 	rbit	r3, r3
 80090dc:	603b      	str	r3, [r7, #0]
  return(result);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	fab3 f383 	clz	r3, r3
 80090e4:	fa22 f303 	lsr.w	r3, r2, r3
 80090e8:	4a04      	ldr	r2, [pc, #16]	; (80090fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80090ea:	5cd3      	ldrb	r3, [r2, r3]
 80090ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80090f0:	4618      	mov	r0, r3
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	40023800 	.word	0x40023800
 80090fc:	0800be40 	.word	0x0800be40

08009100 <HAL_TIM_Base_Start>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2202      	movs	r2, #2
 800910c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f042 0201 	orr.w	r2, r2, #1
 800911e:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <HAL_TIM_OC_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e01d      	b.n	8009184 <HAL_TIM_OC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 
  if(htim->State == HAL_TIM_STATE_RESET)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b00      	cmp	r3, #0
 8009152:	d106      	bne.n	8009162 <HAL_TIM_OC_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7f7 fbd7 	bl	8000910 <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2202      	movs	r2, #2
 8009166:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	3304      	adds	r3, #4
 8009172:	4619      	mov	r1, r3
 8009174:	4610      	mov	r0, r2
 8009176:	f000 f869 	bl	800924c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d101      	bne.n	80091a6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80091a2:	2302      	movs	r3, #2
 80091a4:	e04e      	b.n	8009244 <HAL_TIM_OC_ConfigChannel+0xb8>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2202      	movs	r2, #2
 80091b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  switch (Channel)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2b0c      	cmp	r3, #12
 80091ba:	d839      	bhi.n	8009230 <HAL_TIM_OC_ConfigChannel+0xa4>
 80091bc:	a201      	add	r2, pc, #4	; (adr r2, 80091c4 <HAL_TIM_OC_ConfigChannel+0x38>)
 80091be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c2:	bf00      	nop
 80091c4:	080091f9 	.word	0x080091f9
 80091c8:	08009231 	.word	0x08009231
 80091cc:	08009231 	.word	0x08009231
 80091d0:	08009231 	.word	0x08009231
 80091d4:	08009207 	.word	0x08009207
 80091d8:	08009231 	.word	0x08009231
 80091dc:	08009231 	.word	0x08009231
 80091e0:	08009231 	.word	0x08009231
 80091e4:	08009215 	.word	0x08009215
 80091e8:	08009231 	.word	0x08009231
 80091ec:	08009231 	.word	0x08009231
 80091f0:	08009231 	.word	0x08009231
 80091f4:	08009223 	.word	0x08009223
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68b9      	ldr	r1, [r7, #8]
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 f916 	bl	8009430 <TIM_OC1_SetConfig>
    }
    break;
 8009204:	e015      	b.n	8009232 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68b9      	ldr	r1, [r7, #8]
 800920c:	4618      	mov	r0, r3
 800920e:	f000 f8a1 	bl	8009354 <TIM_OC2_SetConfig>
    }
    break;
 8009212:	e00e      	b.n	8009232 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68b9      	ldr	r1, [r7, #8]
 800921a:	4618      	mov	r0, r3
 800921c:	f000 f970 	bl	8009500 <TIM_OC3_SetConfig>
    }
    break;
 8009220:	e007      	b.n	8009232 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68b9      	ldr	r1, [r7, #8]
 8009228:	4618      	mov	r0, r3
 800922a:	f000 f9d5 	bl	80095d8 <TIM_OC4_SetConfig>
    }
    break;
 800922e:	e000      	b.n	8009232 <HAL_TIM_OC_ConfigChannel+0xa6>
    
    default:
    break;    
 8009230:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim); 
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8009256:	2300      	movs	r3, #0
 8009258:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a35      	ldr	r2, [pc, #212]	; (8009338 <TIM_Base_SetConfig+0xec>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d00f      	beq.n	8009288 <TIM_Base_SetConfig+0x3c>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800926e:	d00b      	beq.n	8009288 <TIM_Base_SetConfig+0x3c>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a32      	ldr	r2, [pc, #200]	; (800933c <TIM_Base_SetConfig+0xf0>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d007      	beq.n	8009288 <TIM_Base_SetConfig+0x3c>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a31      	ldr	r2, [pc, #196]	; (8009340 <TIM_Base_SetConfig+0xf4>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d003      	beq.n	8009288 <TIM_Base_SetConfig+0x3c>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a30      	ldr	r2, [pc, #192]	; (8009344 <TIM_Base_SetConfig+0xf8>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d101      	bne.n	800928c <TIM_Base_SetConfig+0x40>
 8009288:	2301      	movs	r3, #1
 800928a:	e000      	b.n	800928e <TIM_Base_SetConfig+0x42>
 800928c:	2300      	movs	r3, #0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d008      	beq.n	80092a4 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a24      	ldr	r2, [pc, #144]	; (8009338 <TIM_Base_SetConfig+0xec>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d01b      	beq.n	80092e4 <TIM_Base_SetConfig+0x98>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092b2:	d017      	beq.n	80092e4 <TIM_Base_SetConfig+0x98>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a21      	ldr	r2, [pc, #132]	; (800933c <TIM_Base_SetConfig+0xf0>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d013      	beq.n	80092e4 <TIM_Base_SetConfig+0x98>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a20      	ldr	r2, [pc, #128]	; (8009340 <TIM_Base_SetConfig+0xf4>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d00f      	beq.n	80092e4 <TIM_Base_SetConfig+0x98>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a1f      	ldr	r2, [pc, #124]	; (8009344 <TIM_Base_SetConfig+0xf8>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d00b      	beq.n	80092e4 <TIM_Base_SetConfig+0x98>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a1e      	ldr	r2, [pc, #120]	; (8009348 <TIM_Base_SetConfig+0xfc>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d007      	beq.n	80092e4 <TIM_Base_SetConfig+0x98>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a1d      	ldr	r2, [pc, #116]	; (800934c <TIM_Base_SetConfig+0x100>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d003      	beq.n	80092e4 <TIM_Base_SetConfig+0x98>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a1c      	ldr	r2, [pc, #112]	; (8009350 <TIM_Base_SetConfig+0x104>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d101      	bne.n	80092e8 <TIM_Base_SetConfig+0x9c>
 80092e4:	2301      	movs	r3, #1
 80092e6:	e000      	b.n	80092ea <TIM_Base_SetConfig+0x9e>
 80092e8:	2300      	movs	r3, #0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d008      	beq.n	8009300 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	689a      	ldr	r2, [r3, #8]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a07      	ldr	r2, [pc, #28]	; (8009338 <TIM_Base_SetConfig+0xec>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d103      	bne.n	8009326 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	691a      	ldr	r2, [r3, #16]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	615a      	str	r2, [r3, #20]
}
 800932c:	bf00      	nop
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr
 8009338:	40010000 	.word	0x40010000
 800933c:	40000400 	.word	0x40000400
 8009340:	40000800 	.word	0x40000800
 8009344:	40000c00 	.word	0x40000c00
 8009348:	40014000 	.word	0x40014000
 800934c:	40014400 	.word	0x40014400
 8009350:	40014800 	.word	0x40014800

08009354 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009354:	b480      	push	{r7}
 8009356:	b087      	sub	sp, #28
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800935e:	2300      	movs	r3, #0
 8009360:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8009362:	2300      	movs	r3, #0
 8009364:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8009366:	2300      	movs	r3, #0
 8009368:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	f023 0210 	bic.w	r2, r3, #16
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800938e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009396:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	021b      	lsls	r3, r3, #8
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	f023 0320 	bic.w	r3, r3, #32
 80093aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	011b      	lsls	r3, r3, #4
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a1c      	ldr	r2, [pc, #112]	; (800942c <TIM_OC2_SetConfig+0xd8>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d121      	bne.n	8009404 <TIM_OC2_SetConfig+0xb0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	011b      	lsls	r3, r3, #4
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093da:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	693a      	ldr	r2, [r7, #16]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	4313      	orrs	r3, r2
 8009402:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	693a      	ldr	r2, [r7, #16]
 8009408:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	621a      	str	r2, [r3, #32]
}
 800941e:	bf00      	nop
 8009420:	371c      	adds	r7, #28
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	40010000 	.word	0x40010000

08009430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009430:	b480      	push	{r7}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800943a:	2300      	movs	r3, #0
 800943c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8009442:	2300      	movs	r3, #0
 8009444:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	f023 0201 	bic.w	r2, r3, #1
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800946a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f023 0303 	bic.w	r3, r3, #3
 8009472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	4313      	orrs	r3, r2
 800947c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f023 0302 	bic.w	r3, r3, #2
 8009484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	4313      	orrs	r3, r2
 800948e:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a1a      	ldr	r2, [pc, #104]	; (80094fc <TIM_OC1_SetConfig+0xcc>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d11e      	bne.n	80094d6 <TIM_OC1_SetConfig+0xa6>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	f023 0308 	bic.w	r3, r3, #8
 800949e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	697a      	ldr	r2, [r7, #20]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	f023 0304 	bic.w	r3, r3, #4
 80094b0:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	697a      	ldr	r2, [r7, #20]
 80094ee:	621a      	str	r2, [r3, #32]
} 
 80094f0:	bf00      	nop
 80094f2:	371c      	adds	r7, #28
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	40010000 	.word	0x40010000

08009500 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800950e:	2300      	movs	r3, #0
 8009510:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8009512:	2300      	movs	r3, #0
 8009514:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	69db      	ldr	r3, [r3, #28]
 8009532:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800953a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f023 0303 	bic.w	r3, r3, #3
 8009542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	4313      	orrs	r3, r2
 800954c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	021b      	lsls	r3, r3, #8
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	4313      	orrs	r3, r2
 8009560:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a1b      	ldr	r2, [pc, #108]	; (80095d4 <TIM_OC3_SetConfig+0xd4>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d121      	bne.n	80095ae <TIM_OC3_SetConfig+0xae>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	021b      	lsls	r3, r3, #8
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	4313      	orrs	r3, r2
 800957c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009584:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800958c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	011b      	lsls	r3, r3, #4
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	4313      	orrs	r3, r2
 80095a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	011b      	lsls	r3, r3, #4
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	621a      	str	r2, [r3, #32]
}
 80095c8:	bf00      	nop
 80095ca:	371c      	adds	r7, #28
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	40010000 	.word	0x40010000

080095d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095d8:	b480      	push	{r7}
 80095da:	b087      	sub	sp, #28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80095e6:	2300      	movs	r3, #0
 80095e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80095ea:	2300      	movs	r3, #0
 80095ec:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a1b      	ldr	r3, [r3, #32]
 80095f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	69db      	ldr	r3, [r3, #28]
 800960a:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009612:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800961a:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	021b      	lsls	r3, r3, #8
 8009622:	693a      	ldr	r2, [r7, #16]
 8009624:	4313      	orrs	r3, r2
 8009626:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800962e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	031b      	lsls	r3, r3, #12
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	4313      	orrs	r3, r2
 800963a:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a10      	ldr	r2, [pc, #64]	; (8009680 <TIM_OC4_SetConfig+0xa8>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d109      	bne.n	8009658 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800964a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	019b      	lsls	r3, r3, #6
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	4313      	orrs	r3, r2
 8009656:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	621a      	str	r2, [r3, #32]
}
 8009672:	bf00      	nop
 8009674:	371c      	adds	r7, #28
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	40010000 	.word	0x40010000

08009684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009694:	2b01      	cmp	r3, #1
 8009696:	d101      	bne.n	800969c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009698:	2302      	movs	r3, #2
 800969a:	e032      	b.n	8009702 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2202      	movs	r2, #2
 80096a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	685a      	ldr	r2, [r3, #4]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80096ba:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6859      	ldr	r1, [r3, #4]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	430a      	orrs	r2, r1
 80096cc:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	689a      	ldr	r2, [r3, #8]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096dc:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6899      	ldr	r1, [r3, #8]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	685a      	ldr	r2, [r3, #4]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	430a      	orrs	r2, r1
 80096ee:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8009700:	2300      	movs	r3, #0
} 
 8009702:	4618      	mov	r0, r3
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b082      	sub	sp, #8
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e03f      	b.n	80097a0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b00      	cmp	r3, #0
 800972a:	d106      	bne.n	800973a <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7f7 fc71 	bl	800101c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2224      	movs	r2, #36	; 0x24
 800973e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68da      	ldr	r2, [r3, #12]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009750:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fb5e 	bl	8009e14 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	691a      	ldr	r2, [r3, #16]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009766:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	695a      	ldr	r2, [r3, #20]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009776:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68da      	ldr	r2, [r3, #12]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009786:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2220      	movs	r2, #32
 8009792:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2220      	movs	r2, #32
 800979a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	4613      	mov	r3, r2
 80097b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b20      	cmp	r3, #32
 80097c0:	d153      	bne.n	800986a <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL ) || (Size == 0U))
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d002      	beq.n	80097ce <HAL_UART_Transmit_DMA+0x26>
 80097c8:	88fb      	ldrh	r3, [r7, #6]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e04c      	b.n	800986c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d101      	bne.n	80097e0 <HAL_UART_Transmit_DMA+0x38>
 80097dc:	2302      	movs	r3, #2
 80097de:	e045      	b.n	800986c <HAL_UART_Transmit_DMA+0xc4>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	88fa      	ldrh	r2, [r7, #6]
 80097f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	88fa      	ldrh	r2, [r7, #6]
 80097f8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2221      	movs	r2, #33	; 0x21
 8009804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980c:	4a19      	ldr	r2, [pc, #100]	; (8009874 <HAL_UART_Transmit_DMA+0xcc>)
 800980e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009814:	4a18      	ldr	r2, [pc, #96]	; (8009878 <HAL_UART_Transmit_DMA+0xd0>)
 8009816:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981c:	4a17      	ldr	r2, [pc, #92]	; (800987c <HAL_UART_Transmit_DMA+0xd4>)
 800981e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009824:	2200      	movs	r2, #0
 8009826:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
 8009828:	f107 0308 	add.w	r3, r7, #8
 800982c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	6819      	ldr	r1, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3304      	adds	r3, #4
 800983c:	461a      	mov	r2, r3
 800983e:	88fb      	ldrh	r3, [r7, #6]
 8009840:	f7fd fc80 	bl	8007144 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800984c:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	695a      	ldr	r2, [r3, #20]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009864:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	e000      	b.n	800986c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800986a:	2302      	movs	r3, #2
  }
}
 800986c:	4618      	mov	r0, r3
 800986e:	3718      	adds	r7, #24
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	08009ab5 	.word	0x08009ab5
 8009878:	08009b07 	.word	0x08009b07
 800987c:	08009b23 	.word	0x08009b23

08009880 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b088      	sub	sp, #32
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80098a0:	2300      	movs	r3, #0
 80098a2:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80098a4:	2300      	movs	r3, #0
 80098a6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	f003 030f 	and.w	r3, r3, #15
 80098ae:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10d      	bne.n	80098d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	f003 0320 	and.w	r3, r3, #32
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d008      	beq.n	80098d2 <HAL_UART_IRQHandler+0x52>
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	f003 0320 	and.w	r3, r3, #32
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fa29 	bl	8009d22 <UART_Receive_IT>
      return;
 80098d0:	e0cc      	b.n	8009a6c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 80ab 	beq.w	8009a30 <HAL_UART_IRQHandler+0x1b0>
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	f003 0301 	and.w	r3, r3, #1
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d105      	bne.n	80098f0 <HAL_UART_IRQHandler+0x70>
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 80a0 	beq.w	8009a30 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	f003 0301 	and.w	r3, r3, #1
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00a      	beq.n	8009910 <HAL_UART_IRQHandler+0x90>
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009900:	2b00      	cmp	r3, #0
 8009902:	d005      	beq.n	8009910 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009908:	f043 0201 	orr.w	r2, r3, #1
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	f003 0304 	and.w	r3, r3, #4
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00a      	beq.n	8009930 <HAL_UART_IRQHandler+0xb0>
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	d005      	beq.n	8009930 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009928:	f043 0202 	orr.w	r2, r3, #2
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	f003 0302 	and.w	r3, r3, #2
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00a      	beq.n	8009950 <HAL_UART_IRQHandler+0xd0>
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	2b00      	cmp	r3, #0
 8009942:	d005      	beq.n	8009950 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009948:	f043 0204 	orr.w	r2, r3, #4
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	f003 0308 	and.w	r3, r3, #8
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00a      	beq.n	8009970 <HAL_UART_IRQHandler+0xf0>
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	2b00      	cmp	r3, #0
 8009962:	d005      	beq.n	8009970 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009968:	f043 0208 	orr.w	r2, r3, #8
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009974:	2b00      	cmp	r3, #0
 8009976:	d078      	beq.n	8009a6a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	f003 0320 	and.w	r3, r3, #32
 800997e:	2b00      	cmp	r3, #0
 8009980:	d007      	beq.n	8009992 <HAL_UART_IRQHandler+0x112>
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	f003 0320 	and.w	r3, r3, #32
 8009988:	2b00      	cmp	r3, #0
 800998a:	d002      	beq.n	8009992 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f9c8 	bl	8009d22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800999c:	2b00      	cmp	r3, #0
 800999e:	bf14      	ite	ne
 80099a0:	2301      	movne	r3, #1
 80099a2:	2300      	moveq	r3, #0
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ac:	f003 0308 	and.w	r3, r3, #8
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d102      	bne.n	80099ba <HAL_UART_IRQHandler+0x13a>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d031      	beq.n	8009a1e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f911 	bl	8009be2 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d023      	beq.n	8009a16 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	695a      	ldr	r2, [r3, #20]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099dc:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d013      	beq.n	8009a0e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ea:	4a22      	ldr	r2, [pc, #136]	; (8009a74 <HAL_UART_IRQHandler+0x1f4>)
 80099ec:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fd fc06 	bl	8007204 <HAL_DMA_Abort_IT>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d016      	beq.n	8009a2c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009a08:	4610      	mov	r0, r2
 8009a0a:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a0c:	e00e      	b.n	8009a2c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f846 	bl	8009aa0 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a14:	e00a      	b.n	8009a2c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f842 	bl	8009aa0 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a1c:	e006      	b.n	8009a2c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f83e 	bl	8009aa0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009a2a:	e01e      	b.n	8009a6a <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a2c:	bf00      	nop
    return;
 8009a2e:	e01c      	b.n	8009a6a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d008      	beq.n	8009a4c <HAL_UART_IRQHandler+0x1cc>
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d003      	beq.n	8009a4c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f8fe 	bl	8009c46 <UART_Transmit_IT>
    return;
 8009a4a:	e00f      	b.n	8009a6c <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00a      	beq.n	8009a6c <HAL_UART_IRQHandler+0x1ec>
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d005      	beq.n	8009a6c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f946 	bl	8009cf2 <UART_EndTransmit_IT>
    return;
 8009a66:	bf00      	nop
 8009a68:	e000      	b.n	8009a6c <HAL_UART_IRQHandler+0x1ec>
    return;
 8009a6a:	bf00      	nop
  }
}
 8009a6c:	3720      	adds	r7, #32
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	08009c1f 	.word	0x08009c1f

08009a78 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d113      	bne.n	8009af8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	695a      	ldr	r2, [r3, #20]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ae4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68da      	ldr	r2, [r3, #12]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009af4:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 8009af6:	e002      	b.n	8009afe <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f7f7 f9d9 	bl	8000eb0 <HAL_UART_TxCpltCallback>
}
 8009afe:	bf00      	nop
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b084      	sub	sp, #16
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b12:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f7ff ffaf 	bl	8009a78 <HAL_UART_TxHalfCpltCallback>
}
 8009b1a:	bf00      	nop
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b084      	sub	sp, #16
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b32:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	bf14      	ite	ne
 8009b42:	2301      	movne	r3, #1
 8009b44:	2300      	moveq	r3, #0
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b21      	cmp	r3, #33	; 0x21
 8009b54:	d108      	bne.n	8009b68 <UART_DMAError+0x46>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d005      	beq.n	8009b68 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009b62:	68b8      	ldr	r0, [r7, #8]
 8009b64:	f000 f827 	bl	8009bb6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	bf14      	ite	ne
 8009b76:	2301      	movne	r3, #1
 8009b78:	2300      	moveq	r3, #0
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b22      	cmp	r3, #34	; 0x22
 8009b88:	d108      	bne.n	8009b9c <UART_DMAError+0x7a>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d005      	beq.n	8009b9c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	2200      	movs	r2, #0
 8009b94:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009b96:	68b8      	ldr	r0, [r7, #8]
 8009b98:	f000 f823 	bl	8009be2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba0:	f043 0210 	orr.w	r2, r3, #16
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8009ba8:	68b8      	ldr	r0, [r7, #8]
 8009baa:	f7ff ff79 	bl	8009aa0 <HAL_UART_ErrorCallback>
}
 8009bae:	bf00      	nop
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b083      	sub	sp, #12
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68da      	ldr	r2, [r3, #12]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009bcc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2220      	movs	r2, #32
 8009bd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8009bd6:	bf00      	nop
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr

08009be2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009be2:	b480      	push	{r7}
 8009be4:	b083      	sub	sp, #12
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68da      	ldr	r2, [r3, #12]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009bf8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	695a      	ldr	r2, [r3, #20]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f022 0201 	bic.w	r2, r2, #1
 8009c08:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2220      	movs	r2, #32
 8009c0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009c12:	bf00      	nop
 8009c14:	370c      	adds	r7, #12
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr

08009c1e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f7ff ff31 	bl	8009aa0 <HAL_UART_ErrorCallback>
}
 8009c3e:	bf00      	nop
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009c46:	b480      	push	{r7}
 8009c48:	b085      	sub	sp, #20
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	2b21      	cmp	r3, #33	; 0x21
 8009c58:	d144      	bne.n	8009ce4 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c62:	d11a      	bne.n	8009c9a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a1b      	ldr	r3, [r3, #32]
 8009c68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c78:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d105      	bne.n	8009c8e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	1c9a      	adds	r2, r3, #2
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	621a      	str	r2, [r3, #32]
 8009c8c:	e00e      	b.n	8009cac <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	1c5a      	adds	r2, r3, #1
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	621a      	str	r2, [r3, #32]
 8009c98:	e008      	b.n	8009cac <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a1b      	ldr	r3, [r3, #32]
 8009c9e:	1c59      	adds	r1, r3, #1
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	6211      	str	r1, [r2, #32]
 8009ca4:	781a      	ldrb	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10f      	bne.n	8009ce0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68da      	ldr	r2, [r3, #12]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009cce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68da      	ldr	r2, [r3, #12]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cde:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	e000      	b.n	8009ce6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009ce4:	2302      	movs	r3, #2
  }
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b082      	sub	sp, #8
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68da      	ldr	r2, [r3, #12]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d08:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7f7 f8cc 	bl	8000eb0 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	2b22      	cmp	r3, #34	; 0x22
 8009d34:	d169      	bne.n	8009e0a <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d3e:	d123      	bne.n	8009d88 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d44:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10e      	bne.n	8009d6c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d64:	1c9a      	adds	r2, r3, #2
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	629a      	str	r2, [r3, #40]	; 0x28
 8009d6a:	e029      	b.n	8009dc0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d80:	1c5a      	adds	r2, r3, #1
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	629a      	str	r2, [r3, #40]	; 0x28
 8009d86:	e01b      	b.n	8009dc0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10a      	bne.n	8009da6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6858      	ldr	r0, [r3, #4]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9a:	1c59      	adds	r1, r3, #1
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	6291      	str	r1, [r2, #40]	; 0x28
 8009da0:	b2c2      	uxtb	r2, r0
 8009da2:	701a      	strb	r2, [r3, #0]
 8009da4:	e00c      	b.n	8009dc0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db2:	1c58      	adds	r0, r3, #1
 8009db4:	6879      	ldr	r1, [r7, #4]
 8009db6:	6288      	str	r0, [r1, #40]	; 0x28
 8009db8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009dbc:	b2d2      	uxtb	r2, r2
 8009dbe:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d118      	bne.n	8009e06 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68da      	ldr	r2, [r3, #12]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009de2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	695a      	ldr	r2, [r3, #20]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f022 0201 	bic.w	r2, r2, #1
 8009df2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2220      	movs	r2, #32
 8009df8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f7ff fe45 	bl	8009a8c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8009e02:	2300      	movs	r3, #0
 8009e04:	e002      	b.n	8009e0c <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8009e06:	2300      	movs	r3, #0
 8009e08:	e000      	b.n	8009e0c <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009e0a:	2302      	movs	r3, #2
  }
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e14:	b5b0      	push	{r4, r5, r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009e2e:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009e50:	f023 030c 	bic.w	r3, r3, #12
 8009e54:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	689a      	ldr	r2, [r3, #8]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	431a      	orrs	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	431a      	orrs	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	69db      	ldr	r3, [r3, #28]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e88:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	69db      	ldr	r3, [r3, #28]
 8009ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ea4:	f040 80e4 	bne.w	800a070 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4aab      	ldr	r2, [pc, #684]	; (800a15c <UART_SetConfig+0x348>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d004      	beq.n	8009ebc <UART_SetConfig+0xa8>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4aaa      	ldr	r2, [pc, #680]	; (800a160 <UART_SetConfig+0x34c>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d16c      	bne.n	8009f96 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009ebc:	f7ff f8fe 	bl	80090bc <HAL_RCC_GetPCLK2Freq>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	009a      	lsls	r2, r3, #2
 8009eca:	441a      	add	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	005b      	lsls	r3, r3, #1
 8009ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed6:	4aa3      	ldr	r2, [pc, #652]	; (800a164 <UART_SetConfig+0x350>)
 8009ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8009edc:	095b      	lsrs	r3, r3, #5
 8009ede:	011c      	lsls	r4, r3, #4
 8009ee0:	f7ff f8ec 	bl	80090bc <HAL_RCC_GetPCLK2Freq>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4413      	add	r3, r2
 8009eec:	009a      	lsls	r2, r3, #2
 8009eee:	441a      	add	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	fbb2 f5f3 	udiv	r5, r2, r3
 8009efa:	f7ff f8df 	bl	80090bc <HAL_RCC_GetPCLK2Freq>
 8009efe:	4602      	mov	r2, r0
 8009f00:	4613      	mov	r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4413      	add	r3, r2
 8009f06:	009a      	lsls	r2, r3, #2
 8009f08:	441a      	add	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	005b      	lsls	r3, r3, #1
 8009f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f14:	4a93      	ldr	r2, [pc, #588]	; (800a164 <UART_SetConfig+0x350>)
 8009f16:	fba2 2303 	umull	r2, r3, r2, r3
 8009f1a:	095b      	lsrs	r3, r3, #5
 8009f1c:	2264      	movs	r2, #100	; 0x64
 8009f1e:	fb02 f303 	mul.w	r3, r2, r3
 8009f22:	1aeb      	subs	r3, r5, r3
 8009f24:	00db      	lsls	r3, r3, #3
 8009f26:	3332      	adds	r3, #50	; 0x32
 8009f28:	4a8e      	ldr	r2, [pc, #568]	; (800a164 <UART_SetConfig+0x350>)
 8009f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2e:	095b      	lsrs	r3, r3, #5
 8009f30:	005b      	lsls	r3, r3, #1
 8009f32:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f36:	441c      	add	r4, r3
 8009f38:	f7ff f8c0 	bl	80090bc <HAL_RCC_GetPCLK2Freq>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	4613      	mov	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4413      	add	r3, r2
 8009f44:	009a      	lsls	r2, r3, #2
 8009f46:	441a      	add	r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	005b      	lsls	r3, r3, #1
 8009f4e:	fbb2 f5f3 	udiv	r5, r2, r3
 8009f52:	f7ff f8b3 	bl	80090bc <HAL_RCC_GetPCLK2Freq>
 8009f56:	4602      	mov	r2, r0
 8009f58:	4613      	mov	r3, r2
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	4413      	add	r3, r2
 8009f5e:	009a      	lsls	r2, r3, #2
 8009f60:	441a      	add	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	005b      	lsls	r3, r3, #1
 8009f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f6c:	4a7d      	ldr	r2, [pc, #500]	; (800a164 <UART_SetConfig+0x350>)
 8009f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f72:	095b      	lsrs	r3, r3, #5
 8009f74:	2264      	movs	r2, #100	; 0x64
 8009f76:	fb02 f303 	mul.w	r3, r2, r3
 8009f7a:	1aeb      	subs	r3, r5, r3
 8009f7c:	00db      	lsls	r3, r3, #3
 8009f7e:	3332      	adds	r3, #50	; 0x32
 8009f80:	4a78      	ldr	r2, [pc, #480]	; (800a164 <UART_SetConfig+0x350>)
 8009f82:	fba2 2303 	umull	r2, r3, r2, r3
 8009f86:	095b      	lsrs	r3, r3, #5
 8009f88:	f003 0207 	and.w	r2, r3, #7
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4422      	add	r2, r4
 8009f92:	609a      	str	r2, [r3, #8]
 8009f94:	e154      	b.n	800a240 <UART_SetConfig+0x42c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009f96:	f7ff f86f 	bl	8009078 <HAL_RCC_GetPCLK1Freq>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	009a      	lsls	r2, r3, #2
 8009fa4:	441a      	add	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	005b      	lsls	r3, r3, #1
 8009fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fb0:	4a6c      	ldr	r2, [pc, #432]	; (800a164 <UART_SetConfig+0x350>)
 8009fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb6:	095b      	lsrs	r3, r3, #5
 8009fb8:	011c      	lsls	r4, r3, #4
 8009fba:	f7ff f85d 	bl	8009078 <HAL_RCC_GetPCLK1Freq>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	4413      	add	r3, r2
 8009fc6:	009a      	lsls	r2, r3, #2
 8009fc8:	441a      	add	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	005b      	lsls	r3, r3, #1
 8009fd0:	fbb2 f5f3 	udiv	r5, r2, r3
 8009fd4:	f7ff f850 	bl	8009078 <HAL_RCC_GetPCLK1Freq>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	4613      	mov	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	009a      	lsls	r2, r3, #2
 8009fe2:	441a      	add	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	005b      	lsls	r3, r3, #1
 8009fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fee:	4a5d      	ldr	r2, [pc, #372]	; (800a164 <UART_SetConfig+0x350>)
 8009ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ff4:	095b      	lsrs	r3, r3, #5
 8009ff6:	2264      	movs	r2, #100	; 0x64
 8009ff8:	fb02 f303 	mul.w	r3, r2, r3
 8009ffc:	1aeb      	subs	r3, r5, r3
 8009ffe:	00db      	lsls	r3, r3, #3
 800a000:	3332      	adds	r3, #50	; 0x32
 800a002:	4a58      	ldr	r2, [pc, #352]	; (800a164 <UART_SetConfig+0x350>)
 800a004:	fba2 2303 	umull	r2, r3, r2, r3
 800a008:	095b      	lsrs	r3, r3, #5
 800a00a:	005b      	lsls	r3, r3, #1
 800a00c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a010:	441c      	add	r4, r3
 800a012:	f7ff f831 	bl	8009078 <HAL_RCC_GetPCLK1Freq>
 800a016:	4602      	mov	r2, r0
 800a018:	4613      	mov	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	009a      	lsls	r2, r3, #2
 800a020:	441a      	add	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	005b      	lsls	r3, r3, #1
 800a028:	fbb2 f5f3 	udiv	r5, r2, r3
 800a02c:	f7ff f824 	bl	8009078 <HAL_RCC_GetPCLK1Freq>
 800a030:	4602      	mov	r2, r0
 800a032:	4613      	mov	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	009a      	lsls	r2, r3, #2
 800a03a:	441a      	add	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	005b      	lsls	r3, r3, #1
 800a042:	fbb2 f3f3 	udiv	r3, r2, r3
 800a046:	4a47      	ldr	r2, [pc, #284]	; (800a164 <UART_SetConfig+0x350>)
 800a048:	fba2 2303 	umull	r2, r3, r2, r3
 800a04c:	095b      	lsrs	r3, r3, #5
 800a04e:	2264      	movs	r2, #100	; 0x64
 800a050:	fb02 f303 	mul.w	r3, r2, r3
 800a054:	1aeb      	subs	r3, r5, r3
 800a056:	00db      	lsls	r3, r3, #3
 800a058:	3332      	adds	r3, #50	; 0x32
 800a05a:	4a42      	ldr	r2, [pc, #264]	; (800a164 <UART_SetConfig+0x350>)
 800a05c:	fba2 2303 	umull	r2, r3, r2, r3
 800a060:	095b      	lsrs	r3, r3, #5
 800a062:	f003 0207 	and.w	r2, r3, #7
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4422      	add	r2, r4
 800a06c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800a06e:	e0e7      	b.n	800a240 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a39      	ldr	r2, [pc, #228]	; (800a15c <UART_SetConfig+0x348>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d004      	beq.n	800a084 <UART_SetConfig+0x270>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a38      	ldr	r2, [pc, #224]	; (800a160 <UART_SetConfig+0x34c>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d171      	bne.n	800a168 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800a084:	f7ff f81a 	bl	80090bc <HAL_RCC_GetPCLK2Freq>
 800a088:	4602      	mov	r2, r0
 800a08a:	4613      	mov	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4413      	add	r3, r2
 800a090:	009a      	lsls	r2, r3, #2
 800a092:	441a      	add	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a09e:	4a31      	ldr	r2, [pc, #196]	; (800a164 <UART_SetConfig+0x350>)
 800a0a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a4:	095b      	lsrs	r3, r3, #5
 800a0a6:	011c      	lsls	r4, r3, #4
 800a0a8:	f7ff f808 	bl	80090bc <HAL_RCC_GetPCLK2Freq>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	009a      	lsls	r2, r3, #2
 800a0b6:	441a      	add	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	fbb2 f5f3 	udiv	r5, r2, r3
 800a0c2:	f7fe fffb 	bl	80090bc <HAL_RCC_GetPCLK2Freq>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4413      	add	r3, r2
 800a0ce:	009a      	lsls	r2, r3, #2
 800a0d0:	441a      	add	r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0dc:	4a21      	ldr	r2, [pc, #132]	; (800a164 <UART_SetConfig+0x350>)
 800a0de:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e2:	095b      	lsrs	r3, r3, #5
 800a0e4:	2264      	movs	r2, #100	; 0x64
 800a0e6:	fb02 f303 	mul.w	r3, r2, r3
 800a0ea:	1aeb      	subs	r3, r5, r3
 800a0ec:	011b      	lsls	r3, r3, #4
 800a0ee:	3332      	adds	r3, #50	; 0x32
 800a0f0:	4a1c      	ldr	r2, [pc, #112]	; (800a164 <UART_SetConfig+0x350>)
 800a0f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f6:	095b      	lsrs	r3, r3, #5
 800a0f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0fc:	441c      	add	r4, r3
 800a0fe:	f7fe ffdd 	bl	80090bc <HAL_RCC_GetPCLK2Freq>
 800a102:	4602      	mov	r2, r0
 800a104:	4613      	mov	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	009a      	lsls	r2, r3, #2
 800a10c:	441a      	add	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	fbb2 f5f3 	udiv	r5, r2, r3
 800a118:	f7fe ffd0 	bl	80090bc <HAL_RCC_GetPCLK2Freq>
 800a11c:	4602      	mov	r2, r0
 800a11e:	4613      	mov	r3, r2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	4413      	add	r3, r2
 800a124:	009a      	lsls	r2, r3, #2
 800a126:	441a      	add	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a132:	4a0c      	ldr	r2, [pc, #48]	; (800a164 <UART_SetConfig+0x350>)
 800a134:	fba2 2303 	umull	r2, r3, r2, r3
 800a138:	095b      	lsrs	r3, r3, #5
 800a13a:	2264      	movs	r2, #100	; 0x64
 800a13c:	fb02 f303 	mul.w	r3, r2, r3
 800a140:	1aeb      	subs	r3, r5, r3
 800a142:	011b      	lsls	r3, r3, #4
 800a144:	3332      	adds	r3, #50	; 0x32
 800a146:	4a07      	ldr	r2, [pc, #28]	; (800a164 <UART_SetConfig+0x350>)
 800a148:	fba2 2303 	umull	r2, r3, r2, r3
 800a14c:	095b      	lsrs	r3, r3, #5
 800a14e:	f003 020f 	and.w	r2, r3, #15
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4422      	add	r2, r4
 800a158:	609a      	str	r2, [r3, #8]
 800a15a:	e071      	b.n	800a240 <UART_SetConfig+0x42c>
 800a15c:	40011000 	.word	0x40011000
 800a160:	40011400 	.word	0x40011400
 800a164:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800a168:	f7fe ff86 	bl	8009078 <HAL_RCC_GetPCLK1Freq>
 800a16c:	4602      	mov	r2, r0
 800a16e:	4613      	mov	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	009a      	lsls	r2, r3, #2
 800a176:	441a      	add	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a182:	4a31      	ldr	r2, [pc, #196]	; (800a248 <UART_SetConfig+0x434>)
 800a184:	fba2 2303 	umull	r2, r3, r2, r3
 800a188:	095b      	lsrs	r3, r3, #5
 800a18a:	011c      	lsls	r4, r3, #4
 800a18c:	f7fe ff74 	bl	8009078 <HAL_RCC_GetPCLK1Freq>
 800a190:	4602      	mov	r2, r0
 800a192:	4613      	mov	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	009a      	lsls	r2, r3, #2
 800a19a:	441a      	add	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	fbb2 f5f3 	udiv	r5, r2, r3
 800a1a6:	f7fe ff67 	bl	8009078 <HAL_RCC_GetPCLK1Freq>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4413      	add	r3, r2
 800a1b2:	009a      	lsls	r2, r3, #2
 800a1b4:	441a      	add	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c0:	4a21      	ldr	r2, [pc, #132]	; (800a248 <UART_SetConfig+0x434>)
 800a1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1c6:	095b      	lsrs	r3, r3, #5
 800a1c8:	2264      	movs	r2, #100	; 0x64
 800a1ca:	fb02 f303 	mul.w	r3, r2, r3
 800a1ce:	1aeb      	subs	r3, r5, r3
 800a1d0:	011b      	lsls	r3, r3, #4
 800a1d2:	3332      	adds	r3, #50	; 0x32
 800a1d4:	4a1c      	ldr	r2, [pc, #112]	; (800a248 <UART_SetConfig+0x434>)
 800a1d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1da:	095b      	lsrs	r3, r3, #5
 800a1dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1e0:	441c      	add	r4, r3
 800a1e2:	f7fe ff49 	bl	8009078 <HAL_RCC_GetPCLK1Freq>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	009a      	lsls	r2, r3, #2
 800a1f0:	441a      	add	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	fbb2 f5f3 	udiv	r5, r2, r3
 800a1fc:	f7fe ff3c 	bl	8009078 <HAL_RCC_GetPCLK1Freq>
 800a200:	4602      	mov	r2, r0
 800a202:	4613      	mov	r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	4413      	add	r3, r2
 800a208:	009a      	lsls	r2, r3, #2
 800a20a:	441a      	add	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	fbb2 f3f3 	udiv	r3, r2, r3
 800a216:	4a0c      	ldr	r2, [pc, #48]	; (800a248 <UART_SetConfig+0x434>)
 800a218:	fba2 2303 	umull	r2, r3, r2, r3
 800a21c:	095b      	lsrs	r3, r3, #5
 800a21e:	2264      	movs	r2, #100	; 0x64
 800a220:	fb02 f303 	mul.w	r3, r2, r3
 800a224:	1aeb      	subs	r3, r5, r3
 800a226:	011b      	lsls	r3, r3, #4
 800a228:	3332      	adds	r3, #50	; 0x32
 800a22a:	4a07      	ldr	r2, [pc, #28]	; (800a248 <UART_SetConfig+0x434>)
 800a22c:	fba2 2303 	umull	r2, r3, r2, r3
 800a230:	095b      	lsrs	r3, r3, #5
 800a232:	f003 020f 	and.w	r2, r3, #15
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4422      	add	r2, r4
 800a23c:	609a      	str	r2, [r3, #8]
}
 800a23e:	e7ff      	b.n	800a240 <UART_SetConfig+0x42c>
 800a240:	bf00      	nop
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bdb0      	pop	{r4, r5, r7, pc}
 800a248:	51eb851f 	.word	0x51eb851f

0800a24c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a254:	4b11      	ldr	r3, [pc, #68]	; (800a29c <_sbrk+0x50>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d102      	bne.n	800a262 <_sbrk+0x16>
		heap_end = &end;
 800a25c:	4b0f      	ldr	r3, [pc, #60]	; (800a29c <_sbrk+0x50>)
 800a25e:	4a10      	ldr	r2, [pc, #64]	; (800a2a0 <_sbrk+0x54>)
 800a260:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a262:	4b0e      	ldr	r3, [pc, #56]	; (800a29c <_sbrk+0x50>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a268:	4b0c      	ldr	r3, [pc, #48]	; (800a29c <_sbrk+0x50>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4413      	add	r3, r2
 800a270:	466a      	mov	r2, sp
 800a272:	4293      	cmp	r3, r2
 800a274:	d907      	bls.n	800a286 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a276:	f000 f815 	bl	800a2a4 <__errno>
 800a27a:	4602      	mov	r2, r0
 800a27c:	230c      	movs	r3, #12
 800a27e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a280:	f04f 33ff 	mov.w	r3, #4294967295
 800a284:	e006      	b.n	800a294 <_sbrk+0x48>
	}

	heap_end += incr;
 800a286:	4b05      	ldr	r3, [pc, #20]	; (800a29c <_sbrk+0x50>)
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4413      	add	r3, r2
 800a28e:	4a03      	ldr	r2, [pc, #12]	; (800a29c <_sbrk+0x50>)
 800a290:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a292:	68fb      	ldr	r3, [r7, #12]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	200005ec 	.word	0x200005ec
 800a2a0:	200007a8 	.word	0x200007a8

0800a2a4 <__errno>:
 800a2a4:	4b01      	ldr	r3, [pc, #4]	; (800a2ac <__errno+0x8>)
 800a2a6:	6818      	ldr	r0, [r3, #0]
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	20000454 	.word	0x20000454

0800a2b0 <__libc_init_array>:
 800a2b0:	b570      	push	{r4, r5, r6, lr}
 800a2b2:	4e0d      	ldr	r6, [pc, #52]	; (800a2e8 <__libc_init_array+0x38>)
 800a2b4:	4c0d      	ldr	r4, [pc, #52]	; (800a2ec <__libc_init_array+0x3c>)
 800a2b6:	1ba4      	subs	r4, r4, r6
 800a2b8:	10a4      	asrs	r4, r4, #2
 800a2ba:	2500      	movs	r5, #0
 800a2bc:	42a5      	cmp	r5, r4
 800a2be:	d109      	bne.n	800a2d4 <__libc_init_array+0x24>
 800a2c0:	4e0b      	ldr	r6, [pc, #44]	; (800a2f0 <__libc_init_array+0x40>)
 800a2c2:	4c0c      	ldr	r4, [pc, #48]	; (800a2f4 <__libc_init_array+0x44>)
 800a2c4:	f000 fc6a 	bl	800ab9c <_init>
 800a2c8:	1ba4      	subs	r4, r4, r6
 800a2ca:	10a4      	asrs	r4, r4, #2
 800a2cc:	2500      	movs	r5, #0
 800a2ce:	42a5      	cmp	r5, r4
 800a2d0:	d105      	bne.n	800a2de <__libc_init_array+0x2e>
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}
 800a2d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2d8:	4798      	blx	r3
 800a2da:	3501      	adds	r5, #1
 800a2dc:	e7ee      	b.n	800a2bc <__libc_init_array+0xc>
 800a2de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2e2:	4798      	blx	r3
 800a2e4:	3501      	adds	r5, #1
 800a2e6:	e7f2      	b.n	800a2ce <__libc_init_array+0x1e>
 800a2e8:	0800be84 	.word	0x0800be84
 800a2ec:	0800be84 	.word	0x0800be84
 800a2f0:	0800be84 	.word	0x0800be84
 800a2f4:	0800be88 	.word	0x0800be88

0800a2f8 <memcpy>:
 800a2f8:	b510      	push	{r4, lr}
 800a2fa:	1e43      	subs	r3, r0, #1
 800a2fc:	440a      	add	r2, r1
 800a2fe:	4291      	cmp	r1, r2
 800a300:	d100      	bne.n	800a304 <memcpy+0xc>
 800a302:	bd10      	pop	{r4, pc}
 800a304:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a308:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a30c:	e7f7      	b.n	800a2fe <memcpy+0x6>

0800a30e <memset>:
 800a30e:	4402      	add	r2, r0
 800a310:	4603      	mov	r3, r0
 800a312:	4293      	cmp	r3, r2
 800a314:	d100      	bne.n	800a318 <memset+0xa>
 800a316:	4770      	bx	lr
 800a318:	f803 1b01 	strb.w	r1, [r3], #1
 800a31c:	e7f9      	b.n	800a312 <memset+0x4>
	...

0800a320 <siprintf>:
 800a320:	b40e      	push	{r1, r2, r3}
 800a322:	b500      	push	{lr}
 800a324:	b09c      	sub	sp, #112	; 0x70
 800a326:	ab1d      	add	r3, sp, #116	; 0x74
 800a328:	9002      	str	r0, [sp, #8]
 800a32a:	9006      	str	r0, [sp, #24]
 800a32c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a330:	4809      	ldr	r0, [pc, #36]	; (800a358 <siprintf+0x38>)
 800a332:	9107      	str	r1, [sp, #28]
 800a334:	9104      	str	r1, [sp, #16]
 800a336:	4909      	ldr	r1, [pc, #36]	; (800a35c <siprintf+0x3c>)
 800a338:	f853 2b04 	ldr.w	r2, [r3], #4
 800a33c:	9105      	str	r1, [sp, #20]
 800a33e:	6800      	ldr	r0, [r0, #0]
 800a340:	9301      	str	r3, [sp, #4]
 800a342:	a902      	add	r1, sp, #8
 800a344:	f000 f8a8 	bl	800a498 <_svfiprintf_r>
 800a348:	9b02      	ldr	r3, [sp, #8]
 800a34a:	2200      	movs	r2, #0
 800a34c:	701a      	strb	r2, [r3, #0]
 800a34e:	b01c      	add	sp, #112	; 0x70
 800a350:	f85d eb04 	ldr.w	lr, [sp], #4
 800a354:	b003      	add	sp, #12
 800a356:	4770      	bx	lr
 800a358:	20000454 	.word	0x20000454
 800a35c:	ffff0208 	.word	0xffff0208

0800a360 <strcpy>:
 800a360:	4603      	mov	r3, r0
 800a362:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a366:	f803 2b01 	strb.w	r2, [r3], #1
 800a36a:	2a00      	cmp	r2, #0
 800a36c:	d1f9      	bne.n	800a362 <strcpy+0x2>
 800a36e:	4770      	bx	lr

0800a370 <_vsniprintf_r>:
 800a370:	b530      	push	{r4, r5, lr}
 800a372:	1e14      	subs	r4, r2, #0
 800a374:	4605      	mov	r5, r0
 800a376:	b09b      	sub	sp, #108	; 0x6c
 800a378:	4618      	mov	r0, r3
 800a37a:	da05      	bge.n	800a388 <_vsniprintf_r+0x18>
 800a37c:	238b      	movs	r3, #139	; 0x8b
 800a37e:	602b      	str	r3, [r5, #0]
 800a380:	f04f 30ff 	mov.w	r0, #4294967295
 800a384:	b01b      	add	sp, #108	; 0x6c
 800a386:	bd30      	pop	{r4, r5, pc}
 800a388:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a38c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a390:	bf14      	ite	ne
 800a392:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a396:	4623      	moveq	r3, r4
 800a398:	9302      	str	r3, [sp, #8]
 800a39a:	9305      	str	r3, [sp, #20]
 800a39c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3a0:	9100      	str	r1, [sp, #0]
 800a3a2:	9104      	str	r1, [sp, #16]
 800a3a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a3ac:	4669      	mov	r1, sp
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	f000 f872 	bl	800a498 <_svfiprintf_r>
 800a3b4:	1c43      	adds	r3, r0, #1
 800a3b6:	bfbc      	itt	lt
 800a3b8:	238b      	movlt	r3, #139	; 0x8b
 800a3ba:	602b      	strlt	r3, [r5, #0]
 800a3bc:	2c00      	cmp	r4, #0
 800a3be:	d0e1      	beq.n	800a384 <_vsniprintf_r+0x14>
 800a3c0:	9b00      	ldr	r3, [sp, #0]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	701a      	strb	r2, [r3, #0]
 800a3c6:	e7dd      	b.n	800a384 <_vsniprintf_r+0x14>

0800a3c8 <vsniprintf>:
 800a3c8:	b507      	push	{r0, r1, r2, lr}
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	460a      	mov	r2, r1
 800a3d0:	4601      	mov	r1, r0
 800a3d2:	4803      	ldr	r0, [pc, #12]	; (800a3e0 <vsniprintf+0x18>)
 800a3d4:	6800      	ldr	r0, [r0, #0]
 800a3d6:	f7ff ffcb 	bl	800a370 <_vsniprintf_r>
 800a3da:	b003      	add	sp, #12
 800a3dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3e0:	20000454 	.word	0x20000454

0800a3e4 <__ssputs_r>:
 800a3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e8:	688e      	ldr	r6, [r1, #8]
 800a3ea:	429e      	cmp	r6, r3
 800a3ec:	4682      	mov	sl, r0
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	4690      	mov	r8, r2
 800a3f2:	4699      	mov	r9, r3
 800a3f4:	d837      	bhi.n	800a466 <__ssputs_r+0x82>
 800a3f6:	898a      	ldrh	r2, [r1, #12]
 800a3f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3fc:	d031      	beq.n	800a462 <__ssputs_r+0x7e>
 800a3fe:	6825      	ldr	r5, [r4, #0]
 800a400:	6909      	ldr	r1, [r1, #16]
 800a402:	1a6f      	subs	r7, r5, r1
 800a404:	6965      	ldr	r5, [r4, #20]
 800a406:	2302      	movs	r3, #2
 800a408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a40c:	fb95 f5f3 	sdiv	r5, r5, r3
 800a410:	f109 0301 	add.w	r3, r9, #1
 800a414:	443b      	add	r3, r7
 800a416:	429d      	cmp	r5, r3
 800a418:	bf38      	it	cc
 800a41a:	461d      	movcc	r5, r3
 800a41c:	0553      	lsls	r3, r2, #21
 800a41e:	d530      	bpl.n	800a482 <__ssputs_r+0x9e>
 800a420:	4629      	mov	r1, r5
 800a422:	f000 fb21 	bl	800aa68 <_malloc_r>
 800a426:	4606      	mov	r6, r0
 800a428:	b950      	cbnz	r0, 800a440 <__ssputs_r+0x5c>
 800a42a:	230c      	movs	r3, #12
 800a42c:	f8ca 3000 	str.w	r3, [sl]
 800a430:	89a3      	ldrh	r3, [r4, #12]
 800a432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a436:	81a3      	strh	r3, [r4, #12]
 800a438:	f04f 30ff 	mov.w	r0, #4294967295
 800a43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a440:	463a      	mov	r2, r7
 800a442:	6921      	ldr	r1, [r4, #16]
 800a444:	f7ff ff58 	bl	800a2f8 <memcpy>
 800a448:	89a3      	ldrh	r3, [r4, #12]
 800a44a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a44e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a452:	81a3      	strh	r3, [r4, #12]
 800a454:	6126      	str	r6, [r4, #16]
 800a456:	6165      	str	r5, [r4, #20]
 800a458:	443e      	add	r6, r7
 800a45a:	1bed      	subs	r5, r5, r7
 800a45c:	6026      	str	r6, [r4, #0]
 800a45e:	60a5      	str	r5, [r4, #8]
 800a460:	464e      	mov	r6, r9
 800a462:	454e      	cmp	r6, r9
 800a464:	d900      	bls.n	800a468 <__ssputs_r+0x84>
 800a466:	464e      	mov	r6, r9
 800a468:	4632      	mov	r2, r6
 800a46a:	4641      	mov	r1, r8
 800a46c:	6820      	ldr	r0, [r4, #0]
 800a46e:	f000 fa93 	bl	800a998 <memmove>
 800a472:	68a3      	ldr	r3, [r4, #8]
 800a474:	1b9b      	subs	r3, r3, r6
 800a476:	60a3      	str	r3, [r4, #8]
 800a478:	6823      	ldr	r3, [r4, #0]
 800a47a:	441e      	add	r6, r3
 800a47c:	6026      	str	r6, [r4, #0]
 800a47e:	2000      	movs	r0, #0
 800a480:	e7dc      	b.n	800a43c <__ssputs_r+0x58>
 800a482:	462a      	mov	r2, r5
 800a484:	f000 fb4a 	bl	800ab1c <_realloc_r>
 800a488:	4606      	mov	r6, r0
 800a48a:	2800      	cmp	r0, #0
 800a48c:	d1e2      	bne.n	800a454 <__ssputs_r+0x70>
 800a48e:	6921      	ldr	r1, [r4, #16]
 800a490:	4650      	mov	r0, sl
 800a492:	f000 fa9b 	bl	800a9cc <_free_r>
 800a496:	e7c8      	b.n	800a42a <__ssputs_r+0x46>

0800a498 <_svfiprintf_r>:
 800a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a49c:	461d      	mov	r5, r3
 800a49e:	898b      	ldrh	r3, [r1, #12]
 800a4a0:	061f      	lsls	r7, r3, #24
 800a4a2:	b09d      	sub	sp, #116	; 0x74
 800a4a4:	4680      	mov	r8, r0
 800a4a6:	460c      	mov	r4, r1
 800a4a8:	4616      	mov	r6, r2
 800a4aa:	d50f      	bpl.n	800a4cc <_svfiprintf_r+0x34>
 800a4ac:	690b      	ldr	r3, [r1, #16]
 800a4ae:	b96b      	cbnz	r3, 800a4cc <_svfiprintf_r+0x34>
 800a4b0:	2140      	movs	r1, #64	; 0x40
 800a4b2:	f000 fad9 	bl	800aa68 <_malloc_r>
 800a4b6:	6020      	str	r0, [r4, #0]
 800a4b8:	6120      	str	r0, [r4, #16]
 800a4ba:	b928      	cbnz	r0, 800a4c8 <_svfiprintf_r+0x30>
 800a4bc:	230c      	movs	r3, #12
 800a4be:	f8c8 3000 	str.w	r3, [r8]
 800a4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c6:	e0c8      	b.n	800a65a <_svfiprintf_r+0x1c2>
 800a4c8:	2340      	movs	r3, #64	; 0x40
 800a4ca:	6163      	str	r3, [r4, #20]
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d0:	2320      	movs	r3, #32
 800a4d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4d6:	2330      	movs	r3, #48	; 0x30
 800a4d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4dc:	9503      	str	r5, [sp, #12]
 800a4de:	f04f 0b01 	mov.w	fp, #1
 800a4e2:	4637      	mov	r7, r6
 800a4e4:	463d      	mov	r5, r7
 800a4e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a4ea:	b10b      	cbz	r3, 800a4f0 <_svfiprintf_r+0x58>
 800a4ec:	2b25      	cmp	r3, #37	; 0x25
 800a4ee:	d13e      	bne.n	800a56e <_svfiprintf_r+0xd6>
 800a4f0:	ebb7 0a06 	subs.w	sl, r7, r6
 800a4f4:	d00b      	beq.n	800a50e <_svfiprintf_r+0x76>
 800a4f6:	4653      	mov	r3, sl
 800a4f8:	4632      	mov	r2, r6
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	4640      	mov	r0, r8
 800a4fe:	f7ff ff71 	bl	800a3e4 <__ssputs_r>
 800a502:	3001      	adds	r0, #1
 800a504:	f000 80a4 	beq.w	800a650 <_svfiprintf_r+0x1b8>
 800a508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a50a:	4453      	add	r3, sl
 800a50c:	9309      	str	r3, [sp, #36]	; 0x24
 800a50e:	783b      	ldrb	r3, [r7, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	f000 809d 	beq.w	800a650 <_svfiprintf_r+0x1b8>
 800a516:	2300      	movs	r3, #0
 800a518:	f04f 32ff 	mov.w	r2, #4294967295
 800a51c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a520:	9304      	str	r3, [sp, #16]
 800a522:	9307      	str	r3, [sp, #28]
 800a524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a528:	931a      	str	r3, [sp, #104]	; 0x68
 800a52a:	462f      	mov	r7, r5
 800a52c:	2205      	movs	r2, #5
 800a52e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a532:	4850      	ldr	r0, [pc, #320]	; (800a674 <_svfiprintf_r+0x1dc>)
 800a534:	f7f5 fe54 	bl	80001e0 <memchr>
 800a538:	9b04      	ldr	r3, [sp, #16]
 800a53a:	b9d0      	cbnz	r0, 800a572 <_svfiprintf_r+0xda>
 800a53c:	06d9      	lsls	r1, r3, #27
 800a53e:	bf44      	itt	mi
 800a540:	2220      	movmi	r2, #32
 800a542:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a546:	071a      	lsls	r2, r3, #28
 800a548:	bf44      	itt	mi
 800a54a:	222b      	movmi	r2, #43	; 0x2b
 800a54c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a550:	782a      	ldrb	r2, [r5, #0]
 800a552:	2a2a      	cmp	r2, #42	; 0x2a
 800a554:	d015      	beq.n	800a582 <_svfiprintf_r+0xea>
 800a556:	9a07      	ldr	r2, [sp, #28]
 800a558:	462f      	mov	r7, r5
 800a55a:	2000      	movs	r0, #0
 800a55c:	250a      	movs	r5, #10
 800a55e:	4639      	mov	r1, r7
 800a560:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a564:	3b30      	subs	r3, #48	; 0x30
 800a566:	2b09      	cmp	r3, #9
 800a568:	d94d      	bls.n	800a606 <_svfiprintf_r+0x16e>
 800a56a:	b1b8      	cbz	r0, 800a59c <_svfiprintf_r+0x104>
 800a56c:	e00f      	b.n	800a58e <_svfiprintf_r+0xf6>
 800a56e:	462f      	mov	r7, r5
 800a570:	e7b8      	b.n	800a4e4 <_svfiprintf_r+0x4c>
 800a572:	4a40      	ldr	r2, [pc, #256]	; (800a674 <_svfiprintf_r+0x1dc>)
 800a574:	1a80      	subs	r0, r0, r2
 800a576:	fa0b f000 	lsl.w	r0, fp, r0
 800a57a:	4318      	orrs	r0, r3
 800a57c:	9004      	str	r0, [sp, #16]
 800a57e:	463d      	mov	r5, r7
 800a580:	e7d3      	b.n	800a52a <_svfiprintf_r+0x92>
 800a582:	9a03      	ldr	r2, [sp, #12]
 800a584:	1d11      	adds	r1, r2, #4
 800a586:	6812      	ldr	r2, [r2, #0]
 800a588:	9103      	str	r1, [sp, #12]
 800a58a:	2a00      	cmp	r2, #0
 800a58c:	db01      	blt.n	800a592 <_svfiprintf_r+0xfa>
 800a58e:	9207      	str	r2, [sp, #28]
 800a590:	e004      	b.n	800a59c <_svfiprintf_r+0x104>
 800a592:	4252      	negs	r2, r2
 800a594:	f043 0302 	orr.w	r3, r3, #2
 800a598:	9207      	str	r2, [sp, #28]
 800a59a:	9304      	str	r3, [sp, #16]
 800a59c:	783b      	ldrb	r3, [r7, #0]
 800a59e:	2b2e      	cmp	r3, #46	; 0x2e
 800a5a0:	d10c      	bne.n	800a5bc <_svfiprintf_r+0x124>
 800a5a2:	787b      	ldrb	r3, [r7, #1]
 800a5a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a5a6:	d133      	bne.n	800a610 <_svfiprintf_r+0x178>
 800a5a8:	9b03      	ldr	r3, [sp, #12]
 800a5aa:	1d1a      	adds	r2, r3, #4
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	9203      	str	r2, [sp, #12]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	bfb8      	it	lt
 800a5b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5b8:	3702      	adds	r7, #2
 800a5ba:	9305      	str	r3, [sp, #20]
 800a5bc:	4d2e      	ldr	r5, [pc, #184]	; (800a678 <_svfiprintf_r+0x1e0>)
 800a5be:	7839      	ldrb	r1, [r7, #0]
 800a5c0:	2203      	movs	r2, #3
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	f7f5 fe0c 	bl	80001e0 <memchr>
 800a5c8:	b138      	cbz	r0, 800a5da <_svfiprintf_r+0x142>
 800a5ca:	2340      	movs	r3, #64	; 0x40
 800a5cc:	1b40      	subs	r0, r0, r5
 800a5ce:	fa03 f000 	lsl.w	r0, r3, r0
 800a5d2:	9b04      	ldr	r3, [sp, #16]
 800a5d4:	4303      	orrs	r3, r0
 800a5d6:	3701      	adds	r7, #1
 800a5d8:	9304      	str	r3, [sp, #16]
 800a5da:	7839      	ldrb	r1, [r7, #0]
 800a5dc:	4827      	ldr	r0, [pc, #156]	; (800a67c <_svfiprintf_r+0x1e4>)
 800a5de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5e2:	2206      	movs	r2, #6
 800a5e4:	1c7e      	adds	r6, r7, #1
 800a5e6:	f7f5 fdfb 	bl	80001e0 <memchr>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d038      	beq.n	800a660 <_svfiprintf_r+0x1c8>
 800a5ee:	4b24      	ldr	r3, [pc, #144]	; (800a680 <_svfiprintf_r+0x1e8>)
 800a5f0:	bb13      	cbnz	r3, 800a638 <_svfiprintf_r+0x1a0>
 800a5f2:	9b03      	ldr	r3, [sp, #12]
 800a5f4:	3307      	adds	r3, #7
 800a5f6:	f023 0307 	bic.w	r3, r3, #7
 800a5fa:	3308      	adds	r3, #8
 800a5fc:	9303      	str	r3, [sp, #12]
 800a5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a600:	444b      	add	r3, r9
 800a602:	9309      	str	r3, [sp, #36]	; 0x24
 800a604:	e76d      	b.n	800a4e2 <_svfiprintf_r+0x4a>
 800a606:	fb05 3202 	mla	r2, r5, r2, r3
 800a60a:	2001      	movs	r0, #1
 800a60c:	460f      	mov	r7, r1
 800a60e:	e7a6      	b.n	800a55e <_svfiprintf_r+0xc6>
 800a610:	2300      	movs	r3, #0
 800a612:	3701      	adds	r7, #1
 800a614:	9305      	str	r3, [sp, #20]
 800a616:	4619      	mov	r1, r3
 800a618:	250a      	movs	r5, #10
 800a61a:	4638      	mov	r0, r7
 800a61c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a620:	3a30      	subs	r2, #48	; 0x30
 800a622:	2a09      	cmp	r2, #9
 800a624:	d903      	bls.n	800a62e <_svfiprintf_r+0x196>
 800a626:	2b00      	cmp	r3, #0
 800a628:	d0c8      	beq.n	800a5bc <_svfiprintf_r+0x124>
 800a62a:	9105      	str	r1, [sp, #20]
 800a62c:	e7c6      	b.n	800a5bc <_svfiprintf_r+0x124>
 800a62e:	fb05 2101 	mla	r1, r5, r1, r2
 800a632:	2301      	movs	r3, #1
 800a634:	4607      	mov	r7, r0
 800a636:	e7f0      	b.n	800a61a <_svfiprintf_r+0x182>
 800a638:	ab03      	add	r3, sp, #12
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	4622      	mov	r2, r4
 800a63e:	4b11      	ldr	r3, [pc, #68]	; (800a684 <_svfiprintf_r+0x1ec>)
 800a640:	a904      	add	r1, sp, #16
 800a642:	4640      	mov	r0, r8
 800a644:	f3af 8000 	nop.w
 800a648:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a64c:	4681      	mov	r9, r0
 800a64e:	d1d6      	bne.n	800a5fe <_svfiprintf_r+0x166>
 800a650:	89a3      	ldrh	r3, [r4, #12]
 800a652:	065b      	lsls	r3, r3, #25
 800a654:	f53f af35 	bmi.w	800a4c2 <_svfiprintf_r+0x2a>
 800a658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a65a:	b01d      	add	sp, #116	; 0x74
 800a65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a660:	ab03      	add	r3, sp, #12
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	4622      	mov	r2, r4
 800a666:	4b07      	ldr	r3, [pc, #28]	; (800a684 <_svfiprintf_r+0x1ec>)
 800a668:	a904      	add	r1, sp, #16
 800a66a:	4640      	mov	r0, r8
 800a66c:	f000 f882 	bl	800a774 <_printf_i>
 800a670:	e7ea      	b.n	800a648 <_svfiprintf_r+0x1b0>
 800a672:	bf00      	nop
 800a674:	0800be50 	.word	0x0800be50
 800a678:	0800be56 	.word	0x0800be56
 800a67c:	0800be5a 	.word	0x0800be5a
 800a680:	00000000 	.word	0x00000000
 800a684:	0800a3e5 	.word	0x0800a3e5

0800a688 <_printf_common>:
 800a688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a68c:	4691      	mov	r9, r2
 800a68e:	461f      	mov	r7, r3
 800a690:	688a      	ldr	r2, [r1, #8]
 800a692:	690b      	ldr	r3, [r1, #16]
 800a694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a698:	4293      	cmp	r3, r2
 800a69a:	bfb8      	it	lt
 800a69c:	4613      	movlt	r3, r2
 800a69e:	f8c9 3000 	str.w	r3, [r9]
 800a6a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	460c      	mov	r4, r1
 800a6aa:	b112      	cbz	r2, 800a6b2 <_printf_common+0x2a>
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	f8c9 3000 	str.w	r3, [r9]
 800a6b2:	6823      	ldr	r3, [r4, #0]
 800a6b4:	0699      	lsls	r1, r3, #26
 800a6b6:	bf42      	ittt	mi
 800a6b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a6bc:	3302      	addmi	r3, #2
 800a6be:	f8c9 3000 	strmi.w	r3, [r9]
 800a6c2:	6825      	ldr	r5, [r4, #0]
 800a6c4:	f015 0506 	ands.w	r5, r5, #6
 800a6c8:	d107      	bne.n	800a6da <_printf_common+0x52>
 800a6ca:	f104 0a19 	add.w	sl, r4, #25
 800a6ce:	68e3      	ldr	r3, [r4, #12]
 800a6d0:	f8d9 2000 	ldr.w	r2, [r9]
 800a6d4:	1a9b      	subs	r3, r3, r2
 800a6d6:	42ab      	cmp	r3, r5
 800a6d8:	dc28      	bgt.n	800a72c <_printf_common+0xa4>
 800a6da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a6de:	6822      	ldr	r2, [r4, #0]
 800a6e0:	3300      	adds	r3, #0
 800a6e2:	bf18      	it	ne
 800a6e4:	2301      	movne	r3, #1
 800a6e6:	0692      	lsls	r2, r2, #26
 800a6e8:	d42d      	bmi.n	800a746 <_printf_common+0xbe>
 800a6ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6ee:	4639      	mov	r1, r7
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	47c0      	blx	r8
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	d020      	beq.n	800a73a <_printf_common+0xb2>
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	68e5      	ldr	r5, [r4, #12]
 800a6fc:	f8d9 2000 	ldr.w	r2, [r9]
 800a700:	f003 0306 	and.w	r3, r3, #6
 800a704:	2b04      	cmp	r3, #4
 800a706:	bf08      	it	eq
 800a708:	1aad      	subeq	r5, r5, r2
 800a70a:	68a3      	ldr	r3, [r4, #8]
 800a70c:	6922      	ldr	r2, [r4, #16]
 800a70e:	bf0c      	ite	eq
 800a710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a714:	2500      	movne	r5, #0
 800a716:	4293      	cmp	r3, r2
 800a718:	bfc4      	itt	gt
 800a71a:	1a9b      	subgt	r3, r3, r2
 800a71c:	18ed      	addgt	r5, r5, r3
 800a71e:	f04f 0900 	mov.w	r9, #0
 800a722:	341a      	adds	r4, #26
 800a724:	454d      	cmp	r5, r9
 800a726:	d11a      	bne.n	800a75e <_printf_common+0xd6>
 800a728:	2000      	movs	r0, #0
 800a72a:	e008      	b.n	800a73e <_printf_common+0xb6>
 800a72c:	2301      	movs	r3, #1
 800a72e:	4652      	mov	r2, sl
 800a730:	4639      	mov	r1, r7
 800a732:	4630      	mov	r0, r6
 800a734:	47c0      	blx	r8
 800a736:	3001      	adds	r0, #1
 800a738:	d103      	bne.n	800a742 <_printf_common+0xba>
 800a73a:	f04f 30ff 	mov.w	r0, #4294967295
 800a73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a742:	3501      	adds	r5, #1
 800a744:	e7c3      	b.n	800a6ce <_printf_common+0x46>
 800a746:	18e1      	adds	r1, r4, r3
 800a748:	1c5a      	adds	r2, r3, #1
 800a74a:	2030      	movs	r0, #48	; 0x30
 800a74c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a750:	4422      	add	r2, r4
 800a752:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a756:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a75a:	3302      	adds	r3, #2
 800a75c:	e7c5      	b.n	800a6ea <_printf_common+0x62>
 800a75e:	2301      	movs	r3, #1
 800a760:	4622      	mov	r2, r4
 800a762:	4639      	mov	r1, r7
 800a764:	4630      	mov	r0, r6
 800a766:	47c0      	blx	r8
 800a768:	3001      	adds	r0, #1
 800a76a:	d0e6      	beq.n	800a73a <_printf_common+0xb2>
 800a76c:	f109 0901 	add.w	r9, r9, #1
 800a770:	e7d8      	b.n	800a724 <_printf_common+0x9c>
	...

0800a774 <_printf_i>:
 800a774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a778:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a77c:	460c      	mov	r4, r1
 800a77e:	7e09      	ldrb	r1, [r1, #24]
 800a780:	b085      	sub	sp, #20
 800a782:	296e      	cmp	r1, #110	; 0x6e
 800a784:	4617      	mov	r7, r2
 800a786:	4606      	mov	r6, r0
 800a788:	4698      	mov	r8, r3
 800a78a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a78c:	f000 80b3 	beq.w	800a8f6 <_printf_i+0x182>
 800a790:	d822      	bhi.n	800a7d8 <_printf_i+0x64>
 800a792:	2963      	cmp	r1, #99	; 0x63
 800a794:	d036      	beq.n	800a804 <_printf_i+0x90>
 800a796:	d80a      	bhi.n	800a7ae <_printf_i+0x3a>
 800a798:	2900      	cmp	r1, #0
 800a79a:	f000 80b9 	beq.w	800a910 <_printf_i+0x19c>
 800a79e:	2958      	cmp	r1, #88	; 0x58
 800a7a0:	f000 8083 	beq.w	800a8aa <_printf_i+0x136>
 800a7a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a7ac:	e032      	b.n	800a814 <_printf_i+0xa0>
 800a7ae:	2964      	cmp	r1, #100	; 0x64
 800a7b0:	d001      	beq.n	800a7b6 <_printf_i+0x42>
 800a7b2:	2969      	cmp	r1, #105	; 0x69
 800a7b4:	d1f6      	bne.n	800a7a4 <_printf_i+0x30>
 800a7b6:	6820      	ldr	r0, [r4, #0]
 800a7b8:	6813      	ldr	r3, [r2, #0]
 800a7ba:	0605      	lsls	r5, r0, #24
 800a7bc:	f103 0104 	add.w	r1, r3, #4
 800a7c0:	d52a      	bpl.n	800a818 <_printf_i+0xa4>
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	6011      	str	r1, [r2, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	da03      	bge.n	800a7d2 <_printf_i+0x5e>
 800a7ca:	222d      	movs	r2, #45	; 0x2d
 800a7cc:	425b      	negs	r3, r3
 800a7ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a7d2:	486f      	ldr	r0, [pc, #444]	; (800a990 <_printf_i+0x21c>)
 800a7d4:	220a      	movs	r2, #10
 800a7d6:	e039      	b.n	800a84c <_printf_i+0xd8>
 800a7d8:	2973      	cmp	r1, #115	; 0x73
 800a7da:	f000 809d 	beq.w	800a918 <_printf_i+0x1a4>
 800a7de:	d808      	bhi.n	800a7f2 <_printf_i+0x7e>
 800a7e0:	296f      	cmp	r1, #111	; 0x6f
 800a7e2:	d020      	beq.n	800a826 <_printf_i+0xb2>
 800a7e4:	2970      	cmp	r1, #112	; 0x70
 800a7e6:	d1dd      	bne.n	800a7a4 <_printf_i+0x30>
 800a7e8:	6823      	ldr	r3, [r4, #0]
 800a7ea:	f043 0320 	orr.w	r3, r3, #32
 800a7ee:	6023      	str	r3, [r4, #0]
 800a7f0:	e003      	b.n	800a7fa <_printf_i+0x86>
 800a7f2:	2975      	cmp	r1, #117	; 0x75
 800a7f4:	d017      	beq.n	800a826 <_printf_i+0xb2>
 800a7f6:	2978      	cmp	r1, #120	; 0x78
 800a7f8:	d1d4      	bne.n	800a7a4 <_printf_i+0x30>
 800a7fa:	2378      	movs	r3, #120	; 0x78
 800a7fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a800:	4864      	ldr	r0, [pc, #400]	; (800a994 <_printf_i+0x220>)
 800a802:	e055      	b.n	800a8b0 <_printf_i+0x13c>
 800a804:	6813      	ldr	r3, [r2, #0]
 800a806:	1d19      	adds	r1, r3, #4
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6011      	str	r1, [r2, #0]
 800a80c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a814:	2301      	movs	r3, #1
 800a816:	e08c      	b.n	800a932 <_printf_i+0x1be>
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	6011      	str	r1, [r2, #0]
 800a81c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a820:	bf18      	it	ne
 800a822:	b21b      	sxthne	r3, r3
 800a824:	e7cf      	b.n	800a7c6 <_printf_i+0x52>
 800a826:	6813      	ldr	r3, [r2, #0]
 800a828:	6825      	ldr	r5, [r4, #0]
 800a82a:	1d18      	adds	r0, r3, #4
 800a82c:	6010      	str	r0, [r2, #0]
 800a82e:	0628      	lsls	r0, r5, #24
 800a830:	d501      	bpl.n	800a836 <_printf_i+0xc2>
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	e002      	b.n	800a83c <_printf_i+0xc8>
 800a836:	0668      	lsls	r0, r5, #25
 800a838:	d5fb      	bpl.n	800a832 <_printf_i+0xbe>
 800a83a:	881b      	ldrh	r3, [r3, #0]
 800a83c:	4854      	ldr	r0, [pc, #336]	; (800a990 <_printf_i+0x21c>)
 800a83e:	296f      	cmp	r1, #111	; 0x6f
 800a840:	bf14      	ite	ne
 800a842:	220a      	movne	r2, #10
 800a844:	2208      	moveq	r2, #8
 800a846:	2100      	movs	r1, #0
 800a848:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a84c:	6865      	ldr	r5, [r4, #4]
 800a84e:	60a5      	str	r5, [r4, #8]
 800a850:	2d00      	cmp	r5, #0
 800a852:	f2c0 8095 	blt.w	800a980 <_printf_i+0x20c>
 800a856:	6821      	ldr	r1, [r4, #0]
 800a858:	f021 0104 	bic.w	r1, r1, #4
 800a85c:	6021      	str	r1, [r4, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d13d      	bne.n	800a8de <_printf_i+0x16a>
 800a862:	2d00      	cmp	r5, #0
 800a864:	f040 808e 	bne.w	800a984 <_printf_i+0x210>
 800a868:	4665      	mov	r5, ip
 800a86a:	2a08      	cmp	r2, #8
 800a86c:	d10b      	bne.n	800a886 <_printf_i+0x112>
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	07db      	lsls	r3, r3, #31
 800a872:	d508      	bpl.n	800a886 <_printf_i+0x112>
 800a874:	6923      	ldr	r3, [r4, #16]
 800a876:	6862      	ldr	r2, [r4, #4]
 800a878:	429a      	cmp	r2, r3
 800a87a:	bfde      	ittt	le
 800a87c:	2330      	movle	r3, #48	; 0x30
 800a87e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a882:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a886:	ebac 0305 	sub.w	r3, ip, r5
 800a88a:	6123      	str	r3, [r4, #16]
 800a88c:	f8cd 8000 	str.w	r8, [sp]
 800a890:	463b      	mov	r3, r7
 800a892:	aa03      	add	r2, sp, #12
 800a894:	4621      	mov	r1, r4
 800a896:	4630      	mov	r0, r6
 800a898:	f7ff fef6 	bl	800a688 <_printf_common>
 800a89c:	3001      	adds	r0, #1
 800a89e:	d14d      	bne.n	800a93c <_printf_i+0x1c8>
 800a8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a4:	b005      	add	sp, #20
 800a8a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8aa:	4839      	ldr	r0, [pc, #228]	; (800a990 <_printf_i+0x21c>)
 800a8ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a8b0:	6813      	ldr	r3, [r2, #0]
 800a8b2:	6821      	ldr	r1, [r4, #0]
 800a8b4:	1d1d      	adds	r5, r3, #4
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	6015      	str	r5, [r2, #0]
 800a8ba:	060a      	lsls	r2, r1, #24
 800a8bc:	d50b      	bpl.n	800a8d6 <_printf_i+0x162>
 800a8be:	07ca      	lsls	r2, r1, #31
 800a8c0:	bf44      	itt	mi
 800a8c2:	f041 0120 	orrmi.w	r1, r1, #32
 800a8c6:	6021      	strmi	r1, [r4, #0]
 800a8c8:	b91b      	cbnz	r3, 800a8d2 <_printf_i+0x15e>
 800a8ca:	6822      	ldr	r2, [r4, #0]
 800a8cc:	f022 0220 	bic.w	r2, r2, #32
 800a8d0:	6022      	str	r2, [r4, #0]
 800a8d2:	2210      	movs	r2, #16
 800a8d4:	e7b7      	b.n	800a846 <_printf_i+0xd2>
 800a8d6:	064d      	lsls	r5, r1, #25
 800a8d8:	bf48      	it	mi
 800a8da:	b29b      	uxthmi	r3, r3
 800a8dc:	e7ef      	b.n	800a8be <_printf_i+0x14a>
 800a8de:	4665      	mov	r5, ip
 800a8e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8e4:	fb02 3311 	mls	r3, r2, r1, r3
 800a8e8:	5cc3      	ldrb	r3, [r0, r3]
 800a8ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	2900      	cmp	r1, #0
 800a8f2:	d1f5      	bne.n	800a8e0 <_printf_i+0x16c>
 800a8f4:	e7b9      	b.n	800a86a <_printf_i+0xf6>
 800a8f6:	6813      	ldr	r3, [r2, #0]
 800a8f8:	6825      	ldr	r5, [r4, #0]
 800a8fa:	6961      	ldr	r1, [r4, #20]
 800a8fc:	1d18      	adds	r0, r3, #4
 800a8fe:	6010      	str	r0, [r2, #0]
 800a900:	0628      	lsls	r0, r5, #24
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	d501      	bpl.n	800a90a <_printf_i+0x196>
 800a906:	6019      	str	r1, [r3, #0]
 800a908:	e002      	b.n	800a910 <_printf_i+0x19c>
 800a90a:	066a      	lsls	r2, r5, #25
 800a90c:	d5fb      	bpl.n	800a906 <_printf_i+0x192>
 800a90e:	8019      	strh	r1, [r3, #0]
 800a910:	2300      	movs	r3, #0
 800a912:	6123      	str	r3, [r4, #16]
 800a914:	4665      	mov	r5, ip
 800a916:	e7b9      	b.n	800a88c <_printf_i+0x118>
 800a918:	6813      	ldr	r3, [r2, #0]
 800a91a:	1d19      	adds	r1, r3, #4
 800a91c:	6011      	str	r1, [r2, #0]
 800a91e:	681d      	ldr	r5, [r3, #0]
 800a920:	6862      	ldr	r2, [r4, #4]
 800a922:	2100      	movs	r1, #0
 800a924:	4628      	mov	r0, r5
 800a926:	f7f5 fc5b 	bl	80001e0 <memchr>
 800a92a:	b108      	cbz	r0, 800a930 <_printf_i+0x1bc>
 800a92c:	1b40      	subs	r0, r0, r5
 800a92e:	6060      	str	r0, [r4, #4]
 800a930:	6863      	ldr	r3, [r4, #4]
 800a932:	6123      	str	r3, [r4, #16]
 800a934:	2300      	movs	r3, #0
 800a936:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a93a:	e7a7      	b.n	800a88c <_printf_i+0x118>
 800a93c:	6923      	ldr	r3, [r4, #16]
 800a93e:	462a      	mov	r2, r5
 800a940:	4639      	mov	r1, r7
 800a942:	4630      	mov	r0, r6
 800a944:	47c0      	blx	r8
 800a946:	3001      	adds	r0, #1
 800a948:	d0aa      	beq.n	800a8a0 <_printf_i+0x12c>
 800a94a:	6823      	ldr	r3, [r4, #0]
 800a94c:	079b      	lsls	r3, r3, #30
 800a94e:	d413      	bmi.n	800a978 <_printf_i+0x204>
 800a950:	68e0      	ldr	r0, [r4, #12]
 800a952:	9b03      	ldr	r3, [sp, #12]
 800a954:	4298      	cmp	r0, r3
 800a956:	bfb8      	it	lt
 800a958:	4618      	movlt	r0, r3
 800a95a:	e7a3      	b.n	800a8a4 <_printf_i+0x130>
 800a95c:	2301      	movs	r3, #1
 800a95e:	464a      	mov	r2, r9
 800a960:	4639      	mov	r1, r7
 800a962:	4630      	mov	r0, r6
 800a964:	47c0      	blx	r8
 800a966:	3001      	adds	r0, #1
 800a968:	d09a      	beq.n	800a8a0 <_printf_i+0x12c>
 800a96a:	3501      	adds	r5, #1
 800a96c:	68e3      	ldr	r3, [r4, #12]
 800a96e:	9a03      	ldr	r2, [sp, #12]
 800a970:	1a9b      	subs	r3, r3, r2
 800a972:	42ab      	cmp	r3, r5
 800a974:	dcf2      	bgt.n	800a95c <_printf_i+0x1e8>
 800a976:	e7eb      	b.n	800a950 <_printf_i+0x1dc>
 800a978:	2500      	movs	r5, #0
 800a97a:	f104 0919 	add.w	r9, r4, #25
 800a97e:	e7f5      	b.n	800a96c <_printf_i+0x1f8>
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1ac      	bne.n	800a8de <_printf_i+0x16a>
 800a984:	7803      	ldrb	r3, [r0, #0]
 800a986:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a98a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a98e:	e76c      	b.n	800a86a <_printf_i+0xf6>
 800a990:	0800be61 	.word	0x0800be61
 800a994:	0800be72 	.word	0x0800be72

0800a998 <memmove>:
 800a998:	4288      	cmp	r0, r1
 800a99a:	b510      	push	{r4, lr}
 800a99c:	eb01 0302 	add.w	r3, r1, r2
 800a9a0:	d807      	bhi.n	800a9b2 <memmove+0x1a>
 800a9a2:	1e42      	subs	r2, r0, #1
 800a9a4:	4299      	cmp	r1, r3
 800a9a6:	d00a      	beq.n	800a9be <memmove+0x26>
 800a9a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a9b0:	e7f8      	b.n	800a9a4 <memmove+0xc>
 800a9b2:	4283      	cmp	r3, r0
 800a9b4:	d9f5      	bls.n	800a9a2 <memmove+0xa>
 800a9b6:	1881      	adds	r1, r0, r2
 800a9b8:	1ad2      	subs	r2, r2, r3
 800a9ba:	42d3      	cmn	r3, r2
 800a9bc:	d100      	bne.n	800a9c0 <memmove+0x28>
 800a9be:	bd10      	pop	{r4, pc}
 800a9c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a9c8:	e7f7      	b.n	800a9ba <memmove+0x22>
	...

0800a9cc <_free_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	2900      	cmp	r1, #0
 800a9d2:	d045      	beq.n	800aa60 <_free_r+0x94>
 800a9d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d8:	1f0c      	subs	r4, r1, #4
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	bfb8      	it	lt
 800a9de:	18e4      	addlt	r4, r4, r3
 800a9e0:	f000 f8d2 	bl	800ab88 <__malloc_lock>
 800a9e4:	4a1f      	ldr	r2, [pc, #124]	; (800aa64 <_free_r+0x98>)
 800a9e6:	6813      	ldr	r3, [r2, #0]
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	b933      	cbnz	r3, 800a9fa <_free_r+0x2e>
 800a9ec:	6063      	str	r3, [r4, #4]
 800a9ee:	6014      	str	r4, [r2, #0]
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9f6:	f000 b8c8 	b.w	800ab8a <__malloc_unlock>
 800a9fa:	42a3      	cmp	r3, r4
 800a9fc:	d90c      	bls.n	800aa18 <_free_r+0x4c>
 800a9fe:	6821      	ldr	r1, [r4, #0]
 800aa00:	1862      	adds	r2, r4, r1
 800aa02:	4293      	cmp	r3, r2
 800aa04:	bf04      	itt	eq
 800aa06:	681a      	ldreq	r2, [r3, #0]
 800aa08:	685b      	ldreq	r3, [r3, #4]
 800aa0a:	6063      	str	r3, [r4, #4]
 800aa0c:	bf04      	itt	eq
 800aa0e:	1852      	addeq	r2, r2, r1
 800aa10:	6022      	streq	r2, [r4, #0]
 800aa12:	6004      	str	r4, [r0, #0]
 800aa14:	e7ec      	b.n	800a9f0 <_free_r+0x24>
 800aa16:	4613      	mov	r3, r2
 800aa18:	685a      	ldr	r2, [r3, #4]
 800aa1a:	b10a      	cbz	r2, 800aa20 <_free_r+0x54>
 800aa1c:	42a2      	cmp	r2, r4
 800aa1e:	d9fa      	bls.n	800aa16 <_free_r+0x4a>
 800aa20:	6819      	ldr	r1, [r3, #0]
 800aa22:	1858      	adds	r0, r3, r1
 800aa24:	42a0      	cmp	r0, r4
 800aa26:	d10b      	bne.n	800aa40 <_free_r+0x74>
 800aa28:	6820      	ldr	r0, [r4, #0]
 800aa2a:	4401      	add	r1, r0
 800aa2c:	1858      	adds	r0, r3, r1
 800aa2e:	4282      	cmp	r2, r0
 800aa30:	6019      	str	r1, [r3, #0]
 800aa32:	d1dd      	bne.n	800a9f0 <_free_r+0x24>
 800aa34:	6810      	ldr	r0, [r2, #0]
 800aa36:	6852      	ldr	r2, [r2, #4]
 800aa38:	605a      	str	r2, [r3, #4]
 800aa3a:	4401      	add	r1, r0
 800aa3c:	6019      	str	r1, [r3, #0]
 800aa3e:	e7d7      	b.n	800a9f0 <_free_r+0x24>
 800aa40:	d902      	bls.n	800aa48 <_free_r+0x7c>
 800aa42:	230c      	movs	r3, #12
 800aa44:	602b      	str	r3, [r5, #0]
 800aa46:	e7d3      	b.n	800a9f0 <_free_r+0x24>
 800aa48:	6820      	ldr	r0, [r4, #0]
 800aa4a:	1821      	adds	r1, r4, r0
 800aa4c:	428a      	cmp	r2, r1
 800aa4e:	bf04      	itt	eq
 800aa50:	6811      	ldreq	r1, [r2, #0]
 800aa52:	6852      	ldreq	r2, [r2, #4]
 800aa54:	6062      	str	r2, [r4, #4]
 800aa56:	bf04      	itt	eq
 800aa58:	1809      	addeq	r1, r1, r0
 800aa5a:	6021      	streq	r1, [r4, #0]
 800aa5c:	605c      	str	r4, [r3, #4]
 800aa5e:	e7c7      	b.n	800a9f0 <_free_r+0x24>
 800aa60:	bd38      	pop	{r3, r4, r5, pc}
 800aa62:	bf00      	nop
 800aa64:	200005f0 	.word	0x200005f0

0800aa68 <_malloc_r>:
 800aa68:	b570      	push	{r4, r5, r6, lr}
 800aa6a:	1ccd      	adds	r5, r1, #3
 800aa6c:	f025 0503 	bic.w	r5, r5, #3
 800aa70:	3508      	adds	r5, #8
 800aa72:	2d0c      	cmp	r5, #12
 800aa74:	bf38      	it	cc
 800aa76:	250c      	movcc	r5, #12
 800aa78:	2d00      	cmp	r5, #0
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	db01      	blt.n	800aa82 <_malloc_r+0x1a>
 800aa7e:	42a9      	cmp	r1, r5
 800aa80:	d903      	bls.n	800aa8a <_malloc_r+0x22>
 800aa82:	230c      	movs	r3, #12
 800aa84:	6033      	str	r3, [r6, #0]
 800aa86:	2000      	movs	r0, #0
 800aa88:	bd70      	pop	{r4, r5, r6, pc}
 800aa8a:	f000 f87d 	bl	800ab88 <__malloc_lock>
 800aa8e:	4a21      	ldr	r2, [pc, #132]	; (800ab14 <_malloc_r+0xac>)
 800aa90:	6814      	ldr	r4, [r2, #0]
 800aa92:	4621      	mov	r1, r4
 800aa94:	b991      	cbnz	r1, 800aabc <_malloc_r+0x54>
 800aa96:	4c20      	ldr	r4, [pc, #128]	; (800ab18 <_malloc_r+0xb0>)
 800aa98:	6823      	ldr	r3, [r4, #0]
 800aa9a:	b91b      	cbnz	r3, 800aaa4 <_malloc_r+0x3c>
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f000 f863 	bl	800ab68 <_sbrk_r>
 800aaa2:	6020      	str	r0, [r4, #0]
 800aaa4:	4629      	mov	r1, r5
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	f000 f85e 	bl	800ab68 <_sbrk_r>
 800aaac:	1c43      	adds	r3, r0, #1
 800aaae:	d124      	bne.n	800aafa <_malloc_r+0x92>
 800aab0:	230c      	movs	r3, #12
 800aab2:	6033      	str	r3, [r6, #0]
 800aab4:	4630      	mov	r0, r6
 800aab6:	f000 f868 	bl	800ab8a <__malloc_unlock>
 800aaba:	e7e4      	b.n	800aa86 <_malloc_r+0x1e>
 800aabc:	680b      	ldr	r3, [r1, #0]
 800aabe:	1b5b      	subs	r3, r3, r5
 800aac0:	d418      	bmi.n	800aaf4 <_malloc_r+0x8c>
 800aac2:	2b0b      	cmp	r3, #11
 800aac4:	d90f      	bls.n	800aae6 <_malloc_r+0x7e>
 800aac6:	600b      	str	r3, [r1, #0]
 800aac8:	50cd      	str	r5, [r1, r3]
 800aaca:	18cc      	adds	r4, r1, r3
 800aacc:	4630      	mov	r0, r6
 800aace:	f000 f85c 	bl	800ab8a <__malloc_unlock>
 800aad2:	f104 000b 	add.w	r0, r4, #11
 800aad6:	1d23      	adds	r3, r4, #4
 800aad8:	f020 0007 	bic.w	r0, r0, #7
 800aadc:	1ac3      	subs	r3, r0, r3
 800aade:	d0d3      	beq.n	800aa88 <_malloc_r+0x20>
 800aae0:	425a      	negs	r2, r3
 800aae2:	50e2      	str	r2, [r4, r3]
 800aae4:	e7d0      	b.n	800aa88 <_malloc_r+0x20>
 800aae6:	428c      	cmp	r4, r1
 800aae8:	684b      	ldr	r3, [r1, #4]
 800aaea:	bf16      	itet	ne
 800aaec:	6063      	strne	r3, [r4, #4]
 800aaee:	6013      	streq	r3, [r2, #0]
 800aaf0:	460c      	movne	r4, r1
 800aaf2:	e7eb      	b.n	800aacc <_malloc_r+0x64>
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	6849      	ldr	r1, [r1, #4]
 800aaf8:	e7cc      	b.n	800aa94 <_malloc_r+0x2c>
 800aafa:	1cc4      	adds	r4, r0, #3
 800aafc:	f024 0403 	bic.w	r4, r4, #3
 800ab00:	42a0      	cmp	r0, r4
 800ab02:	d005      	beq.n	800ab10 <_malloc_r+0xa8>
 800ab04:	1a21      	subs	r1, r4, r0
 800ab06:	4630      	mov	r0, r6
 800ab08:	f000 f82e 	bl	800ab68 <_sbrk_r>
 800ab0c:	3001      	adds	r0, #1
 800ab0e:	d0cf      	beq.n	800aab0 <_malloc_r+0x48>
 800ab10:	6025      	str	r5, [r4, #0]
 800ab12:	e7db      	b.n	800aacc <_malloc_r+0x64>
 800ab14:	200005f0 	.word	0x200005f0
 800ab18:	200005f4 	.word	0x200005f4

0800ab1c <_realloc_r>:
 800ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1e:	4607      	mov	r7, r0
 800ab20:	4614      	mov	r4, r2
 800ab22:	460e      	mov	r6, r1
 800ab24:	b921      	cbnz	r1, 800ab30 <_realloc_r+0x14>
 800ab26:	4611      	mov	r1, r2
 800ab28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab2c:	f7ff bf9c 	b.w	800aa68 <_malloc_r>
 800ab30:	b922      	cbnz	r2, 800ab3c <_realloc_r+0x20>
 800ab32:	f7ff ff4b 	bl	800a9cc <_free_r>
 800ab36:	4625      	mov	r5, r4
 800ab38:	4628      	mov	r0, r5
 800ab3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab3c:	f000 f826 	bl	800ab8c <_malloc_usable_size_r>
 800ab40:	42a0      	cmp	r0, r4
 800ab42:	d20f      	bcs.n	800ab64 <_realloc_r+0x48>
 800ab44:	4621      	mov	r1, r4
 800ab46:	4638      	mov	r0, r7
 800ab48:	f7ff ff8e 	bl	800aa68 <_malloc_r>
 800ab4c:	4605      	mov	r5, r0
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	d0f2      	beq.n	800ab38 <_realloc_r+0x1c>
 800ab52:	4631      	mov	r1, r6
 800ab54:	4622      	mov	r2, r4
 800ab56:	f7ff fbcf 	bl	800a2f8 <memcpy>
 800ab5a:	4631      	mov	r1, r6
 800ab5c:	4638      	mov	r0, r7
 800ab5e:	f7ff ff35 	bl	800a9cc <_free_r>
 800ab62:	e7e9      	b.n	800ab38 <_realloc_r+0x1c>
 800ab64:	4635      	mov	r5, r6
 800ab66:	e7e7      	b.n	800ab38 <_realloc_r+0x1c>

0800ab68 <_sbrk_r>:
 800ab68:	b538      	push	{r3, r4, r5, lr}
 800ab6a:	4c06      	ldr	r4, [pc, #24]	; (800ab84 <_sbrk_r+0x1c>)
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	4605      	mov	r5, r0
 800ab70:	4608      	mov	r0, r1
 800ab72:	6023      	str	r3, [r4, #0]
 800ab74:	f7ff fb6a 	bl	800a24c <_sbrk>
 800ab78:	1c43      	adds	r3, r0, #1
 800ab7a:	d102      	bne.n	800ab82 <_sbrk_r+0x1a>
 800ab7c:	6823      	ldr	r3, [r4, #0]
 800ab7e:	b103      	cbz	r3, 800ab82 <_sbrk_r+0x1a>
 800ab80:	602b      	str	r3, [r5, #0]
 800ab82:	bd38      	pop	{r3, r4, r5, pc}
 800ab84:	200007a0 	.word	0x200007a0

0800ab88 <__malloc_lock>:
 800ab88:	4770      	bx	lr

0800ab8a <__malloc_unlock>:
 800ab8a:	4770      	bx	lr

0800ab8c <_malloc_usable_size_r>:
 800ab8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab90:	1f18      	subs	r0, r3, #4
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	bfbc      	itt	lt
 800ab96:	580b      	ldrlt	r3, [r1, r0]
 800ab98:	18c0      	addlt	r0, r0, r3
 800ab9a:	4770      	bx	lr

0800ab9c <_init>:
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	bf00      	nop
 800aba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba2:	bc08      	pop	{r3}
 800aba4:	469e      	mov	lr, r3
 800aba6:	4770      	bx	lr

0800aba8 <_fini>:
 800aba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abaa:	bf00      	nop
 800abac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abae:	bc08      	pop	{r3}
 800abb0:	469e      	mov	lr, r3
 800abb2:	4770      	bx	lr
